// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED__UnicodeString_UnicodeString_Impl_
#include <_UnicodeString/UnicodeString_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxNode
#include <flixel/graphics/atlas/FlxNode.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_AssetFrontEnd
#include <flixel/system/frontEnds/AssetFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormat
#include <flixel/text/FlxTextFormat.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormatMarkerPair
#include <flixel/text/FlxTextFormatMarkerPair.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextFormatRange
#include <flixel/text/_FlxText/FlxTextFormatRange.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_helpers_FlxRange
#include <flixel/util/helpers/FlxRange.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7d9cf70d988be490_40_new,"flixel.text.FlxText","new",0x8fca03a2,"flixel.text.FlxText.new","flixel/text/FlxText.hx",40,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_255_destroy,"flixel.text.FlxText","destroy",0x1704293c,"flixel.text.FlxText.destroy","flixel/text/FlxText.hx",255,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_266_drawFrame,"flixel.text.FlxText","drawFrame",0xd9b5be4b,"flixel.text.FlxText.drawFrame","flixel/text/FlxText.hx",266,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_280_stampOnAtlas,"flixel.text.FlxText","stampOnAtlas",0x66244e67,"flixel.text.FlxText.stampOnAtlas","flixel/text/FlxText.hx",280,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_319_applyMarkup,"flixel.text.FlxText","applyMarkup",0x660988f8,"flixel.text.FlxText.applyMarkup","flixel/text/FlxText.hx",319,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_433_addFormat,"flixel.text.FlxText","addFormat",0xc0d9d4fa,"flixel.text.FlxText.addFormat","flixel/text/FlxText.hx",433,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_428_addFormat,"flixel.text.FlxText","addFormat",0xc0d9d4fa,"flixel.text.FlxText.addFormat","flixel/text/FlxText.hx",428,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_445_removeFormat,"flixel.text.FlxText","removeFormat",0xa79a7f19,"flixel.text.FlxText.removeFormat","flixel/text/FlxText.hx",445,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_491_clearFormats,"flixel.text.FlxText","clearFormats",0xf58bc7cd,"flixel.text.FlxText.clearFormats","flixel/text/FlxText.hx",491,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_512_setFormat,"flixel.text.FlxText","setFormat",0x685d153b,"flixel.text.FlxText.setFormat","flixel/text/FlxText.hx",512,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_544_setBorderStyle,"flixel.text.FlxText","setBorderStyle",0x26cf9c21,"flixel.text.FlxText.setBorderStyle","flixel/text/FlxText.hx",544,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_554_updateHitbox,"flixel.text.FlxText","updateHitbox",0x91c9e8ff,"flixel.text.FlxText.updateHitbox","flixel/text/FlxText.hx",554,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_560_getScreenBounds,"flixel.text.FlxText","getScreenBounds",0xa33cf2f9,"flixel.text.FlxText.getScreenBounds","flixel/text/FlxText.hx",560,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_566_set_fieldWidth,"flixel.text.FlxText","set_fieldWidth",0x9c758fa7,"flixel.text.FlxText.set_fieldWidth","flixel/text/FlxText.hx",566,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_590_get_fieldWidth,"flixel.text.FlxText","get_fieldWidth",0x7c55a733,"flixel.text.FlxText.get_fieldWidth","flixel/text/FlxText.hx",590,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_595_get_fieldHeight,"flixel.text.FlxText","get_fieldHeight",0x04ec1e1a,"flixel.text.FlxText.get_fieldHeight","flixel/text/FlxText.hx",595,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_599_set_fieldHeight,"flixel.text.FlxText","set_fieldHeight",0x00b79b26,"flixel.text.FlxText.set_fieldHeight","flixel/text/FlxText.hx",599,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_617_set_autoSize,"flixel.text.FlxText","set_autoSize",0x346abbcb,"flixel.text.FlxText.set_autoSize","flixel/text/FlxText.hx",617,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_629_get_autoSize,"flixel.text.FlxText","get_autoSize",0x1f719857,"flixel.text.FlxText.get_autoSize","flixel/text/FlxText.hx",629,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_633_set_text,"flixel.text.FlxText","set_text",0xb6d09f28,"flixel.text.FlxText.set_text","flixel/text/FlxText.hx",633,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_646_get_size,"flixel.text.FlxText","get_size",0x07cd19c8,"flixel.text.FlxText.get_size","flixel/text/FlxText.hx",646,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_650_set_size,"flixel.text.FlxText","set_size",0xb62a733c,"flixel.text.FlxText.set_size","flixel/text/FlxText.hx",650,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_658_get_letterSpacing,"flixel.text.FlxText","get_letterSpacing",0xf71c6556,"flixel.text.FlxText.get_letterSpacing","flixel/text/FlxText.hx",658,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_662_set_letterSpacing,"flixel.text.FlxText","set_letterSpacing",0x1a8a3d62,"flixel.text.FlxText.set_letterSpacing","flixel/text/FlxText.hx",662,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_669_setColorTransform,"flixel.text.FlxText","setColorTransform",0x3eca018d,"flixel.text.FlxText.setColorTransform","flixel/text/FlxText.hx",669,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_676_set_color,"flixel.text.FlxText","set_color",0x7c7dca88,"flixel.text.FlxText.set_color","flixel/text/FlxText.hx",676,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_689_get_font,"flixel.text.FlxText","get_font",0xff39d6d6,"flixel.text.FlxText.get_font","flixel/text/FlxText.hx",689,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_693_set_font,"flixel.text.FlxText","set_font",0xad97304a,"flixel.text.FlxText.set_font","flixel/text/FlxText.hx",693,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_717_get_embedded,"flixel.text.FlxText","get_embedded",0xce5a2211,"flixel.text.FlxText.get_embedded","flixel/text/FlxText.hx",717,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_722_get_systemFont,"flixel.text.FlxText","get_systemFont",0xd6b43ca5,"flixel.text.FlxText.get_systemFont","flixel/text/FlxText.hx",722,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_726_set_systemFont,"flixel.text.FlxText","set_systemFont",0xf6d42519,"flixel.text.FlxText.set_systemFont","flixel/text/FlxText.hx",726,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_735_get_bold,"flixel.text.FlxText","get_bold",0xfc94fa8c,"flixel.text.FlxText.get_bold","flixel/text/FlxText.hx",735,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_739_set_bold,"flixel.text.FlxText","set_bold",0xaaf25400,"flixel.text.FlxText.set_bold","flixel/text/FlxText.hx",739,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_750_get_italic,"flixel.text.FlxText","get_italic",0xadf337b7,"flixel.text.FlxText.get_italic","flixel/text/FlxText.hx",750,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_754_set_italic,"flixel.text.FlxText","set_italic",0xb170d62b,"flixel.text.FlxText.set_italic","flixel/text/FlxText.hx",754,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_765_get_underline,"flixel.text.FlxText","get_underline",0x90e082a5,"flixel.text.FlxText.get_underline","flixel/text/FlxText.hx",765,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_769_set_underline,"flixel.text.FlxText","set_underline",0xd5e664b1,"flixel.text.FlxText.set_underline","flixel/text/FlxText.hx",769,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_780_get_wordWrap,"flixel.text.FlxText","get_wordWrap",0xf0d31d3b,"flixel.text.FlxText.get_wordWrap","flixel/text/FlxText.hx",780,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_784_set_wordWrap,"flixel.text.FlxText","set_wordWrap",0x05cc40af,"flixel.text.FlxText.set_wordWrap","flixel/text/FlxText.hx",784,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_795_get_alignment,"flixel.text.FlxText","get_alignment",0xf34d507c,"flixel.text.FlxText.get_alignment","flixel/text/FlxText.hx",795,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_799_set_alignment,"flixel.text.FlxText","set_alignment",0x38533288,"flixel.text.FlxText.set_alignment","flixel/text/FlxText.hx",799,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_806_set_borderStyle,"flixel.text.FlxText","set_borderStyle",0x0a5ab38a,"flixel.text.FlxText.set_borderStyle","flixel/text/FlxText.hx",806,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_814_set_borderColor,"flixel.text.FlxText","set_borderColor",0xd0997fbc,"flixel.text.FlxText.set_borderColor","flixel/text/FlxText.hx",814,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_822_set_borderSize,"flixel.text.FlxText","set_borderSize",0x0b7e6088,"flixel.text.FlxText.set_borderSize","flixel/text/FlxText.hx",822,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_830_set_borderQuality,"flixel.text.FlxText","set_borderQuality",0x9eac1b58,"flixel.text.FlxText.set_borderQuality","flixel/text/FlxText.hx",830,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_839_set_graphic,"flixel.text.FlxText","set_graphic",0x740d070d,"flixel.text.FlxText.set_graphic","flixel/text/FlxText.hx",839,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_847_get_width,"flixel.text.FlxText","get_width",0x1933231f,"flixel.text.FlxText.get_width","flixel/text/FlxText.hx",847,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_853_get_height,"flixel.text.FlxText","get_height",0xa9db10ae,"flixel.text.FlxText.get_height","flixel/text/FlxText.hx",853,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_860_get_shadowOffset,"flixel.text.FlxText","get_shadowOffset",0x17c0539a,"flixel.text.FlxText.get_shadowOffset","flixel/text/FlxText.hx",860,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_864_updateColorTransform,"flixel.text.FlxText","updateColorTransform",0x81f611f0,"flixel.text.FlxText.updateColorTransform","flixel/text/FlxText.hx",864,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_871_regenGraphic,"flixel.text.FlxText","regenGraphic",0xc617a9e9,"flixel.text.FlxText.regenGraphic","flixel/text/FlxText.hx",871,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_965_drawTextFieldTo,"flixel.text.FlxText","drawTextFieldTo",0xda5cac46,"flixel.text.FlxText.drawTextFieldTo","flixel/text/FlxText.hx",965,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1021_draw,"flixel.text.FlxText","draw",0x3a66d282,"flixel.text.FlxText.draw","flixel/text/FlxText.hx",1021,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1027_drawSimple,"flixel.text.FlxText","drawSimple",0xb14a1854,"flixel.text.FlxText.drawSimple","flixel/text/FlxText.hx",1027,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1038_drawComplex,"flixel.text.FlxText","drawComplex",0x3c57efce,"flixel.text.FlxText.drawComplex","flixel/text/FlxText.hx",1038,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1071_calcFrame,"flixel.text.FlxText","calcFrame",0x04b3a41a,"flixel.text.FlxText.calcFrame","flixel/text/FlxText.hx",1071,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1083_applyBorderStyle,"flixel.text.FlxText","applyBorderStyle",0x7fb82955,"flixel.text.FlxText.applyBorderStyle","flixel/text/FlxText.hx",1083,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1204_applyBorderTransparency,"flixel.text.FlxText","applyBorderTransparency",0x59c1b674,"flixel.text.FlxText.applyBorderTransparency","flixel/text/FlxText.hx",1204,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1220_copyTextWithOffset,"flixel.text.FlxText","copyTextWithOffset",0x8b535ed9,"flixel.text.FlxText.copyTextWithOffset","flixel/text/FlxText.hx",1220,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1227_applyFormats,"flixel.text.FlxText","applyFormats",0x597a620c,"flixel.text.FlxText.applyFormats","flixel/text/FlxText.hx",1227,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1253_copyTextFormat,"flixel.text.FlxText","copyTextFormat",0xce0953d7,"flixel.text.FlxText.copyTextFormat","flixel/text/FlxText.hx",1253,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1271_dtfCopy,"flixel.text.FlxText","dtfCopy",0x79c34ded,"flixel.text.FlxText.dtfCopy","flixel/text/FlxText.hx",1271,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1277_updateDefaultFormat,"flixel.text.FlxText","updateDefaultFormat",0x3cb6b251,"flixel.text.FlxText.updateDefaultFormat","flixel/text/FlxText.hx",1277,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_1284_set_frames,"flixel.text.FlxText","set_frames",0x579256e1,"flixel.text.FlxText.set_frames","flixel/text/FlxText.hx",1284,0xdf165a6e)
HX_LOCAL_STACK_FRAME(_hx_pos_7d9cf70d988be490_45_boot,"flixel.text.FlxText","boot",0x39122ab0,"flixel.text.FlxText.boot","flixel/text/FlxText.hx",45,0xdf165a6e)
namespace flixel{
namespace text{

void FlxText_obj::__construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_FieldWidth,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		Float FieldWidth = __o_FieldWidth.Default(0);
            		int Size = __o_Size.Default(8);
            		bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_40_new)
HXLINE( 194)		this->_hasBorderAlpha = false;
HXLINE( 185)		this->_regen = true;
HXLINE( 179)		this->_formatRanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 175)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(0,0);
HXDLIN( 175)		point->_inPool = false;
HXDLIN( 175)		this->_graphicOffset = point;
HXLINE( 163)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(1,1);
HXDLIN( 163)		point1->_inPool = false;
HXDLIN( 163)		this->_shadowOffset = point1;
HXLINE( 158)		this->_autoHeight = true;
HXLINE( 127)		this->borderQuality = ((Float)1);
HXLINE( 120)		this->borderSize = ((Float)1);
HXLINE( 115)		this->borderColor = 0;
HXLINE( 110)		this->borderStyle = ::flixel::text::FlxTextBorderStyle_obj::NONE_dyn();
HXLINE(  50)		this->text = HX_("",00,00,00,00);
HXLINE( 216)		super::__construct(X,Y,null());
HXLINE( 218)		bool _hx_tmp;
HXDLIN( 218)		if (::hx::IsNotNull( Text )) {
HXLINE( 218)			_hx_tmp = (Text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 218)			_hx_tmp = true;
            		}
HXDLIN( 218)		if (_hx_tmp) {
HXLINE( 222)			this->set_text(HX_("",00,00,00,00));
HXLINE( 223)			Text = HX_(" ",20,00,00,00);
            		}
            		else {
HXLINE( 227)			this->set_text(Text);
            		}
HXLINE( 230)		this->textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 231)		this->textField->set_selectable(false);
HXLINE( 232)		this->textField->set_multiline(true);
HXLINE( 233)		this->textField->set_wordWrap(true);
HXLINE( 234)		this->_defaultFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),Size,16777215,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 235)		this->set_letterSpacing(( (Float)(0) ));
HXLINE( 236)		this->set_font(::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT);
HXLINE( 237)		this->_formatAdjusted =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 238)		this->textField->set_defaultTextFormat(this->_defaultFormat);
HXLINE( 239)		this->textField->set_text(Text);
HXLINE( 240)		this->set_fieldWidth(FieldWidth);
HXLINE( 241)		this->textField->set_embedFonts(EmbeddedFont);
HXLINE( 242)		this->textField->set_sharpness(( (Float)(100) ));
HXLINE( 243)		Float _hx_tmp1;
HXDLIN( 243)		if ((Text.length <= 0)) {
HXLINE( 243)			_hx_tmp1 = ( (Float)(1) );
            		}
            		else {
HXLINE( 243)			_hx_tmp1 = ( (Float)(10) );
            		}
HXDLIN( 243)		this->textField->set_height(_hx_tmp1);
HXLINE( 245)		this->set_allowCollisions(0);
HXLINE( 246)		this->set_moves(false);
HXLINE( 248)		this->drawFrame(null());
            	}

Dynamic FlxText_obj::__CreateEmpty() { return new FlxText_obj; }

void *FlxText_obj::_hx_vtable = 0;

Dynamic FlxText_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxText_obj > _hx_result = new FlxText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x752f90b6) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x752f90b6;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxText_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_255_destroy)
HXLINE( 256)		this->textField = null();
HXLINE( 257)		this->_font = null();
HXLINE( 258)		this->_defaultFormat = null();
HXLINE( 259)		this->_formatAdjusted = null();
HXLINE( 260)		this->_shadowOffset = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_shadowOffset)) );
HXLINE( 261)		this->_graphicOffset = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_graphicOffset)) );
HXLINE( 262)		this->super::destroy();
            	}


void FlxText_obj::drawFrame(::hx::Null< bool >  __o_Force){
            		bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_266_drawFrame)
HXLINE( 267)		bool _hx_tmp;
HXDLIN( 267)		if (!(this->_regen)) {
HXLINE( 267)			_hx_tmp = Force;
            		}
            		else {
HXLINE( 267)			_hx_tmp = true;
            		}
HXDLIN( 267)		this->_regen = _hx_tmp;
HXLINE( 268)		this->super::drawFrame(this->_regen);
            	}


bool FlxText_obj::stampOnAtlas( ::flixel::graphics::atlas::FlxAtlas atlas){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_280_stampOnAtlas)
HXLINE( 281)		this->regenGraphic();
HXLINE( 283)		 ::flixel::graphics::atlas::FlxNode node = atlas->addNode(this->graphic->bitmap,this->graphic->key);
HXLINE( 284)		bool result = ::hx::IsNotNull( node );
HXLINE( 286)		if (::hx::IsNotNull( node )) {
HXLINE( 288)			this->set_frames(node->getImageFrame());
            		}
HXLINE( 291)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,stampOnAtlas,return )

 ::flixel::text::FlxText FlxText_obj::applyMarkup(::String input,::Array< ::Dynamic> rules){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_319_applyMarkup)
HXLINE( 320)		bool _hx_tmp;
HXDLIN( 320)		if (::hx::IsNotNull( rules )) {
HXLINE( 320)			_hx_tmp = (rules->length == 0);
            		}
            		else {
HXLINE( 320)			_hx_tmp = true;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 321)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 323)		this->clearFormats();
HXLINE( 325)		::Array< int > rangeStarts = ::Array_obj< int >::__new(0);
HXLINE( 326)		::Array< int > rangeEnds = ::Array_obj< int >::__new(0);
HXLINE( 327)		::Array< ::Dynamic> rulesToApply = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 329)		int i = 0;
HXLINE( 330)		{
HXLINE( 330)			int _g = 0;
HXDLIN( 330)			while((_g < rules->length)){
HXLINE( 330)				 ::flixel::text::FlxTextFormatMarkerPair rule = rules->__get(_g).StaticCast<  ::flixel::text::FlxTextFormatMarkerPair >();
HXDLIN( 330)				_g = (_g + 1);
HXLINE( 332)				bool _hx_tmp1;
HXDLIN( 332)				if (::hx::IsNotNull( rule->marker )) {
HXLINE( 332)					_hx_tmp1 = ::hx::IsNull( rule->format );
            				}
            				else {
HXLINE( 332)					_hx_tmp1 = true;
            				}
HXDLIN( 332)				if (_hx_tmp1) {
HXLINE( 333)					continue;
            				}
HXLINE( 335)				bool start = false;
HXLINE( 336)				int markerLength = ::_UnicodeString::UnicodeString_Impl__obj::get_length(rule->marker);
HXLINE( 338)				if ((input.indexOf(rule->marker,null()) == -1)) {
HXLINE( 339)					continue;
            				}
HXLINE( 342)				{
HXLINE( 342)					int _g1 = 0;
HXDLIN( 342)					int _g2 = ::_UnicodeString::UnicodeString_Impl__obj::get_length(input);
HXDLIN( 342)					while((_g1 < _g2)){
HXLINE( 342)						_g1 = (_g1 + 1);
HXDLIN( 342)						int charIndex = (_g1 - 1);
HXLINE( 344)						if ((::_UnicodeString::UnicodeString_Impl__obj::substr(input,charIndex,markerLength) != rule->marker)) {
HXLINE( 345)							continue;
            						}
HXLINE( 347)						if (start) {
HXLINE( 349)							start = false;
HXLINE( 350)							rangeEnds->push(charIndex);
            						}
            						else {
HXLINE( 354)							start = true;
HXLINE( 355)							rangeStarts->push(charIndex);
HXLINE( 356)							rulesToApply->push(rule);
            						}
            					}
            				}
HXLINE( 360)				if (start) {
HXLINE( 363)					rangeEnds->push(-1);
            				}
HXLINE( 366)				i = (i + 1);
            			}
            		}
HXLINE( 370)		{
HXLINE( 370)			int _g3 = 0;
HXDLIN( 370)			while((_g3 < rules->length)){
HXLINE( 370)				 ::flixel::text::FlxTextFormatMarkerPair rule1 = rules->__get(_g3).StaticCast<  ::flixel::text::FlxTextFormatMarkerPair >();
HXDLIN( 370)				_g3 = (_g3 + 1);
HXLINE( 371)				input = ::StringTools_obj::replace(input,rule1->marker,HX_("",00,00,00,00));
            			}
            		}
HXLINE( 374)		{
HXLINE( 374)			int _g4 = 0;
HXDLIN( 374)			int _g5 = rangeStarts->length;
HXDLIN( 374)			while((_g4 < _g5)){
HXLINE( 374)				_g4 = (_g4 + 1);
HXDLIN( 374)				int i1 = (_g4 - 1);
HXLINE( 377)				int delIndex = rangeStarts->__get(i1);
HXLINE( 378)				int markerLength1 = ::_UnicodeString::UnicodeString_Impl__obj::get_length(rulesToApply->__get(i1).StaticCast<  ::flixel::text::FlxTextFormatMarkerPair >()->marker);
HXLINE( 381)				{
HXLINE( 381)					int _g6 = 0;
HXDLIN( 381)					int _g7 = rangeStarts->length;
HXDLIN( 381)					while((_g6 < _g7)){
HXLINE( 381)						_g6 = (_g6 + 1);
HXDLIN( 381)						int j = (_g6 - 1);
HXLINE( 383)						if ((rangeStarts->__get(j) > delIndex)) {
HXLINE( 385)							::Array< int > rangeStarts1 = rangeStarts;
HXDLIN( 385)							int j1 = j;
HXDLIN( 385)							rangeStarts1[j1] = (rangeStarts1->__get(j1) - markerLength1);
            						}
HXLINE( 387)						if ((rangeEnds->__get(j) > delIndex)) {
HXLINE( 389)							::Array< int > rangeEnds1 = rangeEnds;
HXDLIN( 389)							int j2 = j;
HXDLIN( 389)							rangeEnds1[j2] = (rangeEnds1->__get(j2) - markerLength1);
            						}
            					}
            				}
HXLINE( 394)				delIndex = rangeEnds->__get(i1);
HXLINE( 397)				{
HXLINE( 397)					int _g8 = 0;
HXDLIN( 397)					int _g9 = rangeStarts->length;
HXDLIN( 397)					while((_g8 < _g9)){
HXLINE( 397)						_g8 = (_g8 + 1);
HXDLIN( 397)						int j3 = (_g8 - 1);
HXLINE( 399)						if ((rangeStarts->__get(j3) > delIndex)) {
HXLINE( 401)							::Array< int > rangeStarts2 = rangeStarts;
HXDLIN( 401)							int j4 = j3;
HXDLIN( 401)							rangeStarts2[j4] = (rangeStarts2->__get(j4) - markerLength1);
            						}
HXLINE( 403)						if ((rangeEnds->__get(j3) > delIndex)) {
HXLINE( 405)							::Array< int > rangeEnds2 = rangeEnds;
HXDLIN( 405)							int j5 = j3;
HXDLIN( 405)							rangeEnds2[j5] = (rangeEnds2->__get(j5) - markerLength1);
            						}
            					}
            				}
            			}
            		}
HXLINE( 411)		this->set_text(input);
HXLINE( 414)		{
HXLINE( 414)			int _g10 = 0;
HXDLIN( 414)			int _g11 = rangeStarts->length;
HXDLIN( 414)			while((_g10 < _g11)){
HXLINE( 414)				_g10 = (_g10 + 1);
HXDLIN( 414)				int i2 = (_g10 - 1);
HXLINE( 415)				this->addFormat(rulesToApply->__get(i2).StaticCast<  ::flixel::text::FlxTextFormatMarkerPair >()->format,rangeStarts->__get(i2),rangeEnds->__get(i2));
            			}
            		}
HXLINE( 417)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxText_obj,applyMarkup,return )

 ::flixel::text::FlxText FlxText_obj::addFormat( ::flixel::text::FlxTextFormat Format,::hx::Null< int >  __o_Start,::hx::Null< int >  __o_End){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::flixel::text::_FlxText::FlxTextFormatRange left, ::flixel::text::_FlxText::FlxTextFormatRange right){
            			HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_433_addFormat)
HXLINE( 433)			if (::hx::IsLess( left->range->start,right->range->start )) {
HXLINE( 433)				return -1;
            			}
            			else {
HXLINE( 433)				return 1;
            			}
HXDLIN( 433)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		int Start = __o_Start.Default(-1);
            		int End = __o_End.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_428_addFormat)
HXLINE( 429)		::Array< ::Dynamic> _hx_tmp = this->_formatRanges;
HXDLIN( 429)		_hx_tmp->push( ::flixel::text::_FlxText::FlxTextFormatRange_obj::__alloc( HX_CTX ,Format,Start,End));
HXLINE( 431)		this->_formatRanges->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 435)		this->_regen = true;
HXLINE( 437)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxText_obj,addFormat,return )

 ::flixel::text::FlxText FlxText_obj::removeFormat( ::flixel::text::FlxTextFormat Format, ::Dynamic Start, ::Dynamic End){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_445_removeFormat)
HXLINE( 446)		int i = this->_formatRanges->length;
HXLINE( 447)		while(true){
HXLINE( 447)			i = (i - 1);
HXDLIN( 447)			if (!(((i + 1) > 0))) {
HXLINE( 447)				goto _hx_goto_14;
            			}
HXLINE( 449)			 ::flixel::text::_FlxText::FlxTextFormatRange formatRange = this->_formatRanges->__get(i).StaticCast<  ::flixel::text::_FlxText::FlxTextFormatRange >();
HXLINE( 450)			if (::hx::IsInstanceNotEq( formatRange->format,Format )) {
HXLINE( 451)				continue;
            			}
HXLINE( 453)			bool _hx_tmp;
HXDLIN( 453)			if (::hx::IsNotNull( Start )) {
HXLINE( 453)				_hx_tmp = ::hx::IsNotNull( End );
            			}
            			else {
HXLINE( 453)				_hx_tmp = false;
            			}
HXDLIN( 453)			if (_hx_tmp) {
HXLINE( 455)				 ::flixel::util::helpers::FlxRange range = formatRange->range;
HXLINE( 456)				bool _hx_tmp1;
HXDLIN( 456)				if (::hx::IsLess( Start,range->end )) {
HXLINE( 456)					_hx_tmp1 = ::hx::IsLessEq( End,range->start );
            				}
            				else {
HXLINE( 456)					_hx_tmp1 = true;
            				}
HXDLIN( 456)				if (_hx_tmp1) {
HXLINE( 457)					continue;
            				}
HXLINE( 459)				bool _hx_tmp2;
HXDLIN( 459)				if (::hx::IsGreater( Start,range->start )) {
HXLINE( 459)					_hx_tmp2 = ::hx::IsLess( End,range->end );
            				}
            				else {
HXLINE( 459)					_hx_tmp2 = false;
            				}
HXDLIN( 459)				if (_hx_tmp2) {
HXLINE( 461)					this->addFormat(formatRange->format,(End + 1),range->end);
HXLINE( 462)					range->end = Start;
HXLINE( 463)					continue;
            				}
HXLINE( 466)				bool _hx_tmp3;
HXDLIN( 466)				if (::hx::IsLessEq( Start,range->start )) {
HXLINE( 466)					_hx_tmp3 = ::hx::IsLess( End,range->end );
            				}
            				else {
HXLINE( 466)					_hx_tmp3 = false;
            				}
HXDLIN( 466)				if (_hx_tmp3) {
HXLINE( 468)					range->start = End;
HXLINE( 469)					continue;
            				}
HXLINE( 472)				bool _hx_tmp4;
HXDLIN( 472)				if (::hx::IsGreater( Start,range->start )) {
HXLINE( 472)					_hx_tmp4 = ::hx::IsGreaterEq( End,range->end );
            				}
            				else {
HXLINE( 472)					_hx_tmp4 = false;
            				}
HXDLIN( 472)				if (_hx_tmp4) {
HXLINE( 474)					range->end = Start;
HXLINE( 475)					continue;
            				}
            			}
HXLINE( 479)			this->_formatRanges->remove(formatRange);
            		}
            		_hx_goto_14:;
HXLINE( 482)		this->_regen = true;
HXLINE( 484)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxText_obj,removeFormat,return )

 ::flixel::text::FlxText FlxText_obj::clearFormats(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_491_clearFormats)
HXLINE( 492)		this->_formatRanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 493)		{
HXLINE( 493)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 493)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 493)			this->_regen = true;
            		}
HXLINE( 495)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,clearFormats,return )

 ::flixel::text::FlxText FlxText_obj::setFormat(::String Font,::hx::Null< int >  __o_Size,::hx::Null< int >  __o_Color,::String Alignment, ::flixel::text::FlxTextBorderStyle BorderStyle,::hx::Null< int >  __o_BorderColor,::hx::Null< bool >  __o_EmbeddedFont){
            		int Size = __o_Size.Default(8);
            		int Color = __o_Color.Default(-1);
            		int BorderColor = __o_BorderColor.Default(0);
            		bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_512_setFormat)
HXLINE( 513)		if (::hx::IsNull( BorderStyle )) {
HXLINE( 513)			BorderStyle = ::flixel::text::FlxTextBorderStyle_obj::NONE_dyn();
            		}
HXLINE( 515)		if (EmbeddedFont) {
HXLINE( 517)			this->set_font(Font);
            		}
            		else {
HXLINE( 519)			if (::hx::IsNotNull( Font )) {
HXLINE( 521)				this->set_systemFont(Font);
            			}
            		}
HXLINE( 524)		this->set_size(Size);
HXLINE( 525)		this->set_color(Color);
HXLINE( 526)		if (::hx::IsNotNull( Alignment )) {
HXLINE( 527)			this->set_alignment(Alignment);
            		}
HXLINE( 528)		{
HXLINE( 528)			this->set_borderStyle(BorderStyle);
HXDLIN( 528)			this->set_borderColor(BorderColor);
HXDLIN( 528)			this->set_borderSize(( (Float)(1) ));
HXDLIN( 528)			this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 530)		{
HXLINE( 530)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 530)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 530)			this->_regen = true;
            		}
HXLINE( 532)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxText_obj,setFormat,return )

 ::flixel::text::FlxText FlxText_obj::setBorderStyle( ::flixel::text::FlxTextBorderStyle Style,::hx::Null< int >  __o_Color,::hx::Null< Float >  __o_Size,::hx::Null< Float >  __o_Quality){
            		int Color = __o_Color.Default(0);
            		Float Size = __o_Size.Default(1);
            		Float Quality = __o_Quality.Default(1);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_544_setBorderStyle)
HXLINE( 545)		this->set_borderStyle(Style);
HXLINE( 546)		this->set_borderColor(Color);
HXLINE( 547)		this->set_borderSize(Size);
HXLINE( 548)		this->set_borderQuality(Quality);
HXLINE( 550)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxText_obj,setBorderStyle,return )

void FlxText_obj::updateHitbox(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_554_updateHitbox)
HXLINE( 555)		this->regenGraphic();
HXLINE( 556)		this->super::updateHitbox();
            	}


 ::flixel::math::FlxRect FlxText_obj::getScreenBounds( ::flixel::math::FlxRect newRect, ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_560_getScreenBounds)
HXLINE( 561)		this->regenGraphic();
HXLINE( 562)		return this->super::getScreenBounds(newRect,camera);
            	}


Float FlxText_obj::set_fieldWidth(Float value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_566_set_fieldWidth)
HXLINE( 567)		if (::hx::IsNull( this->textField )) {
HXLINE( 568)			return value;
            		}
HXLINE( 570)		if ((value <= 0)) {
HXLINE( 572)			this->set_wordWrap(false);
HXLINE( 573)			this->set_autoSize(true);
HXLINE( 575)			this->_autoHeight = true;
            		}
            		else {
HXLINE( 579)			this->set_autoSize(false);
HXLINE( 580)			this->set_wordWrap(true);
HXLINE( 581)			this->textField->set_width(value);
            		}
HXLINE( 584)		this->_regen = true;
HXLINE( 585)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_fieldWidth,return )

Float FlxText_obj::get_fieldWidth(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_590_get_fieldWidth)
HXDLIN( 590)		if (::hx::IsNotNull( this->textField )) {
HXDLIN( 590)			return this->textField->get_width();
            		}
            		else {
HXDLIN( 590)			return ( (Float)(0) );
            		}
HXDLIN( 590)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_fieldWidth,return )

Float FlxText_obj::get_fieldHeight(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_595_get_fieldHeight)
HXDLIN( 595)		if (::hx::IsNotNull( this->textField )) {
HXDLIN( 595)			return this->textField->get_height();
            		}
            		else {
HXDLIN( 595)			return ( (Float)(0) );
            		}
HXDLIN( 595)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_fieldHeight,return )

Float FlxText_obj::set_fieldHeight(Float value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_599_set_fieldHeight)
HXLINE( 600)		if (::hx::IsNull( this->textField )) {
HXLINE( 601)			return value;
            		}
HXLINE( 603)		if ((value <= 0)) {
HXLINE( 605)			this->_autoHeight = true;
            		}
            		else {
HXLINE( 609)			this->_autoHeight = false;
HXLINE( 610)			this->textField->set_height(value);
            		}
HXLINE( 612)		this->_regen = true;
HXLINE( 613)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_fieldHeight,return )

bool FlxText_obj::set_autoSize(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_617_set_autoSize)
HXLINE( 618)		if (::hx::IsNotNull( this->textField )) {
HXLINE( 620)			 ::Dynamic _hx_tmp;
HXDLIN( 620)			if (value) {
HXLINE( 620)				_hx_tmp = 1;
            			}
            			else {
HXLINE( 620)				_hx_tmp = 2;
            			}
HXDLIN( 620)			this->textField->set_autoSize(_hx_tmp);
HXLINE( 621)			this->_regen = true;
            		}
HXLINE( 624)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_autoSize,return )

bool FlxText_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_629_get_autoSize)
HXDLIN( 629)		if (::hx::IsNotNull( this->textField )) {
HXDLIN( 629)			return ::hx::IsNotEq( this->textField->get_autoSize(),2 );
            		}
            		else {
HXDLIN( 629)			return false;
            		}
HXDLIN( 629)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_autoSize,return )

::String FlxText_obj::set_text(::String Text){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_633_set_text)
HXLINE( 634)		this->text = Text;
HXLINE( 635)		if (::hx::IsNotNull( this->textField )) {
HXLINE( 637)			::String ot = this->textField->get_text();
HXLINE( 638)			this->textField->set_text(Text);
HXLINE( 639)			bool _hx_tmp;
HXDLIN( 639)			if ((this->textField->get_text() == ot)) {
HXLINE( 639)				_hx_tmp = this->_regen;
            			}
            			else {
HXLINE( 639)				_hx_tmp = true;
            			}
HXDLIN( 639)			this->_regen = _hx_tmp;
            		}
HXLINE( 641)		return Text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_text,return )

int FlxText_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_646_get_size)
HXDLIN( 646)		return ::Std_obj::_hx_int(( (Float)(this->_defaultFormat->size) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_size,return )

int FlxText_obj::set_size(int Size){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_650_set_size)
HXLINE( 651)		this->_defaultFormat->size = Size;
HXLINE( 652)		{
HXLINE( 652)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 652)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 652)			this->_regen = true;
            		}
HXLINE( 653)		return Size;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_size,return )

Float FlxText_obj::get_letterSpacing(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_658_get_letterSpacing)
HXDLIN( 658)		return ( (Float)(this->_defaultFormat->letterSpacing) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_letterSpacing,return )

Float FlxText_obj::set_letterSpacing(Float LetterSpacing){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_662_set_letterSpacing)
HXLINE( 663)		this->_defaultFormat->letterSpacing = LetterSpacing;
HXLINE( 664)		{
HXLINE( 664)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 664)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 664)			this->_regen = true;
            		}
HXLINE( 665)		return LetterSpacing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_letterSpacing,return )

void FlxText_obj::setColorTransform(::hx::Null< Float >  __o_redMultiplier,::hx::Null< Float >  __o_greenMultiplier,::hx::Null< Float >  __o_blueMultiplier,::hx::Null< Float >  __o_alphaMultiplier,::hx::Null< Float >  __o_redOffset,::hx::Null< Float >  __o_greenOffset,::hx::Null< Float >  __o_blueOffset,::hx::Null< Float >  __o_alphaOffset){
            		Float redMultiplier = __o_redMultiplier.Default(((Float)1.0));
            		Float greenMultiplier = __o_greenMultiplier.Default(((Float)1.0));
            		Float blueMultiplier = __o_blueMultiplier.Default(((Float)1.0));
            		Float alphaMultiplier = __o_alphaMultiplier.Default(((Float)1.0));
            		Float redOffset = __o_redOffset.Default(((Float)0.0));
            		Float greenOffset = __o_greenOffset.Default(((Float)0.0));
            		Float blueOffset = __o_blueOffset.Default(((Float)0.0));
            		Float alphaOffset = __o_alphaOffset.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_669_setColorTransform)
HXLINE( 670)		this->super::setColorTransform(1,1,1,1,redOffset,greenOffset,blueOffset,alphaOffset);
HXLINE( 671)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 671)		{
HXLINE( 671)			int Value = ::Math_obj::round((redMultiplier * ( (Float)(255) )));
HXDLIN( 671)			color = (color & -16711681);
HXDLIN( 671)			int color1;
HXDLIN( 671)			if ((Value > 255)) {
HXLINE( 671)				color1 = 255;
            			}
            			else {
HXLINE( 671)				if ((Value < 0)) {
HXLINE( 671)					color1 = 0;
            				}
            				else {
HXLINE( 671)					color1 = Value;
            				}
            			}
HXDLIN( 671)			color = (color | (color1 << 16));
            		}
HXDLIN( 671)		{
HXLINE( 671)			int Value1 = ::Math_obj::round((greenMultiplier * ( (Float)(255) )));
HXDLIN( 671)			color = (color & -65281);
HXDLIN( 671)			int color2;
HXDLIN( 671)			if ((Value1 > 255)) {
HXLINE( 671)				color2 = 255;
            			}
            			else {
HXLINE( 671)				if ((Value1 < 0)) {
HXLINE( 671)					color2 = 0;
            				}
            				else {
HXLINE( 671)					color2 = Value1;
            				}
            			}
HXDLIN( 671)			color = (color | (color2 << 8));
            		}
HXDLIN( 671)		{
HXLINE( 671)			int Value2 = ::Math_obj::round((blueMultiplier * ( (Float)(255) )));
HXDLIN( 671)			color = (color & -256);
HXDLIN( 671)			int color3;
HXDLIN( 671)			if ((Value2 > 255)) {
HXLINE( 671)				color3 = 255;
            			}
            			else {
HXLINE( 671)				if ((Value2 < 0)) {
HXLINE( 671)					color3 = 0;
            				}
            				else {
HXLINE( 671)					color3 = Value2;
            				}
            			}
HXDLIN( 671)			color = (color | color3);
            		}
HXDLIN( 671)		{
HXLINE( 671)			int Value3 = ::Math_obj::round(( (Float)(0) ));
HXDLIN( 671)			color = (color & 16777215);
HXDLIN( 671)			int color4;
HXDLIN( 671)			if ((Value3 > 255)) {
HXLINE( 671)				color4 = 255;
            			}
            			else {
HXLINE( 671)				if ((Value3 < 0)) {
HXLINE( 671)					color4 = 0;
            				}
            				else {
HXLINE( 671)					color4 = Value3;
            				}
            			}
HXDLIN( 671)			color = (color | (color4 << 24));
            		}
HXDLIN( 671)		this->_defaultFormat->color = color;
HXLINE( 672)		{
HXLINE( 672)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 672)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 672)			this->_regen = true;
            		}
            	}


int FlxText_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_676_set_color)
HXLINE( 677)		if (::hx::IsEq( this->_defaultFormat->color,(value & 16777215) )) {
HXLINE( 679)			return value;
            		}
HXLINE( 681)		this->_defaultFormat->color = (value & 16777215);
HXLINE( 682)		this->color = value;
HXLINE( 683)		{
HXLINE( 683)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 683)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 683)			this->_regen = true;
            		}
HXLINE( 684)		return value;
            	}


::String FlxText_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_689_get_font)
HXDLIN( 689)		return this->_font;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_font,return )

::String FlxText_obj::set_font(::String Font){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_693_set_font)
HXLINE( 694)		this->textField->set_embedFonts(true);
HXLINE( 696)		if (::hx::IsNotNull( Font )) {
HXLINE( 698)			::String newFontName = Font;
HXLINE( 699)			if (( (bool)(::flixel::FlxG_obj::assets->exists(Font,HX_("font",cf,5d,c0,43))) )) {
HXLINE( 701)				newFontName = ( ( ::openfl::text::Font)(::flixel::FlxG_obj::assets->getAssetUnsafe(Font,HX_("font",cf,5d,c0,43),true)) )->name;
            			}
HXLINE( 704)			this->_defaultFormat->font = newFontName;
            		}
            		else {
HXLINE( 708)			this->_defaultFormat->font = ::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT;
            		}
HXLINE( 711)		{
HXLINE( 711)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 711)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 711)			this->_regen = true;
            		}
HXLINE( 712)		return (this->_font = this->_defaultFormat->font);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_font,return )

bool FlxText_obj::get_embedded(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_717_get_embedded)
HXDLIN( 717)		return this->textField->get_embedFonts();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_embedded,return )

::String FlxText_obj::get_systemFont(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_722_get_systemFont)
HXDLIN( 722)		return this->_defaultFormat->font;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_systemFont,return )

::String FlxText_obj::set_systemFont(::String Font){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_726_set_systemFont)
HXLINE( 727)		this->textField->set_embedFonts(false);
HXLINE( 728)		this->_defaultFormat->font = Font;
HXLINE( 729)		{
HXLINE( 729)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 729)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 729)			this->_regen = true;
            		}
HXLINE( 730)		return Font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_systemFont,return )

bool FlxText_obj::get_bold(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_735_get_bold)
HXDLIN( 735)		return ( (bool)(this->_defaultFormat->bold) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_bold,return )

bool FlxText_obj::set_bold(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_739_set_bold)
HXLINE( 740)		if (::hx::IsNotEq( this->_defaultFormat->bold,value )) {
HXLINE( 742)			this->_defaultFormat->bold = value;
HXLINE( 743)			{
HXLINE( 743)				this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 743)				this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 743)				this->_regen = true;
            			}
            		}
HXLINE( 745)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_bold,return )

bool FlxText_obj::get_italic(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_750_get_italic)
HXDLIN( 750)		return ( (bool)(this->_defaultFormat->italic) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_italic,return )

bool FlxText_obj::set_italic(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_754_set_italic)
HXLINE( 755)		if (::hx::IsNotEq( this->_defaultFormat->italic,value )) {
HXLINE( 757)			this->_defaultFormat->italic = value;
HXLINE( 758)			{
HXLINE( 758)				this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 758)				this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 758)				this->_regen = true;
            			}
            		}
HXLINE( 760)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_italic,return )

bool FlxText_obj::get_underline(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_765_get_underline)
HXDLIN( 765)		return ( (bool)(this->_defaultFormat->underline) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_underline,return )

bool FlxText_obj::set_underline(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_769_set_underline)
HXLINE( 770)		if (::hx::IsNotEq( this->_defaultFormat->underline,value )) {
HXLINE( 772)			this->_defaultFormat->underline = value;
HXLINE( 773)			{
HXLINE( 773)				this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 773)				this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 773)				this->_regen = true;
            			}
            		}
HXLINE( 775)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_underline,return )

bool FlxText_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_780_get_wordWrap)
HXDLIN( 780)		return this->textField->get_wordWrap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_wordWrap,return )

bool FlxText_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_784_set_wordWrap)
HXLINE( 785)		if ((this->textField->get_wordWrap() != value)) {
HXLINE( 787)			this->textField->set_wordWrap(value);
HXLINE( 788)			this->_regen = true;
            		}
HXLINE( 790)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_wordWrap,return )

::String FlxText_obj::get_alignment(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_795_get_alignment)
HXDLIN( 795)		return ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(this->_defaultFormat->align);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_alignment,return )

::String FlxText_obj::set_alignment(::String Alignment){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_799_set_alignment)
HXLINE( 800)		this->_defaultFormat->align = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::toOpenFL(Alignment);
HXLINE( 801)		{
HXLINE( 801)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN( 801)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN( 801)			this->_regen = true;
            		}
HXLINE( 802)		return Alignment;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_alignment,return )

 ::flixel::text::FlxTextBorderStyle FlxText_obj::set_borderStyle( ::flixel::text::FlxTextBorderStyle style){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_806_set_borderStyle)
HXLINE( 807)		if (::hx::IsPointerNotEq( style,this->borderStyle )) {
HXLINE( 808)			this->_regen = true;
            		}
HXLINE( 810)		return (this->borderStyle = style);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_borderStyle,return )

int FlxText_obj::set_borderColor(int Color){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_814_set_borderColor)
HXLINE( 815)		bool _hx_tmp;
HXDLIN( 815)		if ((this->borderColor != Color)) {
HXLINE( 815)			_hx_tmp = ::hx::IsPointerNotEq( this->borderStyle,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn() );
            		}
            		else {
HXLINE( 815)			_hx_tmp = false;
            		}
HXDLIN( 815)		if (_hx_tmp) {
HXLINE( 816)			this->_regen = true;
            		}
HXLINE( 817)		this->_hasBorderAlpha = ((( (Float)(((Color >> 24) & 255)) ) / ( (Float)(255) )) < 1);
HXLINE( 818)		return (this->borderColor = Color);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_borderColor,return )

Float FlxText_obj::set_borderSize(Float Value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_822_set_borderSize)
HXLINE( 823)		bool _hx_tmp;
HXDLIN( 823)		if ((Value != this->borderSize)) {
HXLINE( 823)			_hx_tmp = ::hx::IsPointerNotEq( this->borderStyle,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn() );
            		}
            		else {
HXLINE( 823)			_hx_tmp = false;
            		}
HXDLIN( 823)		if (_hx_tmp) {
HXLINE( 824)			this->_regen = true;
            		}
HXLINE( 826)		return (this->borderSize = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_borderSize,return )

Float FlxText_obj::set_borderQuality(Float Value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_830_set_borderQuality)
HXLINE( 831)		Float lowerBound;
HXDLIN( 831)		if ((Value < 0)) {
HXLINE( 831)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 831)			lowerBound = Value;
            		}
HXDLIN( 831)		if ((lowerBound > 1)) {
HXLINE( 831)			Value = ( (Float)(1) );
            		}
            		else {
HXLINE( 831)			Value = lowerBound;
            		}
HXLINE( 832)		bool _hx_tmp;
HXDLIN( 832)		if ((Value != this->borderQuality)) {
HXLINE( 832)			_hx_tmp = ::hx::IsPointerNotEq( this->borderStyle,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn() );
            		}
            		else {
HXLINE( 832)			_hx_tmp = false;
            		}
HXDLIN( 832)		if (_hx_tmp) {
HXLINE( 833)			this->_regen = true;
            		}
HXLINE( 835)		return (this->borderQuality = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,set_borderQuality,return )

 ::flixel::graphics::FlxGraphic FlxText_obj::set_graphic( ::flixel::graphics::FlxGraphic Value){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_839_set_graphic)
HXLINE( 840)		 ::flixel::graphics::FlxGraphic oldGraphic = this->graphic;
HXLINE( 841)		 ::flixel::graphics::FlxGraphic graph = this->super::set_graphic(Value);
HXLINE( 842)		::flixel::FlxG_obj::bitmap->removeIfNoUse(oldGraphic);
HXLINE( 843)		return graph;
            	}


Float FlxText_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_847_get_width)
HXLINE( 848)		this->regenGraphic();
HXLINE( 849)		return this->super::get_width();
            	}


Float FlxText_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_853_get_height)
HXLINE( 854)		this->regenGraphic();
HXLINE( 855)		return this->super::get_height();
            	}


 ::flixel::math::FlxBasePoint FlxText_obj::get_shadowOffset(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_860_get_shadowOffset)
HXDLIN( 860)		return this->_shadowOffset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,get_shadowOffset,return )

void FlxText_obj::updateColorTransform(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_864_updateColorTransform)
HXLINE( 865)		this->colorTransform->alphaMultiplier = this->alpha;
HXLINE( 867)		this->dirty = true;
            	}


void FlxText_obj::regenGraphic(){
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_871_regenGraphic)
HXLINE( 872)		bool _hx_tmp;
HXDLIN( 872)		if (::hx::IsNotNull( this->textField )) {
HXLINE( 872)			_hx_tmp = !(this->_regen);
            		}
            		else {
HXLINE( 872)			_hx_tmp = true;
            		}
HXDLIN( 872)		if (_hx_tmp) {
HXLINE( 873)			return;
            		}
HXLINE( 875)		int oldWidth;
HXDLIN( 875)		if (::hx::IsNotNull( this->graphic )) {
HXLINE( 875)			oldWidth = this->graphic->width;
            		}
            		else {
HXLINE( 875)			oldWidth = 0;
            		}
HXLINE( 876)		int oldHeight;
HXDLIN( 876)		if (::hx::IsNotNull( this->graphic )) {
HXLINE( 876)			oldHeight = this->graphic->height;
            		}
            		else {
HXLINE( 876)			oldHeight = 4;
            		}
HXLINE( 878)		Float newWidthFloat = this->textField->get_width();
HXLINE( 879)		Float newHeightFloat;
HXDLIN( 879)		if (this->_autoHeight) {
HXLINE( 879)			newHeightFloat = (this->textField->get_textHeight() + 4);
            		}
            		else {
HXLINE( 879)			newHeightFloat = this->textField->get_height();
            		}
HXLINE( 881)		Float borderWidth = ( (Float)(0) );
HXLINE( 882)		Float borderHeight = ( (Float)(0) );
HXLINE( 883)		{
HXLINE( 883)			 ::flixel::text::FlxTextBorderStyle _g = this->borderStyle;
HXDLIN( 883)			switch((int)(_g->_hx_getIndex())){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
HXLINE( 885)					bool _hx_tmp1;
HXDLIN( 885)					if ((this->_shadowOffset->x == 1)) {
HXLINE( 885)						_hx_tmp1 = (this->_shadowOffset->y != 1);
            					}
            					else {
HXLINE( 885)						_hx_tmp1 = true;
            					}
HXDLIN( 885)					if (_hx_tmp1) {
HXLINE( 886)						borderWidth = (borderWidth + ::Math_obj::abs(this->_shadowOffset->x));
HXLINE( 887)						borderHeight = (borderHeight + ::Math_obj::abs(this->_shadowOffset->y));
            					}
            					else {
HXLINE( 890)						borderWidth = (borderWidth + ::Math_obj::abs(this->borderSize));
HXLINE( 891)						borderHeight = (borderHeight + ::Math_obj::abs(this->borderSize));
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 893)					Float offsetX = _g->_hx_getFloat(0);
HXDLIN( 893)					Float offsetY = _g->_hx_getFloat(1);
HXDLIN( 893)					{
HXLINE( 894)						borderWidth = (borderWidth + ::Math_obj::abs(offsetX));
HXLINE( 895)						borderHeight = (borderHeight + ::Math_obj::abs(offsetY));
            					}
            				}
            				break;
            				case (int)3: case (int)4: {
HXLINE( 898)					borderWidth = (borderWidth + (::Math_obj::abs(this->borderSize) * ( (Float)(2) )));
HXLINE( 899)					borderHeight = (borderHeight + (::Math_obj::abs(this->borderSize) * ( (Float)(2) )));
            				}
            				break;
            			}
            		}
HXLINE( 904)		int newWidth = ::Math_obj::ceil((newWidthFloat + borderWidth));
HXLINE( 905)		int newHeight = ::Math_obj::ceil((newHeightFloat + borderHeight));
HXLINE( 908)		bool _hx_tmp2;
HXDLIN( 908)		if ((this->textField->get_textHeight() != 0)) {
HXLINE( 908)			if ((oldWidth == newWidth)) {
HXLINE( 908)				_hx_tmp2 = (oldHeight != newHeight);
            			}
            			else {
HXLINE( 908)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE( 908)			_hx_tmp2 = false;
            		}
HXDLIN( 908)		if (_hx_tmp2) {
HXLINE( 911)			::String key = ::flixel::FlxG_obj::bitmap->getUniqueKey(HX_("text",ad,cc,f9,4c));
HXLINE( 912)			this->makeGraphic(newWidth,newHeight,0,false,key);
HXLINE( 913)			this->set_width(( (Float)(::Math_obj::ceil(newWidthFloat)) ));
HXLINE( 914)			this->set_height(( (Float)(::Math_obj::ceil(newHeightFloat)) ));
HXLINE( 917)			this->graphic->trackingInfo = ((((HX_("text(",db,4a,99,0d) + this->ID) + HX_(", ",74,26,00,00)) + this->text) + HX_(")",29,00,00,00));
HXLINE( 920)			if (this->_hasBorderAlpha) {
HXLINE( 921)				this->_borderPixels = this->graphic->bitmap->clone();
            			}
HXLINE( 923)			if (this->_autoHeight) {
HXLINE( 924)				this->textField->set_height(( (Float)(newHeight) ));
            			}
HXLINE( 926)			this->_flashRect->x = ( (Float)(0) );
HXLINE( 927)			this->_flashRect->y = ( (Float)(0) );
HXLINE( 928)			this->_flashRect->width = ( (Float)(newWidth) );
HXLINE( 929)			this->_flashRect->height = ( (Float)(newHeight) );
            		}
            		else {
HXLINE( 933)			this->graphic->bitmap->fillRect(this->_flashRect,0);
HXLINE( 934)			if (this->_hasBorderAlpha) {
HXLINE( 936)				if (::hx::IsNull( this->_borderPixels )) {
HXLINE( 937)					this->_borderPixels =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->frameWidth,this->frameHeight,true,null());
            				}
            				else {
HXLINE( 939)					this->_borderPixels->fillRect(this->_flashRect,0);
            				}
            			}
            		}
HXLINE( 943)		bool _hx_tmp3;
HXDLIN( 943)		if (::hx::IsNotNull( this->textField )) {
HXLINE( 943)			_hx_tmp3 = ::hx::IsNotNull( this->textField->get_text() );
            		}
            		else {
HXLINE( 943)			_hx_tmp3 = false;
            		}
HXDLIN( 943)		if (_hx_tmp3) {
HXLINE( 946)			this->copyTextFormat(this->_defaultFormat,this->_formatAdjusted,null());
HXLINE( 948)			this->_matrix->identity();
HXLINE( 950)			this->applyBorderStyle();
HXLINE( 951)			if (this->_hasBorderAlpha) {
HXLINE( 951)				if (::hx::IsNull( this->_borderColorTransform )) {
HXLINE( 951)					this->_borderColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXDLIN( 951)				this->_borderColorTransform->alphaMultiplier = (( (Float)(((this->borderColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 951)				this->_borderPixels->colorTransform(this->_borderPixels->rect,this->_borderColorTransform);
HXDLIN( 951)				this->graphic->bitmap->draw(this->_borderPixels,null(),null(),null(),null(),null());
            			}
HXLINE( 952)			this->applyFormats(this->_formatAdjusted,false);
HXLINE( 954)			this->drawTextFieldTo(this->graphic->bitmap);
            		}
HXLINE( 957)		this->_regen = false;
HXLINE( 958)		this->set_frame(this->frame);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,regenGraphic,(void))

void FlxText_obj::drawTextFieldTo( ::openfl::display::BitmapData graphic){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_965_drawTextFieldTo)
HXLINE( 993)		this->_matrix->translate(( (Float)(-1) ),( (Float)(-1) ));
HXLINE( 994)		graphic->draw(this->textField,this->_matrix,null(),null(),null(),null());
HXLINE( 995)		this->_matrix->translate(( (Float)(1) ),( (Float)(1) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxText_obj,drawTextFieldTo,(void))

void FlxText_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1021_draw)
HXLINE(1022)		this->regenGraphic();
HXLINE(1023)		this->super::draw();
            	}


void FlxText_obj::drawSimple( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1027_drawSimple)
HXLINE(1029)		{
HXLINE(1029)			 ::flixel::math::FlxBasePoint this1 = this->getScreenPosition(this->_point,camera);
HXDLIN(1029)			 ::flixel::math::FlxBasePoint point = this->offset;
HXDLIN(1029)			{
HXLINE(1029)				Float y = point->y;
HXDLIN(1029)				this1->set_x((this1->x - point->x));
HXDLIN(1029)				this1->set_y((this1->y - y));
            			}
HXDLIN(1029)			{
HXLINE(1029)				 ::flixel::math::FlxBasePoint _this = point;
HXDLIN(1029)				if (_this->_weak) {
HXLINE(1029)					_this->put();
            				}
            			}
HXDLIN(1029)			 ::flixel::math::FlxBasePoint this2 = this1;
HXDLIN(1029)			 ::flixel::math::FlxBasePoint point1 = this->_graphicOffset;
HXDLIN(1029)			{
HXLINE(1029)				Float y1 = point1->y;
HXDLIN(1029)				this2->set_x((this2->x - point1->x));
HXDLIN(1029)				this2->set_y((this2->y - y1));
            			}
HXDLIN(1029)			{
HXLINE(1029)				 ::flixel::math::FlxBasePoint _this1 = point1;
HXDLIN(1029)				if (_this1->_weak) {
HXLINE(1029)					_this1->put();
            				}
            			}
            		}
HXLINE(1030)		if (this->isPixelPerfectRender(camera)) {
HXLINE(1031)			 ::flixel::math::FlxBasePoint this3 = this->_point;
HXDLIN(1031)			this3->set_x(( (Float)(::Math_obj::floor(this3->x)) ));
HXDLIN(1031)			this3->set_y(( (Float)(::Math_obj::floor(this3->y)) ));
            		}
HXLINE(1033)		{
HXLINE(1033)			 ::flixel::math::FlxBasePoint this4 = this->_point;
HXDLIN(1033)			 ::openfl::geom::Point p = this->_flashPoint;
HXDLIN(1033)			p->x = this4->x;
HXDLIN(1033)			p->y = this4->y;
            		}
HXLINE(1034)		camera->copyPixels(this->_frame,this->framePixels,this->_flashRect,this->_flashPoint,this->colorTransform,this->blend,this->antialiasing,null());
            	}


void FlxText_obj::drawComplex( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1038_drawComplex)
HXLINE(1039)		bool doFlipX = (this->flipX != this->_frame->flipX);
HXDLIN(1039)		bool _hx_tmp;
HXDLIN(1039)		if (::hx::IsNotNull( this->animation->_curAnim )) {
HXLINE(1039)			_hx_tmp = (doFlipX != this->animation->_curAnim->flipX);
            		}
            		else {
HXLINE(1039)			_hx_tmp = doFlipX;
            		}
HXDLIN(1039)		bool doFlipY = (this->flipY != this->_frame->flipY);
HXDLIN(1039)		bool _hx_tmp1;
HXDLIN(1039)		if (::hx::IsNotNull( this->animation->_curAnim )) {
HXLINE(1039)			_hx_tmp1 = (doFlipY != this->animation->_curAnim->flipY);
            		}
            		else {
HXLINE(1039)			_hx_tmp1 = doFlipY;
            		}
HXDLIN(1039)		this->_frame->prepareMatrix(this->_matrix,0,_hx_tmp,_hx_tmp1);
HXLINE(1040)		this->_matrix->translate(-(this->origin->x),-(this->origin->y));
HXLINE(1041)		this->_matrix->scale(this->scale->x,this->scale->y);
HXLINE(1043)		if ((this->bakedRotationAngle <= 0)) {
HXLINE(1045)			if (this->_angleChanged) {
HXLINE(1045)				Float radians = (this->angle * (::Math_obj::PI / ( (Float)(180) )));
HXDLIN(1045)				this->_sinAngle = ::Math_obj::sin(radians);
HXDLIN(1045)				this->_cosAngle = ::Math_obj::cos(radians);
HXDLIN(1045)				this->_angleChanged = false;
            			}
HXLINE(1047)			if ((this->angle != 0)) {
HXLINE(1048)				 ::flixel::math::FlxMatrix _this = this->_matrix;
HXDLIN(1048)				Float cos = this->_cosAngle;
HXDLIN(1048)				Float sin = this->_sinAngle;
HXDLIN(1048)				Float a1 = ((_this->a * cos) - (_this->b * sin));
HXDLIN(1048)				_this->b = ((_this->a * sin) + (_this->b * cos));
HXDLIN(1048)				_this->a = a1;
HXDLIN(1048)				Float c1 = ((_this->c * cos) - (_this->d * sin));
HXDLIN(1048)				_this->d = ((_this->c * sin) + (_this->d * cos));
HXDLIN(1048)				_this->c = c1;
HXDLIN(1048)				Float tx1 = ((_this->tx * cos) - (_this->ty * sin));
HXDLIN(1048)				_this->ty = ((_this->tx * sin) + (_this->ty * cos));
HXDLIN(1048)				_this->tx = tx1;
            			}
            		}
HXLINE(1052)		{
HXLINE(1052)			 ::flixel::math::FlxBasePoint this1 = this->getScreenPosition(this->_point,camera);
HXDLIN(1052)			 ::flixel::math::FlxBasePoint point = this->offset;
HXDLIN(1052)			{
HXLINE(1052)				Float y = point->y;
HXDLIN(1052)				this1->set_x((this1->x - point->x));
HXDLIN(1052)				this1->set_y((this1->y - y));
            			}
HXDLIN(1052)			{
HXLINE(1052)				 ::flixel::math::FlxBasePoint _this1 = point;
HXDLIN(1052)				if (_this1->_weak) {
HXLINE(1052)					_this1->put();
            				}
            			}
HXDLIN(1052)			 ::flixel::math::FlxBasePoint this2 = this1;
HXDLIN(1052)			 ::flixel::math::FlxBasePoint point1 = this->_graphicOffset;
HXDLIN(1052)			{
HXLINE(1052)				Float y1 = point1->y;
HXDLIN(1052)				this2->set_x((this2->x - point1->x));
HXDLIN(1052)				this2->set_y((this2->y - y1));
            			}
HXDLIN(1052)			{
HXLINE(1052)				 ::flixel::math::FlxBasePoint _this2 = point1;
HXDLIN(1052)				if (_this2->_weak) {
HXLINE(1052)					_this2->put();
            				}
            			}
            		}
HXLINE(1053)		{
HXLINE(1053)			 ::flixel::math::FlxBasePoint this3 = this->_point;
HXDLIN(1053)			Float y2 = this->origin->y;
HXDLIN(1053)			this3->set_x((this3->x + this->origin->x));
HXDLIN(1053)			this3->set_y((this3->y + y2));
            		}
HXLINE(1054)		this->_matrix->translate(this->_point->x,this->_point->y);
HXLINE(1056)		if (this->isPixelPerfectRender(camera)) {
HXLINE(1058)			this->_matrix->tx = ( (Float)(::Math_obj::floor(this->_matrix->tx)) );
HXLINE(1059)			this->_matrix->ty = ( (Float)(::Math_obj::floor(this->_matrix->ty)) );
            		}
HXLINE(1062)		camera->drawPixels(this->_frame,this->framePixels,this->_matrix,this->colorTransform,this->blend,this->antialiasing,this->shader);
            	}


void FlxText_obj::calcFrame(::hx::Null< bool >  __o_RunOnCpp){
            		bool RunOnCpp = __o_RunOnCpp.Default(false);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1071_calcFrame)
HXLINE(1072)		if (::hx::IsNull( this->textField )) {
HXLINE(1073)			return;
            		}
HXLINE(1075)		bool _hx_tmp;
HXDLIN(1075)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1075)			_hx_tmp = !(RunOnCpp);
            		}
            		else {
HXLINE(1075)			_hx_tmp = false;
            		}
HXDLIN(1075)		if (_hx_tmp) {
HXLINE(1076)			return;
            		}
HXLINE(1078)		this->regenGraphic();
HXLINE(1079)		this->super::calcFrame(RunOnCpp);
            	}


void FlxText_obj::applyBorderStyle(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1083_applyBorderStyle)
HXLINE(1085)		{
HXLINE(1085)			 ::flixel::text::FlxTextBorderStyle _g = this->borderStyle;
HXDLIN(1085)			switch((int)(_g->_hx_getIndex())){
            				case (int)0: {
HXLINE(1103)					 ::flixel::math::FlxBasePoint this1 = this->_graphicOffset;
HXDLIN(1103)					this1->set_x(( (Float)(0) ));
HXDLIN(1103)					this1->set_y(( (Float)(0) ));
            				}
            				break;
            				case (int)1: {
HXLINE(1087)					bool _hx_tmp;
HXDLIN(1087)					if ((this->_shadowOffset->x == 1)) {
HXLINE(1087)						_hx_tmp = (this->_shadowOffset->y != 1);
            					}
            					else {
HXLINE(1087)						_hx_tmp = true;
            					}
HXDLIN(1087)					if (_hx_tmp) {
HXLINE(1088)						{
HXLINE(1088)							Float x;
HXDLIN(1088)							if ((this->_shadowOffset->x > 0)) {
HXLINE(1088)								x = this->_shadowOffset->x;
            							}
            							else {
HXLINE(1088)								x = ( (Float)(0) );
            							}
HXDLIN(1088)							this->_graphicOffset->set_x(x);
            						}
HXLINE(1089)						{
HXLINE(1089)							Float y;
HXDLIN(1089)							if ((this->_shadowOffset->y > 0)) {
HXLINE(1089)								y = this->_shadowOffset->y;
            							}
            							else {
HXLINE(1089)								y = ( (Float)(0) );
            							}
HXDLIN(1089)							this->_graphicOffset->set_y(y);
            						}
            					}
            					else {
HXLINE(1092)						if ((this->borderSize < 0)) {
HXLINE(1093)							 ::flixel::math::FlxBasePoint this2 = this->_graphicOffset;
HXDLIN(1093)							Float y1 = -(this->borderSize);
HXDLIN(1093)							this2->set_x(-(this->borderSize));
HXDLIN(1093)							this2->set_y(y1);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1095)					Float offsetX = _g->_hx_getFloat(0);
HXDLIN(1095)					Float offsetY = _g->_hx_getFloat(1);
HXDLIN(1095)					{
HXLINE(1096)						{
HXLINE(1096)							Float _hx_tmp1;
HXDLIN(1096)							if ((offsetX < 0)) {
HXLINE(1096)								_hx_tmp1 = -(offsetX);
            							}
            							else {
HXLINE(1096)								_hx_tmp1 = ( (Float)(0) );
            							}
HXDLIN(1096)							this->_graphicOffset->set_x(_hx_tmp1);
            						}
HXLINE(1097)						{
HXLINE(1097)							Float _hx_tmp2;
HXDLIN(1097)							if ((offsetY < 0)) {
HXLINE(1097)								_hx_tmp2 = -(offsetY);
            							}
            							else {
HXLINE(1097)								_hx_tmp2 = ( (Float)(0) );
            							}
HXDLIN(1097)							this->_graphicOffset->set_y(_hx_tmp2);
            						}
            					}
            				}
            				break;
            				case (int)3: case (int)4: {
HXLINE(1099)					if ((this->borderSize < 0)) {
HXLINE(1100)						 ::flixel::math::FlxBasePoint this3 = this->_graphicOffset;
HXDLIN(1100)						Float y2 = -(this->borderSize);
HXDLIN(1100)						this3->set_x(-(this->borderSize));
HXDLIN(1100)						this3->set_y(y2);
            					}
            					else {
HXLINE(1103)						 ::flixel::math::FlxBasePoint this4 = this->_graphicOffset;
HXDLIN(1103)						this4->set_x(( (Float)(0) ));
HXDLIN(1103)						this4->set_y(( (Float)(0) ));
            					}
            				}
            				break;
            			}
            		}
HXLINE(1105)		this->_matrix->translate(this->_graphicOffset->x,this->_graphicOffset->y);
HXLINE(1107)		{
HXLINE(1107)			 ::flixel::text::FlxTextBorderStyle _g1 = this->borderStyle;
HXDLIN(1107)			switch((int)(_g1->_hx_getIndex())){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
HXLINE(1109)					bool _hx_tmp3;
HXDLIN(1109)					if ((this->_shadowOffset->x == 1)) {
HXLINE(1109)						_hx_tmp3 = (this->_shadowOffset->y != 1);
            					}
            					else {
HXLINE(1109)						_hx_tmp3 = true;
            					}
HXDLIN(1109)					if (_hx_tmp3) {
HXLINE(1111)						this->applyFormats(this->_formatAdjusted,true);
HXLINE(1113)						int iterations;
HXDLIN(1113)						if ((this->borderQuality < 1)) {
HXLINE(1113)							iterations = 1;
            						}
            						else {
HXLINE(1113)							iterations = ::Std_obj::_hx_int((::Math_obj::abs(this->borderSize) * this->borderQuality));
            						}
HXLINE(1114)						Float delta = (this->borderSize / ( (Float)(iterations) ));
HXLINE(1115)						{
HXLINE(1115)							int _g2 = 0;
HXDLIN(1115)							int _g3 = iterations;
HXDLIN(1115)							while((_g2 < _g3)){
HXLINE(1115)								_g2 = (_g2 + 1);
HXDLIN(1115)								int i = (_g2 - 1);
HXLINE(1117)								{
HXLINE(1117)									 ::openfl::display::BitmapData graphic;
HXDLIN(1117)									if (this->_hasBorderAlpha) {
HXLINE(1117)										graphic = this->_borderPixels;
            									}
            									else {
HXLINE(1117)										graphic = this->graphic->bitmap;
            									}
HXDLIN(1117)									this->_matrix->translate(delta,delta);
HXDLIN(1117)									this->drawTextFieldTo(graphic);
            								}
            							}
            						}
HXLINE(1120)						this->_matrix->translate((-(this->_shadowOffset->x) * this->borderSize),(-(this->_shadowOffset->y) * this->borderSize));
            					}
            					else {
HXLINE(1124)						this->applyFormats(this->_formatAdjusted,true);
HXLINE(1126)						Float originX = this->_matrix->tx;
HXLINE(1127)						Float originY = this->_matrix->ty;
HXLINE(1129)						int iterations1;
HXDLIN(1129)						if ((this->borderQuality < 1)) {
HXLINE(1129)							iterations1 = 1;
            						}
            						else {
HXLINE(1129)							iterations1 = ::Std_obj::_hx_int((::Math_obj::abs(this->borderSize) * this->borderQuality));
            						}
HXLINE(1130)						int i1 = (iterations1 + 1);
HXLINE(1131)						while(true){
HXLINE(1131)							i1 = (i1 - 1);
HXDLIN(1131)							if (!(((i1 + 1) > 1))) {
HXLINE(1131)								goto _hx_goto_65;
            							}
HXLINE(1133)							{
HXLINE(1133)								 ::openfl::display::BitmapData graphic1;
HXDLIN(1133)								if (this->_hasBorderAlpha) {
HXLINE(1133)									graphic1 = this->_borderPixels;
            								}
            								else {
HXLINE(1133)									graphic1 = this->graphic->bitmap;
            								}
HXDLIN(1133)								this->_matrix->translate(((this->borderSize / ( (Float)(iterations1) )) * ( (Float)(i1) )),((this->borderSize / ( (Float)(iterations1) )) * ( (Float)(i1) )));
HXDLIN(1133)								this->drawTextFieldTo(graphic1);
            							}
HXLINE(1135)							this->_matrix->tx = originX;
HXLINE(1136)							this->_matrix->ty = originY;
            						}
            						_hx_goto_65:;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1139)					Float shadowX = _g1->_hx_getFloat(0);
HXDLIN(1139)					Float shadowY = _g1->_hx_getFloat(1);
HXDLIN(1139)					{
HXLINE(1141)						this->applyFormats(this->_formatAdjusted,true);
HXLINE(1143)						Float originX1 = this->_matrix->tx;
HXLINE(1144)						Float originY1 = this->_matrix->ty;
HXLINE(1147)						Float size = ::Math_obj::max(shadowX,shadowY);
HXLINE(1148)						int iterations2;
HXDLIN(1148)						if ((this->borderQuality < 1)) {
HXLINE(1148)							iterations2 = 1;
            						}
            						else {
HXLINE(1148)							iterations2 = ::Std_obj::_hx_int((size * this->borderQuality));
            						}
HXLINE(1149)						int i2 = (iterations2 + 1);
HXLINE(1150)						while(true){
HXLINE(1150)							i2 = (i2 - 1);
HXDLIN(1150)							if (!(((i2 + 1) > 1))) {
HXLINE(1150)								goto _hx_goto_66;
            							}
HXLINE(1152)							{
HXLINE(1152)								 ::openfl::display::BitmapData graphic2;
HXDLIN(1152)								if (this->_hasBorderAlpha) {
HXLINE(1152)									graphic2 = this->_borderPixels;
            								}
            								else {
HXLINE(1152)									graphic2 = this->graphic->bitmap;
            								}
HXDLIN(1152)								this->_matrix->translate(((shadowX / ( (Float)(iterations2) )) * ( (Float)(i2) )),((shadowY / ( (Float)(iterations2) )) * ( (Float)(i2) )));
HXDLIN(1152)								this->drawTextFieldTo(graphic2);
            							}
HXLINE(1154)							this->_matrix->tx = originX1;
HXLINE(1155)							this->_matrix->ty = originY1;
            						}
            						_hx_goto_66:;
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1161)					this->applyFormats(this->_formatAdjusted,true);
HXLINE(1163)					int b = ::Std_obj::_hx_int((this->borderSize * this->borderQuality));
HXDLIN(1163)					int iterations3;
HXDLIN(1163)					if ((1 > b)) {
HXLINE(1163)						iterations3 = 1;
            					}
            					else {
HXLINE(1163)						iterations3 = b;
            					}
HXLINE(1164)					int i3 = (iterations3 + 1);
HXLINE(1165)					while(true){
HXLINE(1165)						i3 = (i3 - 1);
HXDLIN(1165)						if (!(((i3 + 1) > 1))) {
HXLINE(1165)							goto _hx_goto_67;
            						}
HXLINE(1167)						Float curDelta = ((this->borderSize / ( (Float)(iterations3) )) * ( (Float)(i3) ));
HXLINE(1168)						{
HXLINE(1168)							 ::openfl::display::BitmapData graphic3;
HXDLIN(1168)							if (this->_hasBorderAlpha) {
HXLINE(1168)								graphic3 = this->_borderPixels;
            							}
            							else {
HXLINE(1168)								graphic3 = this->graphic->bitmap;
            							}
HXDLIN(1168)							this->_matrix->translate(-(curDelta),-(curDelta));
HXDLIN(1168)							this->drawTextFieldTo(graphic3);
            						}
HXLINE(1169)						{
HXLINE(1169)							 ::openfl::display::BitmapData graphic4;
HXDLIN(1169)							if (this->_hasBorderAlpha) {
HXLINE(1169)								graphic4 = this->_borderPixels;
            							}
            							else {
HXLINE(1169)								graphic4 = this->graphic->bitmap;
            							}
HXDLIN(1169)							this->_matrix->translate(curDelta,( (Float)(0) ));
HXDLIN(1169)							this->drawTextFieldTo(graphic4);
            						}
HXLINE(1170)						{
HXLINE(1170)							 ::openfl::display::BitmapData graphic5;
HXDLIN(1170)							if (this->_hasBorderAlpha) {
HXLINE(1170)								graphic5 = this->_borderPixels;
            							}
            							else {
HXLINE(1170)								graphic5 = this->graphic->bitmap;
            							}
HXDLIN(1170)							this->_matrix->translate(curDelta,( (Float)(0) ));
HXDLIN(1170)							this->drawTextFieldTo(graphic5);
            						}
HXLINE(1171)						{
HXLINE(1171)							 ::openfl::display::BitmapData graphic6;
HXDLIN(1171)							if (this->_hasBorderAlpha) {
HXLINE(1171)								graphic6 = this->_borderPixels;
            							}
            							else {
HXLINE(1171)								graphic6 = this->graphic->bitmap;
            							}
HXDLIN(1171)							this->_matrix->translate(( (Float)(0) ),curDelta);
HXDLIN(1171)							this->drawTextFieldTo(graphic6);
            						}
HXLINE(1172)						{
HXLINE(1172)							 ::openfl::display::BitmapData graphic7;
HXDLIN(1172)							if (this->_hasBorderAlpha) {
HXLINE(1172)								graphic7 = this->_borderPixels;
            							}
            							else {
HXLINE(1172)								graphic7 = this->graphic->bitmap;
            							}
HXDLIN(1172)							this->_matrix->translate(( (Float)(0) ),curDelta);
HXDLIN(1172)							this->drawTextFieldTo(graphic7);
            						}
HXLINE(1173)						{
HXLINE(1173)							 ::openfl::display::BitmapData graphic8;
HXDLIN(1173)							if (this->_hasBorderAlpha) {
HXLINE(1173)								graphic8 = this->_borderPixels;
            							}
            							else {
HXLINE(1173)								graphic8 = this->graphic->bitmap;
            							}
HXDLIN(1173)							this->_matrix->translate(-(curDelta),( (Float)(0) ));
HXDLIN(1173)							this->drawTextFieldTo(graphic8);
            						}
HXLINE(1174)						{
HXLINE(1174)							 ::openfl::display::BitmapData graphic9;
HXDLIN(1174)							if (this->_hasBorderAlpha) {
HXLINE(1174)								graphic9 = this->_borderPixels;
            							}
            							else {
HXLINE(1174)								graphic9 = this->graphic->bitmap;
            							}
HXDLIN(1174)							this->_matrix->translate(-(curDelta),( (Float)(0) ));
HXDLIN(1174)							this->drawTextFieldTo(graphic9);
            						}
HXLINE(1175)						{
HXLINE(1175)							 ::openfl::display::BitmapData graphic10;
HXDLIN(1175)							if (this->_hasBorderAlpha) {
HXLINE(1175)								graphic10 = this->_borderPixels;
            							}
            							else {
HXLINE(1175)								graphic10 = this->graphic->bitmap;
            							}
HXDLIN(1175)							this->_matrix->translate(( (Float)(0) ),-(curDelta));
HXDLIN(1175)							this->drawTextFieldTo(graphic10);
            						}
HXLINE(1177)						this->_matrix->translate(curDelta,( (Float)(0) ));
            					}
            					_hx_goto_67:;
            				}
            				break;
            				case (int)4: {
HXLINE(1184)					this->applyFormats(this->_formatAdjusted,true);
HXLINE(1186)					int b1 = ::Std_obj::_hx_int((this->borderSize * this->borderQuality));
HXDLIN(1186)					int iterations4;
HXDLIN(1186)					if ((1 > b1)) {
HXLINE(1186)						iterations4 = 1;
            					}
            					else {
HXLINE(1186)						iterations4 = b1;
            					}
HXLINE(1187)					int i4 = (iterations4 + 1);
HXLINE(1188)					while(true){
HXLINE(1188)						i4 = (i4 - 1);
HXDLIN(1188)						if (!(((i4 + 1) > 1))) {
HXLINE(1188)							goto _hx_goto_68;
            						}
HXLINE(1190)						Float curDelta1 = ((this->borderSize / ( (Float)(iterations4) )) * ( (Float)(i4) ));
HXLINE(1191)						{
HXLINE(1191)							 ::openfl::display::BitmapData graphic11;
HXDLIN(1191)							if (this->_hasBorderAlpha) {
HXLINE(1191)								graphic11 = this->_borderPixels;
            							}
            							else {
HXLINE(1191)								graphic11 = this->graphic->bitmap;
            							}
HXDLIN(1191)							this->_matrix->translate(-(curDelta1),-(curDelta1));
HXDLIN(1191)							this->drawTextFieldTo(graphic11);
            						}
HXLINE(1192)						{
HXLINE(1192)							 ::openfl::display::BitmapData graphic12;
HXDLIN(1192)							if (this->_hasBorderAlpha) {
HXLINE(1192)								graphic12 = this->_borderPixels;
            							}
            							else {
HXLINE(1192)								graphic12 = this->graphic->bitmap;
            							}
HXDLIN(1192)							this->_matrix->translate((curDelta1 * ( (Float)(2) )),( (Float)(0) ));
HXDLIN(1192)							this->drawTextFieldTo(graphic12);
            						}
HXLINE(1193)						{
HXLINE(1193)							 ::openfl::display::BitmapData graphic13;
HXDLIN(1193)							if (this->_hasBorderAlpha) {
HXLINE(1193)								graphic13 = this->_borderPixels;
            							}
            							else {
HXLINE(1193)								graphic13 = this->graphic->bitmap;
            							}
HXDLIN(1193)							this->_matrix->translate(( (Float)(0) ),(curDelta1 * ( (Float)(2) )));
HXDLIN(1193)							this->drawTextFieldTo(graphic13);
            						}
HXLINE(1194)						{
HXLINE(1194)							 ::openfl::display::BitmapData graphic14;
HXDLIN(1194)							if (this->_hasBorderAlpha) {
HXLINE(1194)								graphic14 = this->_borderPixels;
            							}
            							else {
HXLINE(1194)								graphic14 = this->graphic->bitmap;
            							}
HXDLIN(1194)							this->_matrix->translate((-(curDelta1) * ( (Float)(2) )),( (Float)(0) ));
HXDLIN(1194)							this->drawTextFieldTo(graphic14);
            						}
HXLINE(1196)						this->_matrix->translate(curDelta1,-(curDelta1));
            					}
            					_hx_goto_68:;
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,applyBorderStyle,(void))

void FlxText_obj::applyBorderTransparency(){
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_1204_applyBorderTransparency)
HXLINE(1205)		if (!(this->_hasBorderAlpha)) {
HXLINE(1206)			return;
            		}
HXLINE(1208)		if (::hx::IsNull( this->_borderColorTransform )) {
HXLINE(1209)			this->_borderColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1211)		this->_borderColorTransform->alphaMultiplier = (( (Float)(((this->borderColor >> 24) & 255)) ) / ( (Float)(255) ));
HXLINE(1212)		this->_borderPixels->colorTransform(this->_borderPixels->rect,this->_borderColorTransform);
HXLINE(1213)		this->graphic->bitmap->draw(this->_borderPixels,null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,applyBorderTransparency,(void))

void FlxText_obj::copyTextWithOffset(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1220_copyTextWithOffset)
HXLINE(1221)		 ::openfl::display::BitmapData graphic;
HXDLIN(1221)		if (this->_hasBorderAlpha) {
HXLINE(1221)			graphic = this->_borderPixels;
            		}
            		else {
HXLINE(1221)			graphic = this->graphic->bitmap;
            		}
HXLINE(1222)		this->_matrix->translate(x,y);
HXLINE(1223)		this->drawTextFieldTo(graphic);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxText_obj,copyTextWithOffset,(void))

void FlxText_obj::applyFormats( ::openfl::text::TextFormat FormatAdjusted,::hx::Null< bool >  __o_UseBorderColor){
            		bool UseBorderColor = __o_UseBorderColor.Default(false);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1227_applyFormats)
HXLINE(1229)		this->copyTextFormat(this->_defaultFormat,FormatAdjusted,false);
HXLINE(1230)		 ::Dynamic _hx_tmp;
HXDLIN(1230)		if (UseBorderColor) {
HXLINE(1230)			_hx_tmp = (this->borderColor & 16777215);
            		}
            		else {
HXLINE(1230)			_hx_tmp = this->_defaultFormat->color;
            		}
HXDLIN(1230)		FormatAdjusted->color = _hx_tmp;
HXLINE(1231)		this->textField->setTextFormat(FormatAdjusted,null(),null());
HXLINE(1234)		{
HXLINE(1234)			int _g = 0;
HXDLIN(1234)			::Array< ::Dynamic> _g1 = this->_formatRanges;
HXDLIN(1234)			while((_g < _g1->length)){
HXLINE(1234)				 ::flixel::text::_FlxText::FlxTextFormatRange formatRange = _g1->__get(_g).StaticCast<  ::flixel::text::_FlxText::FlxTextFormatRange >();
HXDLIN(1234)				_g = (_g + 1);
HXLINE(1236)				int _hx_tmp1 = (this->textField->get_text().length - 1);
HXDLIN(1236)				if (::hx::IsLess( _hx_tmp1,formatRange->range->start )) {
HXLINE(1239)					goto _hx_goto_72;
            				}
            				else {
HXLINE(1243)					 ::openfl::text::TextFormat textFormat = formatRange->format->format;
HXLINE(1244)					this->copyTextFormat(textFormat,FormatAdjusted,false);
HXLINE(1245)					 ::Dynamic _hx_tmp2;
HXDLIN(1245)					if (UseBorderColor) {
HXLINE(1245)						_hx_tmp2 = (formatRange->format->borderColor & 16777215);
            					}
            					else {
HXLINE(1245)						_hx_tmp2 = textFormat->color;
            					}
HXDLIN(1245)					FormatAdjusted->color = _hx_tmp2;
            				}
HXLINE(1248)				 ::openfl::text::TextField _hx_tmp3 = this->textField;
HXDLIN(1248)				int formatRange1 = ( (int)(formatRange->range->start) );
HXDLIN(1248)				int formatRange2 = ( (int)(formatRange->range->end) );
HXDLIN(1248)				_hx_tmp3->setTextFormat(FormatAdjusted,formatRange1,::Std_obj::_hx_int(::Math_obj::min(( (Float)(formatRange2) ),( (Float)(this->textField->get_text().length) ))));
            			}
            			_hx_goto_72:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxText_obj,applyFormats,(void))

void FlxText_obj::copyTextFormat( ::openfl::text::TextFormat from, ::openfl::text::TextFormat to,::hx::Null< bool >  __o_withAlign){
            		bool withAlign = __o_withAlign.Default(true);
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1253_copyTextFormat)
HXLINE(1254)		to->font = from->font;
HXLINE(1255)		to->bold = from->bold;
HXLINE(1256)		to->italic = from->italic;
HXLINE(1257)		to->underline = from->underline;
HXLINE(1258)		to->size = from->size;
HXLINE(1259)		to->color = from->color;
HXLINE(1260)		to->leading = from->leading;
HXLINE(1261)		if (withAlign) {
HXLINE(1262)			to->align = from->align;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxText_obj,copyTextFormat,(void))

 ::openfl::text::TextFormat FlxText_obj::dtfCopy(){
            	HX_GC_STACKFRAME(&_hx_pos_7d9cf70d988be490_1271_dtfCopy)
HXLINE(1272)		 ::openfl::text::TextFormat dtf = this->textField->get_defaultTextFormat();
HXLINE(1273)		return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,dtf->font,dtf->size,dtf->color,dtf->bold,dtf->italic,dtf->underline,dtf->url,dtf->target,dtf->align,null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,dtfCopy,return )

void FlxText_obj::updateDefaultFormat(){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1277_updateDefaultFormat)
HXLINE(1278)		this->textField->set_defaultTextFormat(this->_defaultFormat);
HXLINE(1279)		this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXLINE(1280)		this->_regen = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxText_obj,updateDefaultFormat,(void))

 ::flixel::graphics::frames::FlxFramesCollection FlxText_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection Frames){
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_1284_set_frames)
HXLINE(1285)		this->super::set_frames(Frames);
HXLINE(1286)		this->_regen = false;
HXLINE(1287)		return Frames;
            	}


int FlxText_obj::VERTICAL_GUTTER;


::hx::ObjectPtr< FlxText_obj > FlxText_obj::__new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_FieldWidth,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont) {
	::hx::ObjectPtr< FlxText_obj > __this = new FlxText_obj();
	__this->__construct(__o_X,__o_Y,__o_FieldWidth,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

::hx::ObjectPtr< FlxText_obj > FlxText_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_FieldWidth,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont) {
	FlxText_obj *__this = (FlxText_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxText_obj), true, "flixel.text.FlxText"));
	*(void **)__this = FlxText_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_FieldWidth,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

FlxText_obj::FlxText_obj()
{
}

void FlxText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxText);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(borderStyle,"borderStyle");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(borderSize,"borderSize");
	HX_MARK_MEMBER_NAME(borderQuality,"borderQuality");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_autoHeight,"_autoHeight");
	HX_MARK_MEMBER_NAME(_shadowOffset,"_shadowOffset");
	HX_MARK_MEMBER_NAME(_graphicOffset,"_graphicOffset");
	HX_MARK_MEMBER_NAME(_defaultFormat,"_defaultFormat");
	HX_MARK_MEMBER_NAME(_formatAdjusted,"_formatAdjusted");
	HX_MARK_MEMBER_NAME(_formatRanges,"_formatRanges");
	HX_MARK_MEMBER_NAME(_font,"_font");
	HX_MARK_MEMBER_NAME(_regen,"_regen");
	HX_MARK_MEMBER_NAME(_borderPixels,"_borderPixels");
	HX_MARK_MEMBER_NAME(_borderColorTransform,"_borderColorTransform");
	HX_MARK_MEMBER_NAME(_hasBorderAlpha,"_hasBorderAlpha");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(borderStyle,"borderStyle");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(borderSize,"borderSize");
	HX_VISIT_MEMBER_NAME(borderQuality,"borderQuality");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_autoHeight,"_autoHeight");
	HX_VISIT_MEMBER_NAME(_shadowOffset,"_shadowOffset");
	HX_VISIT_MEMBER_NAME(_graphicOffset,"_graphicOffset");
	HX_VISIT_MEMBER_NAME(_defaultFormat,"_defaultFormat");
	HX_VISIT_MEMBER_NAME(_formatAdjusted,"_formatAdjusted");
	HX_VISIT_MEMBER_NAME(_formatRanges,"_formatRanges");
	HX_VISIT_MEMBER_NAME(_font,"_font");
	HX_VISIT_MEMBER_NAME(_regen,"_regen");
	HX_VISIT_MEMBER_NAME(_borderPixels,"_borderPixels");
	HX_VISIT_MEMBER_NAME(_borderColorTransform,"_borderColorTransform");
	HX_VISIT_MEMBER_NAME(_hasBorderAlpha,"_hasBorderAlpha");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxText_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_font() ); }
		if (HX_FIELD_EQ(inName,"bold") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bold() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_font") ) { return ::hx::Val( _font ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_italic() ); }
		if (HX_FIELD_EQ(inName,"_regen") ) { return ::hx::Val( _regen ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"dtfCopy") ) { return ::hx::Val( dtfCopy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"embedded") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_embedded() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return ::hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return ::hx::Val( set_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return ::hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return ::hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bold") ) { return ::hx::Val( get_bold_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bold") ) { return ::hx::Val( set_bold_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"underline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_underline() ); }
		if (HX_FIELD_EQ(inName,"alignment") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_alignment() ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"drawFrame") ) { return ::hx::Val( drawFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"addFormat") ) { return ::hx::Val( addFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFormat") ) { return ::hx::Val( setFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return ::hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcFrame") ) { return ::hx::Val( calcFrame_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"systemFont") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_systemFont() ); }
		if (HX_FIELD_EQ(inName,"borderSize") ) { return ::hx::Val( borderSize ); }
		if (HX_FIELD_EQ(inName,"fieldWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_fieldWidth() ); }
		if (HX_FIELD_EQ(inName,"get_italic") ) { return ::hx::Val( get_italic_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_italic") ) { return ::hx::Val( set_italic_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawSimple") ) { return ::hx::Val( drawSimple_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return ::hx::Val( set_frames_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderStyle") ) { return ::hx::Val( borderStyle ); }
		if (HX_FIELD_EQ(inName,"borderColor") ) { return ::hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"fieldHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_fieldHeight() ); }
		if (HX_FIELD_EQ(inName,"_autoHeight") ) { return ::hx::Val( _autoHeight ); }
		if (HX_FIELD_EQ(inName,"applyMarkup") ) { return ::hx::Val( applyMarkup_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return ::hx::Val( set_graphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawComplex") ) { return ::hx::Val( drawComplex_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shadowOffset") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_shadowOffset() ); }
		if (HX_FIELD_EQ(inName,"stampOnAtlas") ) { return ::hx::Val( stampOnAtlas_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeFormat") ) { return ::hx::Val( removeFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearFormats") ) { return ::hx::Val( clearFormats_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHitbox") ) { return ::hx::Val( updateHitbox_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return ::hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return ::hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedded") ) { return ::hx::Val( get_embedded_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return ::hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return ::hx::Val( set_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"regenGraphic") ) { return ::hx::Val( regenGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyFormats") ) { return ::hx::Val( applyFormats_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_letterSpacing() ); }
		if (HX_FIELD_EQ(inName,"borderQuality") ) { return ::hx::Val( borderQuality ); }
		if (HX_FIELD_EQ(inName,"_shadowOffset") ) { return ::hx::Val( _shadowOffset ); }
		if (HX_FIELD_EQ(inName,"_formatRanges") ) { return ::hx::Val( _formatRanges ); }
		if (HX_FIELD_EQ(inName,"_borderPixels") ) { return ::hx::Val( _borderPixels ); }
		if (HX_FIELD_EQ(inName,"get_underline") ) { return ::hx::Val( get_underline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_underline") ) { return ::hx::Val( set_underline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_alignment") ) { return ::hx::Val( get_alignment_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alignment") ) { return ::hx::Val( set_alignment_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_graphicOffset") ) { return ::hx::Val( _graphicOffset ); }
		if (HX_FIELD_EQ(inName,"_defaultFormat") ) { return ::hx::Val( _defaultFormat ); }
		if (HX_FIELD_EQ(inName,"setBorderStyle") ) { return ::hx::Val( setBorderStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fieldWidth") ) { return ::hx::Val( set_fieldWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fieldWidth") ) { return ::hx::Val( get_fieldWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_systemFont") ) { return ::hx::Val( get_systemFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_systemFont") ) { return ::hx::Val( set_systemFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderSize") ) { return ::hx::Val( set_borderSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyTextFormat") ) { return ::hx::Val( copyTextFormat_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_formatAdjusted") ) { return ::hx::Val( _formatAdjusted ); }
		if (HX_FIELD_EQ(inName,"_hasBorderAlpha") ) { return ::hx::Val( _hasBorderAlpha ); }
		if (HX_FIELD_EQ(inName,"getScreenBounds") ) { return ::hx::Val( getScreenBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fieldHeight") ) { return ::hx::Val( get_fieldHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fieldHeight") ) { return ::hx::Val( set_fieldHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderStyle") ) { return ::hx::Val( set_borderStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return ::hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTextFieldTo") ) { return ::hx::Val( drawTextFieldTo_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_shadowOffset") ) { return ::hx::Val( get_shadowOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyBorderStyle") ) { return ::hx::Val( applyBorderStyle_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_letterSpacing") ) { return ::hx::Val( get_letterSpacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_letterSpacing") ) { return ::hx::Val( set_letterSpacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"setColorTransform") ) { return ::hx::Val( setColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderQuality") ) { return ::hx::Val( set_borderQuality_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"copyTextWithOffset") ) { return ::hx::Val( copyTextWithOffset_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateDefaultFormat") ) { return ::hx::Val( updateDefaultFormat_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return ::hx::Val( updateColorTransform_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_borderColorTransform") ) { return ::hx::Val( _borderColorTransform ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"applyBorderTransparency") ) { return ::hx::Val( applyBorderTransparency_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxText_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_size(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_font(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"bold") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bold(inValue.Cast< bool >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_font") ) { _font=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_italic(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"_regen") ) { _regen=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoSize(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"underline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_underline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"alignment") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_alignment(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"systemFont") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_systemFont(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"borderSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_borderSize(inValue.Cast< Float >()) );borderSize=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fieldWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_fieldWidth(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderStyle") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_borderStyle(inValue.Cast<  ::flixel::text::FlxTextBorderStyle >()) );borderStyle=inValue.Cast<  ::flixel::text::FlxTextBorderStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_borderColor(inValue.Cast< int >()) );borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fieldHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_fieldHeight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_autoHeight") ) { _autoHeight=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_letterSpacing(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"borderQuality") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_borderQuality(inValue.Cast< Float >()) );borderQuality=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_shadowOffset") ) { _shadowOffset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_formatRanges") ) { _formatRanges=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_borderPixels") ) { _borderPixels=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_graphicOffset") ) { _graphicOffset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_defaultFormat") ) { _defaultFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_formatAdjusted") ) { _formatAdjusted=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_hasBorderAlpha") ) { _hasBorderAlpha=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_borderColorTransform") ) { _borderColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("letterSpacing",3d,b7,03,f5));
	outFields->push(HX_("font",cf,5d,c0,43));
	outFields->push(HX_("embedded",8a,19,62,de));
	outFields->push(HX_("systemFont",5e,c4,43,f2));
	outFields->push(HX_("bold",85,81,1b,41));
	outFields->push(HX_("italic",f0,2e,64,06));
	outFields->push(HX_("underline",0c,15,d1,87));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("alignment",e3,e2,3d,ea));
	outFields->push(HX_("borderStyle",a5,70,96,10));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("borderSize",cd,ff,ed,06));
	outFields->push(HX_("borderQuality",33,95,25,79));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("fieldWidth",ec,2e,e5,97));
	outFields->push(HX_("fieldHeight",41,58,f3,06));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("_autoHeight",d5,e5,a0,40));
	outFields->push(HX_("_shadowOffset",72,8e,7a,be));
	outFields->push(HX_("shadowOffset",93,fb,0b,dc));
	outFields->push(HX_("_graphicOffset",9c,c4,42,5c));
	outFields->push(HX_("_defaultFormat",19,53,59,36));
	outFields->push(HX_("_formatAdjusted",a4,c9,b6,80));
	outFields->push(HX_("_formatRanges",8c,b9,14,d7));
	outFields->push(HX_("_font",ae,79,d1,f6));
	outFields->push(HX_("_regen",fe,75,a6,e2));
	outFields->push(HX_("_borderPixels",18,bc,51,cc));
	outFields->push(HX_("_borderColorTransform",74,07,2f,6f));
	outFields->push(HX_("_hasBorderAlpha",37,fe,f9,e8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxText_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(FlxText_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::flixel::text::FlxTextBorderStyle */ ,(int)offsetof(FlxText_obj,borderStyle),HX_("borderStyle",a5,70,96,10)},
	{::hx::fsInt,(int)offsetof(FlxText_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{::hx::fsFloat,(int)offsetof(FlxText_obj,borderSize),HX_("borderSize",cd,ff,ed,06)},
	{::hx::fsFloat,(int)offsetof(FlxText_obj,borderQuality),HX_("borderQuality",33,95,25,79)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(FlxText_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsBool,(int)offsetof(FlxText_obj,_autoHeight),HX_("_autoHeight",d5,e5,a0,40)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxText_obj,_shadowOffset),HX_("_shadowOffset",72,8e,7a,be)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxText_obj,_graphicOffset),HX_("_graphicOffset",9c,c4,42,5c)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(FlxText_obj,_defaultFormat),HX_("_defaultFormat",19,53,59,36)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(FlxText_obj,_formatAdjusted),HX_("_formatAdjusted",a4,c9,b6,80)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxText_obj,_formatRanges),HX_("_formatRanges",8c,b9,14,d7)},
	{::hx::fsString,(int)offsetof(FlxText_obj,_font),HX_("_font",ae,79,d1,f6)},
	{::hx::fsBool,(int)offsetof(FlxText_obj,_regen),HX_("_regen",fe,75,a6,e2)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxText_obj,_borderPixels),HX_("_borderPixels",18,bc,51,cc)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(FlxText_obj,_borderColorTransform),HX_("_borderColorTransform",74,07,2f,6f)},
	{::hx::fsBool,(int)offsetof(FlxText_obj,_hasBorderAlpha),HX_("_hasBorderAlpha",37,fe,f9,e8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxText_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FlxText_obj::VERTICAL_GUTTER,HX_("VERTICAL_GUTTER",04,b3,89,07)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxText_obj_sMemberFields[] = {
	HX_("text",ad,cc,f9,4c),
	HX_("borderStyle",a5,70,96,10),
	HX_("borderColor",d7,3c,d5,d6),
	HX_("borderSize",cd,ff,ed,06),
	HX_("borderQuality",33,95,25,79),
	HX_("textField",cd,24,81,99),
	HX_("_autoHeight",d5,e5,a0,40),
	HX_("_shadowOffset",72,8e,7a,be),
	HX_("_graphicOffset",9c,c4,42,5c),
	HX_("_defaultFormat",19,53,59,36),
	HX_("_formatAdjusted",a4,c9,b6,80),
	HX_("_formatRanges",8c,b9,14,d7),
	HX_("_font",ae,79,d1,f6),
	HX_("_regen",fe,75,a6,e2),
	HX_("_borderPixels",18,bc,51,cc),
	HX_("_borderColorTransform",74,07,2f,6f),
	HX_("_hasBorderAlpha",37,fe,f9,e8),
	HX_("destroy",fa,2c,86,24),
	HX_("drawFrame",89,ad,8e,ce),
	HX_("stampOnAtlas",e9,f9,45,2b),
	HX_("applyMarkup",b6,43,6b,f6),
	HX_("addFormat",38,c4,b2,b5),
	HX_("removeFormat",9b,2a,bc,6c),
	HX_("clearFormats",4f,73,ad,ba),
	HX_("setFormat",79,04,36,5d),
	HX_("setBorderStyle",23,ac,54,b8),
	HX_("updateHitbox",81,94,eb,56),
	HX_("getScreenBounds",b7,e4,25,66),
	HX_("set_fieldWidth",a9,9f,fa,2d),
	HX_("get_fieldWidth",35,b7,da,0d),
	HX_("get_fieldHeight",d8,0f,d5,c7),
	HX_("set_fieldHeight",e4,8c,a0,c3),
	HX_("set_autoSize",4d,67,8c,f9),
	HX_("get_autoSize",d9,43,93,e4),
	HX_("set_text",aa,e1,11,7b),
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	HX_("get_letterSpacing",94,c2,73,fb),
	HX_("set_letterSpacing",a0,9a,e1,1e),
	HX_("setColorTransform",cb,5e,21,43),
	HX_("set_color",c6,b9,56,71),
	HX_("get_font",58,19,7b,c3),
	HX_("set_font",cc,72,d8,71),
	HX_("get_embedded",93,cd,7b,93),
	HX_("get_systemFont",a7,4c,39,68),
	HX_("set_systemFont",1b,35,59,88),
	HX_("get_bold",0e,3d,d6,c0),
	HX_("set_bold",82,96,33,6f),
	HX_("get_italic",b9,9e,eb,f6),
	HX_("set_italic",2d,3d,69,fa),
	HX_("get_underline",e3,e8,34,49),
	HX_("set_underline",ef,ca,3a,8e),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("get_alignment",ba,b6,a1,ab),
	HX_("set_alignment",c6,98,a7,f0),
	HX_("set_borderStyle",48,a5,43,cd),
	HX_("set_borderColor",7a,71,82,93),
	HX_("set_borderSize",8a,70,03,9d),
	HX_("set_borderQuality",96,78,03,a3),
	HX_("set_graphic",cb,c1,6e,04),
	HX_("get_width",5d,12,0c,0e),
	HX_("get_height",b0,77,d3,f2),
	HX_("get_shadowOffset",1c,e8,aa,e0),
	HX_("updateColorTransform",72,0f,d2,2f),
	HX_("regenGraphic",6b,55,39,8b),
	HX_("drawTextFieldTo",04,9e,45,9d),
	HX_("draw",04,2c,70,42),
	HX_("drawSimple",56,7f,42,fa),
	HX_("drawComplex",8c,aa,b9,cc),
	HX_("calcFrame",58,93,8c,f9),
	HX_("applyBorderStyle",d7,bd,a2,48),
	HX_("applyBorderTransparency",32,96,af,17),
	HX_("copyTextWithOffset",db,97,6d,53),
	HX_("applyFormats",8e,0d,9c,1e),
	HX_("copyTextFormat",d9,63,8e,5f),
	HX_("dtfCopy",ab,51,45,87),
	HX_("updateDefaultFormat",0f,5b,8e,8b),
	HX_("set_frames",e3,bd,8a,a0),
	::String(null()) };

static void FlxText_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxText_obj::VERTICAL_GUTTER,"VERTICAL_GUTTER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxText_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxText_obj::VERTICAL_GUTTER,"VERTICAL_GUTTER");
};

#endif

::hx::Class FlxText_obj::__mClass;

static ::String FlxText_obj_sStaticFields[] = {
	HX_("VERTICAL_GUTTER",04,b3,89,07),
	::String(null())
};

void FlxText_obj::__register()
{
	FlxText_obj _hx_dummy;
	FlxText_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.text.FlxText",b0,4a,1b,ca);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxText_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxText_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxText_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxText_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxText_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxText_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxText_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7d9cf70d988be490_45_boot)
HXDLIN(  45)		VERTICAL_GUTTER = 4;
            	}
}

} // end namespace flixel
} // end namespace text
