// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_math__FlxRect_FlxReadOnlyRect_Impl_
#include <flixel/math/_FlxRect/FlxReadOnlyRect_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_640_get_pool,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_pool",0x0cea087e,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_pool","flixel/math/FlxRect.hx",640,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_649_get,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get",0x65c12b1d,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get","flixel/math/FlxRect.hx",649,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_658_weak,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","weak",0xadd7e811,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.weak","flixel/math/FlxRect.hx",658,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_662_get_x,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_x",0x38b83f96,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_x","flixel/math/FlxRect.hx",662,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_665_get_y,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_y",0x38b83f97,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_y","flixel/math/FlxRect.hx",665,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_668_get_width,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_width",0x43abdc24,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_width","flixel/math/FlxRect.hx",668,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_671_get_height,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_height",0xa9043c09,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_height","flixel/math/FlxRect.hx",671,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_675_get_left,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_left",0x0a3d8fa9,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_left","flixel/math/FlxRect.hx",675,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_679_get_right,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_right",0x62ad31fa,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_right","flixel/math/FlxRect.hx",679,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_683_get_top,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_top",0x06f52933,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_top","flixel/math/FlxRect.hx",683,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_687_get_bottom,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_bottom",0x0c311b0d,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_bottom","flixel/math/FlxRect.hx",687,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_691_get_isEmpty,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","get_isEmpty",0x46d547e1,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.get_isEmpty","flixel/math/FlxRect.hx",691,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_694_destroy,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","destroy",0x04ae2701,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.destroy","flixel/math/FlxRect.hx",694,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_695_setSize,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","setSize",0xf1ffdb8a,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.setSize","flixel/math/FlxRect.hx",695,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_696_setPosition,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","setPosition",0xafd673f2,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.setPosition","flixel/math/FlxRect.hx",696,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_697_set,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","set",0x65ca4629,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.set","flixel/math/FlxRect.hx",697,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_698_setBounds,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","setBounds",0xfb64c57e,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.setBounds","flixel/math/FlxRect.hx",698,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_699_setAbs,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","setAbs",0x34b0e1c9,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.setAbs","flixel/math/FlxRect.hx",699,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_700_setBoundsAbs,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","setBoundsAbs",0xc59ee594,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.setBoundsAbs","flixel/math/FlxRect.hx",700,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_701_copyFrom,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","copyFrom",0x0b33d7d8,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.copyFrom","flixel/math/FlxRect.hx",701,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_702_copyFromFlash,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","copyFromFlash",0x29505eb8,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.copyFromFlash","flixel/math/FlxRect.hx",702,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_703_union,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","union",0x4e3eff56,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.union","flixel/math/FlxRect.hx",703,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_704_floor,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","floor",0xa9ee6c13,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.floor","flixel/math/FlxRect.hx",704,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_705_ceil,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","ceil",0xa09faa9e,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.ceil","flixel/math/FlxRect.hx",705,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_706_round,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","round",0x94bd9295,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.round","flixel/math/FlxRect.hx",706,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_707_fromTwoPoints,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","fromTwoPoints",0xe3c69b4c,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.fromTwoPoints","flixel/math/FlxRect.hx",707,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_708_unionWithPoint,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","unionWithPoint",0xacbd5e34,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.unionWithPoint","flixel/math/FlxRect.hx",708,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_709_offset,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","offset",0x258efb6c,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.offset","flixel/math/FlxRect.hx",709,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_b32acd12631eeda1_710_clipTo,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_","clipTo",0xcfa77044,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_.clipTo","flixel/math/FlxRect.hx",710,0x2aef791c)
namespace flixel{
namespace math{
namespace _FlxRect{

void FlxReadOnlyRect_Impl__obj::__construct() { }

Dynamic FlxReadOnlyRect_Impl__obj::__CreateEmpty() { return new FlxReadOnlyRect_Impl__obj; }

void *FlxReadOnlyRect_Impl__obj::_hx_vtable = 0;

Dynamic FlxReadOnlyRect_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxReadOnlyRect_Impl__obj > _hx_result = new FlxReadOnlyRect_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxReadOnlyRect_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d931305;
}

::Dynamic FlxReadOnlyRect_Impl__obj::get_pool(){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_640_get_pool)
HXDLIN( 640)		return ::flixel::math::FlxRect_obj::get_pool();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxReadOnlyRect_Impl__obj,get_pool,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::get(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height){
            		Float x = __o_x.Default(((Float)0.0));
            		Float y = __o_y.Default(((Float)0.0));
            		Float width = __o_width.Default(((Float)0.0));
            		Float height = __o_height.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_649_get)
HXDLIN( 649)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 649)		_this->x = x;
HXDLIN( 649)		_this->y = y;
HXDLIN( 649)		_this->width = width;
HXDLIN( 649)		_this->height = height;
HXDLIN( 649)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 649)		rect->_inPool = false;
HXDLIN( 649)		return rect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxReadOnlyRect_Impl__obj,get,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::weak(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height){
            		Float x = __o_x.Default(((Float)0.0));
            		Float y = __o_y.Default(((Float)0.0));
            		Float width = __o_width.Default(((Float)0.0));
            		Float height = __o_height.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_658_weak)
HXDLIN( 658)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 658)		_this->x = x;
HXDLIN( 658)		_this->y = y;
HXDLIN( 658)		_this->width = width;
HXDLIN( 658)		_this->height = height;
HXDLIN( 658)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 658)		rect->_inPool = false;
HXDLIN( 658)		 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 658)		rect1->_weak = true;
HXDLIN( 658)		return rect1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxReadOnlyRect_Impl__obj,weak,return )

Float FlxReadOnlyRect_Impl__obj::get_x( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_662_get_x)
HXDLIN( 662)		return this1->x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_x,return )

Float FlxReadOnlyRect_Impl__obj::get_y( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_665_get_y)
HXDLIN( 665)		return this1->y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_y,return )

Float FlxReadOnlyRect_Impl__obj::get_width( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_668_get_width)
HXDLIN( 668)		return this1->width;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_width,return )

Float FlxReadOnlyRect_Impl__obj::get_height( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_671_get_height)
HXDLIN( 671)		return this1->height;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_height,return )

Float FlxReadOnlyRect_Impl__obj::get_left( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_675_get_left)
HXDLIN( 675)		return this1->x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_left,return )

Float FlxReadOnlyRect_Impl__obj::get_right( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_679_get_right)
HXDLIN( 679)		return (this1->x + this1->width);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_right,return )

Float FlxReadOnlyRect_Impl__obj::get_top( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_683_get_top)
HXDLIN( 683)		return this1->y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_top,return )

Float FlxReadOnlyRect_Impl__obj::get_bottom( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_687_get_bottom)
HXDLIN( 687)		return (this1->y + this1->height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_bottom,return )

bool FlxReadOnlyRect_Impl__obj::get_isEmpty( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_691_get_isEmpty)
HXDLIN( 691)		if ((this1->width != 0)) {
HXDLIN( 691)			return (this1->height == 0);
            		}
            		else {
HXDLIN( 691)			return true;
            		}
HXDLIN( 691)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,get_isEmpty,return )

void FlxReadOnlyRect_Impl__obj::destroy( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_694_destroy)
HXDLIN( 694)		this1->destroy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,destroy,(void))

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::setSize( ::flixel::math::FlxRect this1,Float w,Float h){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_695_setSize)
HXDLIN( 695)		this1->width = w;
HXDLIN( 695)		this1->height = h;
HXDLIN( 695)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyRect_Impl__obj,setSize,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::setPosition( ::flixel::math::FlxRect this1,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_696_setPosition)
HXDLIN( 696)		this1->x = x;
HXDLIN( 696)		this1->y = y;
HXDLIN( 696)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyRect_Impl__obj,setPosition,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::set( ::flixel::math::FlxRect this1,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_w,::hx::Null< Float >  __o_h){
            		Float x = __o_x.Default(((Float)0.0));
            		Float y = __o_y.Default(((Float)0.0));
            		Float w = __o_w.Default(((Float)0.0));
            		Float h = __o_h.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_697_set)
HXDLIN( 697)		this1->x = x;
HXDLIN( 697)		this1->y = y;
HXDLIN( 697)		this1->width = w;
HXDLIN( 697)		this1->height = h;
HXDLIN( 697)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxReadOnlyRect_Impl__obj,set,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::setBounds( ::flixel::math::FlxRect this1,Float x1,Float y1,Float x2,Float y2){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_698_setBounds)
HXDLIN( 698)		this1->x = x1;
HXDLIN( 698)		this1->y = y1;
HXDLIN( 698)		this1->width = (x2 - x1);
HXDLIN( 698)		this1->height = (y2 - y1);
HXDLIN( 698)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxReadOnlyRect_Impl__obj,setBounds,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::setAbs( ::flixel::math::FlxRect this1,Float x,Float y,Float w,Float h){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_699_setAbs)
HXDLIN( 699)		Float _hx_tmp;
HXDLIN( 699)		if ((w > 0)) {
HXDLIN( 699)			_hx_tmp = x;
            		}
            		else {
HXDLIN( 699)			_hx_tmp = (x + w);
            		}
HXDLIN( 699)		this1->x = _hx_tmp;
HXDLIN( 699)		Float _hx_tmp1;
HXDLIN( 699)		if ((h > 0)) {
HXDLIN( 699)			_hx_tmp1 = y;
            		}
            		else {
HXDLIN( 699)			_hx_tmp1 = (y + h);
            		}
HXDLIN( 699)		this1->y = _hx_tmp1;
HXDLIN( 699)		Float _hx_tmp2;
HXDLIN( 699)		if ((w > 0)) {
HXDLIN( 699)			_hx_tmp2 = w;
            		}
            		else {
HXDLIN( 699)			_hx_tmp2 = -(w);
            		}
HXDLIN( 699)		this1->width = _hx_tmp2;
HXDLIN( 699)		Float _hx_tmp3;
HXDLIN( 699)		if ((h > 0)) {
HXDLIN( 699)			_hx_tmp3 = h;
            		}
            		else {
HXDLIN( 699)			_hx_tmp3 = -(h);
            		}
HXDLIN( 699)		this1->height = _hx_tmp3;
HXDLIN( 699)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxReadOnlyRect_Impl__obj,setAbs,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::setBoundsAbs( ::flixel::math::FlxRect this1,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2){
            		Float x1 = __o_x1.Default(((Float)0.0));
            		Float y1 = __o_y1.Default(((Float)0.0));
            		Float x2 = __o_x2.Default(((Float)0.0));
            		Float y2 = __o_y2.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_700_setBoundsAbs)
HXDLIN( 700)		Float width = (x2 - x1);
HXDLIN( 700)		Float height = (y2 - y1);
HXDLIN( 700)		Float _hx_tmp;
HXDLIN( 700)		if ((width > 0)) {
HXDLIN( 700)			_hx_tmp = x1;
            		}
            		else {
HXDLIN( 700)			_hx_tmp = (x1 + width);
            		}
HXDLIN( 700)		this1->x = _hx_tmp;
HXDLIN( 700)		Float _hx_tmp1;
HXDLIN( 700)		if ((height > 0)) {
HXDLIN( 700)			_hx_tmp1 = y1;
            		}
            		else {
HXDLIN( 700)			_hx_tmp1 = (y1 + height);
            		}
HXDLIN( 700)		this1->y = _hx_tmp1;
HXDLIN( 700)		Float _hx_tmp2;
HXDLIN( 700)		if ((width > 0)) {
HXDLIN( 700)			_hx_tmp2 = width;
            		}
            		else {
HXDLIN( 700)			_hx_tmp2 = -(width);
            		}
HXDLIN( 700)		this1->width = _hx_tmp2;
HXDLIN( 700)		Float _hx_tmp3;
HXDLIN( 700)		if ((height > 0)) {
HXDLIN( 700)			_hx_tmp3 = height;
            		}
            		else {
HXDLIN( 700)			_hx_tmp3 = -(height);
            		}
HXDLIN( 700)		this1->height = _hx_tmp3;
HXDLIN( 700)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxReadOnlyRect_Impl__obj,setBoundsAbs,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::copyFrom( ::flixel::math::FlxRect this1, ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_701_copyFrom)
HXDLIN( 701)		this1->x = rect->x;
HXDLIN( 701)		this1->y = rect->y;
HXDLIN( 701)		this1->width = rect->width;
HXDLIN( 701)		this1->height = rect->height;
HXDLIN( 701)		if (rect->_weak) {
HXDLIN( 701)			if (!(rect->_inPool)) {
HXDLIN( 701)				rect->_inPool = true;
HXDLIN( 701)				rect->_weak = false;
HXDLIN( 701)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect);
            			}
            		}
HXDLIN( 701)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyRect_Impl__obj,copyFrom,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::copyFromFlash( ::flixel::math::FlxRect this1, ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_702_copyFromFlash)
HXDLIN( 702)		this1->x = rect->x;
HXDLIN( 702)		this1->y = rect->y;
HXDLIN( 702)		this1->width = rect->width;
HXDLIN( 702)		this1->height = rect->height;
HXDLIN( 702)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyRect_Impl__obj,copyFromFlash,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::_hx_union( ::flixel::math::FlxRect this1, ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_703_union)
HXDLIN( 703)		Float minX = ::Math_obj::min(this1->x,rect->x);
HXDLIN( 703)		Float minY = ::Math_obj::min(this1->y,rect->y);
HXDLIN( 703)		Float maxX = ::Math_obj::max((this1->x + this1->width),(rect->x + rect->width));
HXDLIN( 703)		Float maxY = ::Math_obj::max((this1->y + this1->height),(rect->y + rect->height));
HXDLIN( 703)		if (rect->_weak) {
HXDLIN( 703)			if (!(rect->_inPool)) {
HXDLIN( 703)				rect->_inPool = true;
HXDLIN( 703)				rect->_weak = false;
HXDLIN( 703)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect);
            			}
            		}
HXDLIN( 703)		this1->x = minX;
HXDLIN( 703)		this1->y = minY;
HXDLIN( 703)		this1->width = (maxX - minX);
HXDLIN( 703)		this1->height = (maxY - minY);
HXDLIN( 703)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyRect_Impl__obj,_hx_union,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::floor( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_704_floor)
HXDLIN( 704)		this1->x = ( (Float)(::Math_obj::floor(this1->x)) );
HXDLIN( 704)		this1->y = ( (Float)(::Math_obj::floor(this1->y)) );
HXDLIN( 704)		this1->width = ( (Float)(::Math_obj::floor(this1->width)) );
HXDLIN( 704)		this1->height = ( (Float)(::Math_obj::floor(this1->height)) );
HXDLIN( 704)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,floor,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::ceil( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_705_ceil)
HXDLIN( 705)		this1->x = ( (Float)(::Math_obj::ceil(this1->x)) );
HXDLIN( 705)		this1->y = ( (Float)(::Math_obj::ceil(this1->y)) );
HXDLIN( 705)		this1->width = ( (Float)(::Math_obj::ceil(this1->width)) );
HXDLIN( 705)		this1->height = ( (Float)(::Math_obj::ceil(this1->height)) );
HXDLIN( 705)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,ceil,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::round( ::flixel::math::FlxRect this1){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_706_round)
HXDLIN( 706)		this1->x = ( (Float)(::Math_obj::round(this1->x)) );
HXDLIN( 706)		this1->y = ( (Float)(::Math_obj::round(this1->y)) );
HXDLIN( 706)		this1->width = ( (Float)(::Math_obj::round(this1->width)) );
HXDLIN( 706)		this1->height = ( (Float)(::Math_obj::round(this1->height)) );
HXDLIN( 706)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxReadOnlyRect_Impl__obj,round,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::fromTwoPoints( ::flixel::math::FlxRect this1, ::flixel::math::FlxBasePoint p1, ::flixel::math::FlxBasePoint p2){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_707_fromTwoPoints)
HXDLIN( 707)		Float minX = ::Math_obj::min(p1->x,p2->x);
HXDLIN( 707)		Float minY = ::Math_obj::min(p1->y,p2->y);
HXDLIN( 707)		Float maxX = ::Math_obj::max(p1->x,p2->x);
HXDLIN( 707)		Float maxY = ::Math_obj::max(p1->y,p2->y);
HXDLIN( 707)		{
HXDLIN( 707)			 ::flixel::math::FlxBasePoint _this = p1;
HXDLIN( 707)			if (_this->_weak) {
HXDLIN( 707)				_this->put();
            			}
            		}
HXDLIN( 707)		{
HXDLIN( 707)			 ::flixel::math::FlxBasePoint _this1 = p2;
HXDLIN( 707)			if (_this1->_weak) {
HXDLIN( 707)				_this1->put();
            			}
            		}
HXDLIN( 707)		this1->x = minX;
HXDLIN( 707)		this1->y = minY;
HXDLIN( 707)		this1->width = (maxX - minX);
HXDLIN( 707)		this1->height = (maxY - minY);
HXDLIN( 707)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyRect_Impl__obj,fromTwoPoints,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::unionWithPoint( ::flixel::math::FlxRect this1, ::flixel::math::FlxBasePoint p){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_708_unionWithPoint)
HXDLIN( 708)		Float minX = ::Math_obj::min(this1->x,p->x);
HXDLIN( 708)		Float minY = ::Math_obj::min(this1->y,p->y);
HXDLIN( 708)		Float maxX = ::Math_obj::max((this1->x + this1->width),p->x);
HXDLIN( 708)		Float maxY = ::Math_obj::max((this1->y + this1->height),p->y);
HXDLIN( 708)		{
HXDLIN( 708)			 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 708)			if (_this->_weak) {
HXDLIN( 708)				_this->put();
            			}
            		}
HXDLIN( 708)		this1->x = minX;
HXDLIN( 708)		this1->y = minY;
HXDLIN( 708)		this1->width = (maxX - minX);
HXDLIN( 708)		this1->height = (maxY - minY);
HXDLIN( 708)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyRect_Impl__obj,unionWithPoint,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::offset( ::flixel::math::FlxRect this1,Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_709_offset)
HXDLIN( 709)		 ::flixel::math::FlxRect this2 = this1;
HXDLIN( 709)		this2->x = (this2->x + dx);
HXDLIN( 709)		 ::flixel::math::FlxRect this3 = this1;
HXDLIN( 709)		this3->y = (this3->y + dy);
HXDLIN( 709)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxReadOnlyRect_Impl__obj,offset,return )

 ::flixel::math::FlxRect FlxReadOnlyRect_Impl__obj::clipTo( ::flixel::math::FlxRect this1, ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_b32acd12631eeda1_710_clipTo)
HXDLIN( 710)		return this1->clipTo(rect);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxReadOnlyRect_Impl__obj,clipTo,return )


FlxReadOnlyRect_Impl__obj::FlxReadOnlyRect_Impl__obj()
{
}

bool FlxReadOnlyRect_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"weak") ) { outValue = weak_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ceil") ) { outValue = ceil_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { outValue = get_x_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_y") ) { outValue = get_y_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"union") ) { outValue = _hx_union_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floor") ) { outValue = floor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"setAbs") ) { outValue = setAbs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"offset") ) { outValue = offset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clipTo") ) { outValue = clipTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_top") ) { outValue = get_top_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"destroy") ) { outValue = destroy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setSize") ) { outValue = setSize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_pool") ) { outValue = get_pool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_left") ) { outValue = get_left_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { outValue = copyFrom_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { outValue = get_width_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_right") ) { outValue = get_right_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setBounds") ) { outValue = setBounds_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { outValue = get_height_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { outValue = get_bottom_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_isEmpty") ) { outValue = get_isEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPosition") ) { outValue = setPosition_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setBoundsAbs") ) { outValue = setBoundsAbs_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromFlash") ) { outValue = copyFromFlash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromTwoPoints") ) { outValue = fromTwoPoints_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"unionWithPoint") ) { outValue = unionWithPoint_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxReadOnlyRect_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxReadOnlyRect_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxReadOnlyRect_Impl__obj::__mClass;

static ::String FlxReadOnlyRect_Impl__obj_sStaticFields[] = {
	HX_("get_pool",65,3c,17,ca),
	HX_("get",96,80,4e,00),
	HX_("weak",78,5c,f5,4e),
	HX_("get_x",4f,a5,60,91),
	HX_("get_y",50,a5,60,91),
	HX_("get_width",5d,12,0c,0e),
	HX_("get_height",b0,77,d3,f2),
	HX_("get_left",90,c3,6a,c7),
	HX_("get_right",33,68,0d,2d),
	HX_("get_top",2c,2f,cd,26),
	HX_("get_bottom",b4,56,00,56),
	HX_("get_isEmpty",5a,3e,5a,92),
	HX_("destroy",fa,2c,86,24),
	HX_("setSize",83,e1,d7,11),
	HX_("setPosition",6b,6a,5b,fb),
	HX_("set",a2,9b,57,00),
	HX_("setBounds",b7,fb,c4,c5),
	HX_("setAbs",f0,7d,61,6f),
	HX_("setBoundsAbs",fb,98,71,8e),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("copyFromFlash",71,a5,da,18),
	HX_("union",0f,65,e7,a6),
	HX_("floor",cc,d1,96,02),
	HX_("ceil",05,1f,bd,41),
	HX_("round",4e,f8,65,ed),
	HX_("fromTwoPoints",05,e2,50,d3),
	HX_("unionWithPoint",5b,f9,30,56),
	HX_("offset",93,97,3f,60),
	HX_("clipTo",6b,0c,58,0a),
	::String(null())
};

void FlxReadOnlyRect_Impl__obj::__register()
{
	FlxReadOnlyRect_Impl__obj _hx_dummy;
	FlxReadOnlyRect_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.math._FlxRect.FlxReadOnlyRect_Impl_",75,7b,4f,cc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxReadOnlyRect_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxReadOnlyRect_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxReadOnlyRect_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxReadOnlyRect_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxReadOnlyRect_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace math
} // end namespace _FlxRect
