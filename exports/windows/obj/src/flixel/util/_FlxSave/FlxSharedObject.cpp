// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_LoadFailureType
#include <flixel/util/LoadFailureType.h>
#endif
#ifndef INCLUDED_flixel_util_LoadResult
#include <flixel/util/LoadResult.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSave_FlxSharedObject
#include <flixel/util/_FlxSave/FlxSharedObject.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_SharedObject
#include <openfl/net/SharedObject.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6b726de06a800834_429_new,"flixel.util._FlxSave.FlxSharedObject","new",0x75b61ac4,"flixel.util._FlxSave.FlxSharedObject.new","flixel/util/FlxSave.hx",429,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_680_flush,"flixel.util._FlxSave.FlxSharedObject","flush",0x4cf00e28,"flixel.util._FlxSave.FlxSharedObject.flush","flixel/util/FlxSave.hx",680,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_709_clear,"flixel.util._FlxSave.FlxSharedObject","clear",0x92b01cf1,"flixel.util._FlxSave.FlxSharedObject.clear","flixel/util/FlxSave.hx",709,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_456_init,"flixel.util._FlxSave.FlxSharedObject","init",0x865a082c,"flixel.util._FlxSave.FlxSharedObject.init","flixel/util/FlxSave.hx",456,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_468_onExit,"flixel.util._FlxSave.FlxSharedObject","onExit",0xa5694bf9,"flixel.util._FlxSave.FlxSharedObject.onExit","flixel/util/FlxSave.hx",468,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_476_getDefaultLocalPath,"flixel.util._FlxSave.FlxSharedObject","getDefaultLocalPath",0x05078ec9,"flixel.util._FlxSave.FlxSharedObject.getDefaultLocalPath","flixel/util/FlxSave.hx",476,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_488_getLocal,"flixel.util._FlxSave.FlxSharedObject","getLocal",0x04896411,"flixel.util._FlxSave.FlxSharedObject.getLocal","flixel/util/FlxSave.hx",488,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_598_getData,"flixel.util._FlxSave.FlxSharedObject","getData",0x1e475244,"flixel.util._FlxSave.FlxSharedObject.getData","flixel/util/FlxSave.hx",598,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_612_getPath,"flixel.util._FlxSave.FlxSharedObject","getPath",0x2635e1bf,"flixel.util._FlxSave.FlxSharedObject.getPath","flixel/util/FlxSave.hx",612,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_654_exists,"flixel.util._FlxSave.FlxSharedObject","exists",0x7fa169f8,"flixel.util._FlxSave.FlxSharedObject.exists","flixel/util/FlxSave.hx",654,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_663_newExists,"flixel.util._FlxSave.FlxSharedObject","newExists",0x9b2917c0,"flixel.util._FlxSave.FlxSharedObject.newExists","flixel/util/FlxSave.hx",663,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_668_getLegacyPath,"flixel.util._FlxSave.FlxSharedObject","getLegacyPath",0x55c9f028,"flixel.util._FlxSave.FlxSharedObject.getLegacyPath","flixel/util/FlxSave.hx",668,0xc43cd0a9)
HX_LOCAL_STACK_FRAME(_hx_pos_6b726de06a800834_676_legacyExists,"flixel.util._FlxSave.FlxSharedObject","legacyExists",0x0ca8b221,"flixel.util._FlxSave.FlxSharedObject.legacyExists","flixel/util/FlxSave.hx",676,0xc43cd0a9)
namespace flixel{
namespace util{
namespace _FlxSave{

void FlxSharedObject_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_429_new)
HXDLIN( 429)		super::__construct();
            	}

Dynamic FlxSharedObject_obj::__CreateEmpty() { return new FlxSharedObject_obj; }

void *FlxSharedObject_obj::_hx_vtable = 0;

Dynamic FlxSharedObject_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxSharedObject_obj > _hx_result = new FlxSharedObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxSharedObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x39ea9431) {
		if (inClassId<=(int)0x0c89e854) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
		} else {
			return inClassId==(int)0x39ea9431;
		}
	} else {
		return inClassId==(int)0x66b864e8;
	}
}

 ::Dynamic FlxSharedObject_obj::flush(::hx::Null< int >  __o_minDiskSpace){
            		int minDiskSpace = __o_minDiskSpace.Default(0);
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_680_flush)
HXLINE( 681)		if ((::Reflect_obj::fields(this->data)->length == 0)) {
HXLINE( 683)			return 0;
            		}
HXLINE( 686)		::String encodedData = ::haxe::Serializer_obj::run(this->data);
HXLINE( 688)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 690)			::String path = ::flixel::util::_FlxSave::FlxSharedObject_obj::getPath(this->_hx___localPath,this->_hx___name);
HXLINE( 691)			::String directory = ::haxe::io::Path_obj::directory(path);
HXLINE( 693)			if (!(::sys::FileSystem_obj::exists(directory))) {
HXLINE( 694)				::openfl::net::SharedObject_obj::_hx___mkdir(directory);
            			}
HXLINE( 696)			 ::sys::io::FileOutput output = ::sys::io::File_obj::write(path,false);
HXLINE( 697)			output->writeString(encodedData,null());
HXLINE( 698)			output->close();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 700)				{
HXLINE( 700)					null();
            				}
HXLINE( 702)				return 1;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 705)		return 0;
            	}


void FlxSharedObject_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_709_clear)
HXLINE( 710)		this->data =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE( 712)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 714)			::String path = ::flixel::util::_FlxSave::FlxSharedObject_obj::getPath(this->_hx___localPath,this->_hx___name);
HXLINE( 716)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 717)				::sys::FileSystem_obj::deleteFile(path);
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 719)				{
HXLINE( 719)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


 ::haxe::ds::StringMap FlxSharedObject_obj::all;

void FlxSharedObject_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_6b726de06a800834_456_init)
HXDLIN( 456)		if (::hx::IsNull( ::flixel::util::_FlxSave::FlxSharedObject_obj::all )) {
HXLINE( 458)			::flixel::util::_FlxSave::FlxSharedObject_obj::all =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 460)			 ::lime::app::Application app = ::lime::app::Application_obj::current;
HXLINE( 461)			if (::hx::IsNotNull( app )) {
HXLINE( 462)				app->onExit->add(::flixel::util::_FlxSave::FlxSharedObject_obj::onExit_dyn(),null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxSharedObject_obj,init,(void))

void FlxSharedObject_obj::onExit(int _){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_468_onExit)
HXDLIN( 468)		 ::Dynamic sharedObject = ::flixel::util::_FlxSave::FlxSharedObject_obj::all->iterator();
HXDLIN( 468)		while(( (bool)(sharedObject->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 468)			 ::flixel::util::_FlxSave::FlxSharedObject sharedObject1 = ( ( ::flixel::util::_FlxSave::FlxSharedObject)(sharedObject->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 469)			sharedObject1->flush(null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxSharedObject_obj,onExit,(void))

::String FlxSharedObject_obj::getDefaultLocalPath(){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_476_getDefaultLocalPath)
HXLINE( 477)		 ::haxe::ds::StringMap meta = ::openfl::Lib_obj::get_current()->stage->application->meta;
HXLINE( 478)		::String path = meta->get_string(HX_("company",3d,15,69,83));
HXLINE( 479)		bool _hx_tmp;
HXDLIN( 479)		if (::hx::IsNotNull( path )) {
HXLINE( 479)			_hx_tmp = (path == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 479)			_hx_tmp = true;
            		}
HXDLIN( 479)		if (_hx_tmp) {
HXLINE( 480)			path = HX_("HaxeFlixel",42,8f,0c,ac);
            		}
            		else {
HXLINE( 482)			path = ::flixel::util::FlxSave_obj::validate(path);
            		}
HXLINE( 484)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxSharedObject_obj,getDefaultLocalPath,return )

 ::flixel::util::LoadResult FlxSharedObject_obj::getLocal(::String name,::String localPath){
            	HX_GC_STACKFRAME(&_hx_pos_6b726de06a800834_488_getLocal)
HXLINE( 489)		bool _hx_tmp;
HXDLIN( 489)		if (::hx::IsNotNull( name )) {
HXLINE( 489)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 489)			_hx_tmp = true;
            		}
HXDLIN( 489)		if (_hx_tmp) {
HXLINE( 490)			return ::flixel::util::LoadResult_obj::FAILURE(::flixel::util::LoadFailureType_obj::INVALID_NAME(name,null()),null());
            		}
HXLINE( 492)		if (::hx::IsNull( localPath )) {
HXLINE( 493)			localPath = HX_("",00,00,00,00);
            		}
HXLINE( 495)		::String id = ((localPath + HX_("/",2f,00,00,00)) + name);
HXLINE( 497)		::flixel::util::_FlxSave::FlxSharedObject_obj::init();
HXLINE( 499)		if (!(::flixel::util::_FlxSave::FlxSharedObject_obj::all->exists(id))) {
HXLINE( 501)			::String encodedData = null();
HXLINE( 503)			if ( ::EReg_obj::__alloc( HX_CTX ,HX_("(?:^|/)\\.\\./",f0,42,36,d5),HX_("",00,00,00,00))->match(localPath)) {
HXLINE( 504)				return ::flixel::util::LoadResult_obj::FAILURE(::flixel::util::LoadFailureType_obj::INVALID_PATH(localPath,HX_("../ not allowed in localPath",2b,03,b2,ea)),null());
            			}
HXLINE( 506)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 508)				encodedData = ::flixel::util::_FlxSave::FlxSharedObject_obj::getData(name,localPath);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 510)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 512)					return ::flixel::util::LoadResult_obj::FAILURE(::flixel::util::LoadFailureType_obj::IO(e),null());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 515)			if ((localPath == HX_("",00,00,00,00))) {
HXLINE( 516)				localPath = ::flixel::util::_FlxSave::FlxSharedObject_obj::getDefaultLocalPath();
            			}
HXLINE( 518)			 ::flixel::util::_FlxSave::FlxSharedObject sharedObject =  ::flixel::util::_FlxSave::FlxSharedObject_obj::__alloc( HX_CTX );
HXLINE( 519)			sharedObject->data =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE( 520)			sharedObject->_hx___localPath = localPath;
HXLINE( 521)			sharedObject->_hx___name = name;
HXLINE( 523)			bool _hx_tmp1;
HXDLIN( 523)			if (::hx::IsNotNull( encodedData )) {
HXLINE( 523)				_hx_tmp1 = (encodedData != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 523)				_hx_tmp1 = false;
            			}
HXDLIN( 523)			if (_hx_tmp1) {
HXLINE( 525)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 527)					 ::haxe::Unserializer unserializer =  ::haxe::Unserializer_obj::__alloc( HX_CTX ,encodedData);
HXLINE( 528)					 ::Dynamic resolver =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("resolveClass",ac,bd,dd,80),::flixel::util::FlxSave_obj::resolveFlixelClasses_dyn())
            						->setFixed(1,HX_("resolveEnum",0d,90,51,de),::Type_obj::resolveEnum_dyn()));
HXLINE( 529)					unserializer->setResolver(resolver);
HXLINE( 530)					sharedObject->data = unserializer->unserialize();
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g1 = _hx_e;
HXLINE( 532)						 ::haxe::Exception e1 = ::haxe::Exception_obj::caught(_g1);
HXLINE( 534)						::flixel::util::_FlxSave::FlxSharedObject_obj::all->set(id,sharedObject);
HXLINE( 535)						return ::flixel::util::LoadResult_obj::FAILURE(::flixel::util::LoadFailureType_obj::PARSING(encodedData,e1),sharedObject);
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE( 539)			::flixel::util::_FlxSave::FlxSharedObject_obj::all->set(id,sharedObject);
            		}
HXLINE( 542)		return ::flixel::util::LoadResult_obj::SUCCESS(::flixel::util::_FlxSave::FlxSharedObject_obj::all->get(id));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSharedObject_obj,getLocal,return )

::String FlxSharedObject_obj::getData(::String name,::String localPath){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_598_getData)
HXLINE( 599)		::String path = ::flixel::util::_FlxSave::FlxSharedObject_obj::getPath(localPath,name);
HXLINE( 600)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 601)			return ::sys::io::File_obj::getContent(path);
            		}
HXLINE( 604)		path = ::openfl::net::SharedObject_obj::_hx___getPath(localPath,name);
HXLINE( 605)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 606)			return ::sys::io::File_obj::getContent(path);
            		}
HXLINE( 608)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSharedObject_obj,getData,return )

::String FlxSharedObject_obj::getPath(::String localPath,::String name){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_612_getPath)
HXLINE( 614)		if ((localPath == HX_("",00,00,00,00))) {
HXLINE( 615)			localPath = ::flixel::util::_FlxSave::FlxSharedObject_obj::getDefaultLocalPath();
            		}
HXLINE( 617)		::String directory = ::lime::_hx_system::System_obj::get_applicationStorageDirectory();
HXLINE( 618)		::String path = (::haxe::io::Path_obj::normalize((((HX_("",00,00,00,00) + directory) + HX_("/../../../",80,8e,9b,1e)) + localPath)) + HX_("/",2f,00,00,00));
HXLINE( 620)		name = ::StringTools_obj::replace(name,HX_("//",20,29,00,00),HX_("/",2f,00,00,00));
HXLINE( 621)		name = ::StringTools_obj::replace(name,HX_("//",20,29,00,00),HX_("/",2f,00,00,00));
HXLINE( 623)		if (::StringTools_obj::startsWith(name,HX_("/",2f,00,00,00))) {
HXLINE( 625)			name = name.substr(1,null());
            		}
HXLINE( 628)		if (::StringTools_obj::endsWith(name,HX_("/",2f,00,00,00))) {
HXLINE( 630)			name = name.substring(0,(name.length - 1));
            		}
HXLINE( 633)		if ((name.indexOf(HX_("/",2f,00,00,00),null()) > -1)) {
HXLINE( 635)			::Array< ::String > split = name.split(HX_("/",2f,00,00,00));
HXLINE( 636)			name = HX_("",00,00,00,00);
HXLINE( 638)			{
HXLINE( 638)				int _g = 0;
HXDLIN( 638)				int _g1 = (split->length - 1);
HXDLIN( 638)				while((_g < _g1)){
HXLINE( 638)					_g = (_g + 1);
HXDLIN( 638)					int i = (_g - 1);
HXLINE( 640)					name = (name + ((HX_("#",23,00,00,00) + split->__get(i)) + HX_("/",2f,00,00,00)));
            				}
            			}
HXLINE( 643)			name = (name + split->__get((split->length - 1)));
            		}
HXLINE( 646)		return ((path + name) + HX_(".sol",e2,74,bf,1e));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSharedObject_obj,getPath,return )

bool FlxSharedObject_obj::exists(::String name,::String localPath){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_654_exists)
HXDLIN( 654)		if (!(::sys::FileSystem_obj::exists(::flixel::util::_FlxSave::FlxSharedObject_obj::getPath(name,localPath)))) {
HXLINE( 655)			return ::sys::FileSystem_obj::exists(::openfl::net::SharedObject_obj::_hx___getPath(name,localPath));
            		}
            		else {
HXDLIN( 654)			return true;
            		}
HXDLIN( 654)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSharedObject_obj,exists,return )

bool FlxSharedObject_obj::newExists(::String name,::String localPath){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_663_newExists)
HXDLIN( 663)		return ::sys::FileSystem_obj::exists(::flixel::util::_FlxSave::FlxSharedObject_obj::getPath(localPath,name));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSharedObject_obj,newExists,return )

::String FlxSharedObject_obj::getLegacyPath(::String localPath,::String name){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_668_getLegacyPath)
HXDLIN( 668)		return ::openfl::net::SharedObject_obj::_hx___getPath(localPath,name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSharedObject_obj,getLegacyPath,return )

bool FlxSharedObject_obj::legacyExists(::String name,::String localPath){
            	HX_STACKFRAME(&_hx_pos_6b726de06a800834_676_legacyExists)
HXDLIN( 676)		return ::sys::FileSystem_obj::exists(::openfl::net::SharedObject_obj::_hx___getPath(localPath,name));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxSharedObject_obj,legacyExists,return )


::hx::ObjectPtr< FlxSharedObject_obj > FlxSharedObject_obj::__new() {
	::hx::ObjectPtr< FlxSharedObject_obj > __this = new FlxSharedObject_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxSharedObject_obj > FlxSharedObject_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxSharedObject_obj *__this = (FlxSharedObject_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxSharedObject_obj), true, "flixel.util._FlxSave.FlxSharedObject"));
	*(void **)__this = FlxSharedObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxSharedObject_obj::FlxSharedObject_obj()
{
}

::hx::Val FlxSharedObject_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"flush") ) { return ::hx::Val( flush_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxSharedObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { outValue = ( all ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onExit") ) { outValue = onExit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getData") ) { outValue = getData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getLocal") ) { outValue = getLocal_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"newExists") ) { outValue = newExists_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"legacyExists") ) { outValue = legacyExists_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getLegacyPath") ) { outValue = getLegacyPath_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getDefaultLocalPath") ) { outValue = getDefaultLocalPath_dyn(); return true; }
	}
	return false;
}

bool FlxSharedObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { all=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxSharedObject_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxSharedObject_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FlxSharedObject_obj::all,HX_("all",21,f9,49,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxSharedObject_obj_sMemberFields[] = {
	HX_("flush",c4,62,9b,02),
	HX_("clear",8d,71,5b,48),
	::String(null()) };

static void FlxSharedObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSharedObject_obj::all,"all");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSharedObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSharedObject_obj::all,"all");
};

#endif

::hx::Class FlxSharedObject_obj::__mClass;

static ::String FlxSharedObject_obj_sStaticFields[] = {
	HX_("all",21,f9,49,00),
	HX_("init",10,3b,bb,45),
	HX_("onExit",dd,ff,a7,e5),
	HX_("getDefaultLocalPath",65,3c,b3,89),
	HX_("getLocal",f5,d8,c7,d8),
	HX_("getData",e0,05,e6,14),
	HX_("getPath",5b,95,d4,1c),
	HX_("exists",dc,1d,e0,bf),
	HX_("newExists",5c,ea,90,7d),
	HX_("getLegacyPath",c4,40,05,f0),
	HX_("legacyExists",05,69,8d,9a),
	::String(null())
};

void FlxSharedObject_obj::__register()
{
	FlxSharedObject_obj _hx_dummy;
	FlxSharedObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.util._FlxSave.FlxSharedObject",d2,a8,60,eb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxSharedObject_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxSharedObject_obj::__SetStatic;
	__mClass->mMarkFunc = FlxSharedObject_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxSharedObject_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxSharedObject_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxSharedObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSharedObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSharedObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSharedObject_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace util
} // end namespace _FlxSave
