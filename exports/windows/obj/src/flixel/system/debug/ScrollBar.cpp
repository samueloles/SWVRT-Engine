// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_system_debug_ScrollBar
#include <flixel/system/debug/ScrollBar.h>
#endif
#ifndef INCLUDED_flixel_system_debug_ScrollSprite
#include <flixel/system/debug/ScrollSprite.h>
#endif
#ifndef INCLUDED_flixel_system_debug__ScrollSprite_ScrollState
#include <flixel/system/debug/_ScrollSprite/ScrollState.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_143_new,"flixel.system.debug.ScrollBar","new",0xc82f0610,"flixel.system.debug.ScrollBar.new","flixel/system/debug/ScrollSprite.hx",143,0xb969d163)
HX_DEFINE_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_133_new,"flixel.system.debug.ScrollBar","new",0xc82f0610,"flixel.system.debug.ScrollBar.new","flixel/system/debug/ScrollSprite.hx",133,0xb969d163)
HX_DEFINE_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_101_new,"flixel.system.debug.ScrollBar","new",0xc82f0610,"flixel.system.debug.ScrollBar.new","flixel/system/debug/ScrollSprite.hx",101,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_157_onBgMouseDown,"flixel.system.debug.ScrollBar","onBgMouseDown",0x93542973,"flixel.system.debug.ScrollBar.onBgMouseDown","flixel/system/debug/ScrollSprite.hx",157,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_167_onHandleMouse,"flixel.system.debug.ScrollBar","onHandleMouse",0x0e52102e,"flixel.system.debug.ScrollBar.onHandleMouse","flixel/system/debug/ScrollSprite.hx",167,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_180_onMouseMove,"flixel.system.debug.ScrollBar","onMouseMove",0xb288e467,"flixel.system.debug.ScrollBar.onMouseMove","flixel/system/debug/ScrollSprite.hx",180,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_185_getLocalY,"flixel.system.debug.ScrollBar","getLocalY",0xfc889774,"flixel.system.debug.ScrollBar.getLocalY","flixel/system/debug/ScrollSprite.hx",185,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_189_mouseMoveHelper,"flixel.system.debug.ScrollBar","mouseMoveHelper",0xd7dd0f94,"flixel.system.debug.ScrollBar.mouseMoveHelper","flixel/system/debug/ScrollSprite.hx",189,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_204_onHandleMove,"flixel.system.debug.ScrollBar","onHandleMove",0xc212bd28,"flixel.system.debug.ScrollBar.onHandleMove","flixel/system/debug/ScrollSprite.hx",204,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_215_resize,"flixel.system.debug.ScrollBar","resize",0xd824d244,"flixel.system.debug.ScrollBar.resize","flixel/system/debug/ScrollSprite.hx",215,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_222_onViewChange,"flixel.system.debug.ScrollBar","onViewChange",0x53cbc804,"flixel.system.debug.ScrollBar.onViewChange","flixel/system/debug/ScrollSprite.hx",222,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_ec787f9ccc50a6a0_103_boot,"flixel.system.debug.ScrollBar","boot",0x590f4882,"flixel.system.debug.ScrollBar.boot","flixel/system/debug/ScrollSprite.hx",103,0xb969d163)
namespace flixel{
namespace _hx_system{
namespace debug{

void ScrollBar_obj::__construct( ::flixel::_hx_system::debug::ScrollSprite target){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::flixel::_hx_system::debug::ScrollBar,_gthis,::Array< ::Dynamic>,onAdded) HXARGC(1)
            		void _hx_run( ::openfl::events::Event _){
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::flixel::_hx_system::debug::ScrollBar,_gthis, ::openfl::display::Stage,stage,::Array< ::Dynamic>,onRemoved) HXARGC(1)
            			void _hx_run( ::openfl::events::Event _){
            				HX_GC_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_143_new)
HXLINE( 144)				_gthis->removeEventListener(HX_("removedFromStage",34,21,76,ba),onRemoved->__get(0),null());
HXLINE( 146)				_gthis->bg->removeEventListener(HX_("mouseDown",27,b1,c2,ee),_gthis->onBgMouseDown_dyn(),null());
HXLINE( 147)				_gthis->handle->removeEventListener(HX_("mouseDown",27,b1,c2,ee),_gthis->onHandleMouse_dyn(),null());
HXLINE( 148)				stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),_gthis->onMouseMove_dyn(),null());
HXLINE( 149)				stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),_gthis->onHandleMouse_dyn(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_133_new)
HXLINE( 134)			_gthis->removeEventListener(HX_("addedToStage",63,22,55,0c),onAdded->__get(0),null());
HXLINE( 135)			 ::openfl::display::Stage stage = _gthis->stage;
HXLINE( 137)			_gthis->bg->addEventListener(HX_("mouseDown",27,b1,c2,ee),_gthis->onBgMouseDown_dyn(),null(),null(),null());
HXLINE( 138)			_gthis->handle->addEventListener(HX_("mouseDown",27,b1,c2,ee),_gthis->onHandleMouse_dyn(),null(),null(),null());
HXLINE( 139)			stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),_gthis->onMouseMove_dyn(),null(),null(),null());
HXLINE( 140)			stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),_gthis->onHandleMouse_dyn(),null(),null(),null());
HXLINE( 142)			::Array< ::Dynamic> onRemoved = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 142)			onRemoved[0] =  ::Dynamic(new _hx_Closure_0(_gthis,stage,onRemoved));
HXLINE( 151)			_gthis->addEventListener(HX_("removedFromStage",34,21,76,ba),onRemoved->__get(0),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_101_new)
HXLINE( 110)		this->state = ::flixel::_hx_system::debug::_ScrollSprite::ScrollState_obj::IDLE_dyn();
HXLINE( 108)		this->bg =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 107)		this->handle =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 113)		 ::flixel::_hx_system::debug::ScrollBar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 114)		this->target = target;
HXLINE( 115)		super::__construct();
HXLINE( 117)		this->bg->mouseChildren = true;
HXLINE( 118)		this->bg->mouseEnabled = true;
HXLINE( 119)		this->bg->get_graphics()->beginFill(16777215,((Float)0.1));
HXLINE( 120)		this->bg->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(10) ),( (Float)(1) ));
HXLINE( 121)		this->bg->get_graphics()->endFill();
HXLINE( 122)		this->addChild(this->bg);
HXLINE( 124)		this->handle->mouseChildren = true;
HXLINE( 125)		this->handle->mouseEnabled = true;
HXLINE( 126)		this->handle->set_buttonMode(true);
HXLINE( 127)		this->handle->get_graphics()->beginFill(16777215,((Float)0.3));
HXLINE( 128)		this->handle->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(10) ),( (Float)(1) ));
HXLINE( 129)		this->handle->get_graphics()->endFill();
HXLINE( 130)		this->addChild(this->handle);
HXLINE( 132)		::Array< ::Dynamic> onAdded = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 132)		onAdded[0] =  ::Dynamic(new _hx_Closure_1(_gthis,onAdded));
HXLINE( 153)		this->addEventListener(HX_("addedToStage",63,22,55,0c),onAdded->__get(0),null(),null(),null());
            	}

Dynamic ScrollBar_obj::__CreateEmpty() { return new ScrollBar_obj; }

void *ScrollBar_obj::_hx_vtable = 0;

Dynamic ScrollBar_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScrollBar_obj > _hx_result = new ScrollBar_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ScrollBar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x16d115ea) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x16d115ea;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void ScrollBar_obj::onBgMouseDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_157_onBgMouseDown)
HXLINE( 158)		if (::hx::IsPointerNotEq( this->state,::flixel::_hx_system::debug::_ScrollSprite::ScrollState_obj::IDLE_dyn() )) {
HXLINE( 159)			HX_STACK_DO_THROW(HX_("expected state: IDLE",e3,7b,d4,5c));
            		}
HXLINE( 161)		this->state = ::flixel::_hx_system::debug::_ScrollSprite::ScrollState_obj::DRAG_BG_dyn();
HXLINE( 162)		this->mouseMoveHelper(e->stageY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollBar_obj,onBgMouseDown,(void))

void ScrollBar_obj::onHandleMouse( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_167_onHandleMouse)
HXDLIN( 167)		if ((e->type == HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 169)			if (::hx::IsPointerNotEq( this->state,::flixel::_hx_system::debug::_ScrollSprite::ScrollState_obj::IDLE_dyn() )) {
HXLINE( 170)				HX_STACK_DO_THROW(HX_("expected state: IDLE",e3,7b,d4,5c));
            			}
HXLINE( 172)			Float _hx_tmp = this->getLocalY(e->stageY);
HXDLIN( 172)			this->state = ::flixel::_hx_system::debug::_ScrollSprite::ScrollState_obj::DRAG_HANDLE((_hx_tmp - this->handle->get_y()));
            		}
            		else {
HXLINE( 175)			this->state = ::flixel::_hx_system::debug::_ScrollSprite::ScrollState_obj::IDLE_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollBar_obj,onHandleMouse,(void))

void ScrollBar_obj::onMouseMove( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_180_onMouseMove)
HXDLIN( 180)		this->mouseMoveHelper(e->stageY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollBar_obj,onMouseMove,(void))

Float ScrollBar_obj::getLocalY(Float stageY){
            	HX_GC_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_185_getLocalY)
HXDLIN( 185)		return this->globalToLocal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,stageY))->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollBar_obj,getLocalY,return )

void ScrollBar_obj::mouseMoveHelper(Float stageY){
            	HX_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_189_mouseMoveHelper)
HXLINE( 190)		Float localY = this->getLocalY(stageY);
HXLINE( 191)		{
HXLINE( 191)			 ::flixel::_hx_system::debug::_ScrollSprite::ScrollState _g = this->state;
HXDLIN( 191)			switch((int)(_g->_hx_getIndex())){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
HXLINE( 194)					Float offsetY = _g->_hx_getFloat(0);
HXDLIN( 194)					{
HXLINE( 195)						this->handle->set_y((localY - offsetY));
HXLINE( 196)						this->onHandleMove();
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 198)					 ::openfl::display::Sprite _hx_tmp = this->handle;
HXDLIN( 198)					_hx_tmp->set_y((localY - (this->handle->get_height() / ( (Float)(2) ))));
HXLINE( 199)					this->onHandleMove();
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollBar_obj,mouseMoveHelper,(void))

void ScrollBar_obj::onHandleMove(){
            	HX_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_204_onHandleMove)
HXLINE( 205)		if ((this->handle->get_y() < 0)) {
HXLINE( 206)			this->handle->set_y(( (Float)(0) ));
            		}
HXLINE( 208)		Float _hx_tmp = this->handle->get_y();
HXDLIN( 208)		Float _hx_tmp1 = this->bg->get_height();
HXDLIN( 208)		if ((_hx_tmp > (_hx_tmp1 - this->handle->get_height()))) {
HXLINE( 209)			 ::openfl::display::Sprite _hx_tmp2 = this->handle;
HXDLIN( 209)			Float _hx_tmp3 = this->bg->get_height();
HXDLIN( 209)			_hx_tmp2->set_y((_hx_tmp3 - this->handle->get_height()));
            		}
HXLINE( 211)		{
HXLINE( 211)			 ::flixel::_hx_system::debug::ScrollSprite _this = this->target;
HXDLIN( 211)			Float value = this->handle->get_y();
HXDLIN( 211)			Float value1 = this->bg->get_height();
HXDLIN( 211)			Float value2 = (value / (value1 - this->handle->get_height()));
HXDLIN( 211)			 ::flixel::_hx_system::debug::ScrollSprite _this1 = this->target;
HXDLIN( 211)			Float value3 = _this1->get_height();
HXDLIN( 211)			_this->scroll->y = (value2 * (value3 - _this1->scroll->height));
HXDLIN( 211)			_this->updateScroll();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollBar_obj,onHandleMove,(void))

void ScrollBar_obj::resize(Float height){
            	HX_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_215_resize)
HXLINE( 216)		this->bg->set_height(height);
HXLINE( 217)		 ::openfl::display::Sprite _hx_tmp = this->handle;
HXDLIN( 217)		Float _hx_tmp1 = (height / this->target->get_height());
HXDLIN( 217)		_hx_tmp->set_height((_hx_tmp1 * this->target->scroll->height));
HXLINE( 218)		this->onViewChange();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollBar_obj,resize,(void))

void ScrollBar_obj::onViewChange(){
            	HX_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_222_onViewChange)
HXLINE( 223)		bool _hx_tmp;
HXDLIN( 223)		 ::flixel::_hx_system::debug::ScrollSprite _this = this->target;
HXDLIN( 223)		Float _hx_tmp1 = _this->get_height();
HXDLIN( 223)		if (((_hx_tmp1 - _this->scroll->height) > 0)) {
HXLINE( 223)			 ::flixel::_hx_system::debug::ScrollSprite _this1 = this->target;
HXDLIN( 223)			Float _hx_tmp2 = _this1->get_height();
HXDLIN( 223)			Float _hx_tmp3 = (_hx_tmp2 - _this1->scroll->height);
HXDLIN( 223)			_hx_tmp = (_hx_tmp3 < this->target->get_height());
            		}
            		else {
HXLINE( 223)			_hx_tmp = false;
            		}
HXDLIN( 223)		this->mouseEnabled = (this->mouseChildren = this->set_visible(_hx_tmp));
HXLINE( 224)		 ::openfl::display::Sprite _hx_tmp4 = this->handle;
HXDLIN( 224)		Float _hx_tmp5 = this->target->scroll->y;
HXDLIN( 224)		 ::flixel::_hx_system::debug::ScrollSprite _this2 = this->target;
HXDLIN( 224)		Float _hx_tmp6 = _this2->get_height();
HXDLIN( 224)		Float _hx_tmp7 = (_hx_tmp5 / (_hx_tmp6 - _this2->scroll->height));
HXDLIN( 224)		Float _hx_tmp8 = this->bg->get_height();
HXDLIN( 224)		_hx_tmp4->set_y((_hx_tmp7 * (_hx_tmp8 - this->handle->get_height())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollBar_obj,onViewChange,(void))

int ScrollBar_obj::WIDTH;


::hx::ObjectPtr< ScrollBar_obj > ScrollBar_obj::__new( ::flixel::_hx_system::debug::ScrollSprite target) {
	::hx::ObjectPtr< ScrollBar_obj > __this = new ScrollBar_obj();
	__this->__construct(target);
	return __this;
}

::hx::ObjectPtr< ScrollBar_obj > ScrollBar_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::_hx_system::debug::ScrollSprite target) {
	ScrollBar_obj *__this = (ScrollBar_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScrollBar_obj), true, "flixel.system.debug.ScrollBar"));
	*(void **)__this = ScrollBar_obj::_hx_vtable;
	__this->__construct(target);
	return __this;
}

ScrollBar_obj::ScrollBar_obj()
{
}

void ScrollBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScrollBar);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(state,"state");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ScrollBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(state,"state");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ScrollBar_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return ::hx::Val( state ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"handle") ) { return ::hx::Val( handle ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getLocalY") ) { return ::hx::Val( getLocalY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return ::hx::Val( onMouseMove_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onHandleMove") ) { return ::hx::Val( onHandleMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onViewChange") ) { return ::hx::Val( onViewChange_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onBgMouseDown") ) { return ::hx::Val( onBgMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onHandleMouse") ) { return ::hx::Val( onHandleMouse_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mouseMoveHelper") ) { return ::hx::Val( mouseMoveHelper_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScrollBar_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::flixel::_hx_system::debug::_ScrollSprite::ScrollState >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::flixel::_hx_system::debug::ScrollSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScrollBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("handle",a8,83,fd,b7));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("state",11,76,0b,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScrollBar_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::_hx_system::debug::ScrollSprite */ ,(int)offsetof(ScrollBar_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(ScrollBar_obj,handle),HX_("handle",a8,83,fd,b7)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(ScrollBar_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::_hx_system::debug::_ScrollSprite::ScrollState */ ,(int)offsetof(ScrollBar_obj,state),HX_("state",11,76,0b,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ScrollBar_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &ScrollBar_obj::WIDTH,HX_("WIDTH",e6,ed,50,48)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ScrollBar_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	HX_("handle",a8,83,fd,b7),
	HX_("bg",c5,55,00,00),
	HX_("state",11,76,0b,84),
	HX_("onBgMouseDown",c3,f7,9a,a6),
	HX_("onHandleMouse",7e,de,98,21),
	HX_("onMouseMove",b7,7e,f8,16),
	HX_("getLocalY",c4,fd,15,d6),
	HX_("mouseMoveHelper",e4,11,30,65),
	HX_("onHandleMove",d8,28,4a,3f),
	HX_("resize",f4,59,7b,08),
	HX_("onViewChange",b4,33,03,d1),
	::String(null()) };

static void ScrollBar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ScrollBar_obj::WIDTH,"WIDTH");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ScrollBar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ScrollBar_obj::WIDTH,"WIDTH");
};

#endif

::hx::Class ScrollBar_obj::__mClass;

static ::String ScrollBar_obj_sStaticFields[] = {
	HX_("WIDTH",e6,ed,50,48),
	::String(null())
};

void ScrollBar_obj::__register()
{
	ScrollBar_obj _hx_dummy;
	ScrollBar_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.ScrollBar",1e,fe,16,59);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ScrollBar_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ScrollBar_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScrollBar_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScrollBar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ScrollBar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScrollBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScrollBar_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ScrollBar_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ec787f9ccc50a6a0_103_boot)
HXDLIN( 103)		WIDTH = 10;
            	}
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
