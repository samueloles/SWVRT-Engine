// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser
#include <flixel/system/debug/interaction/tools/Eraser.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_741757cec8ede88f_15_new,"flixel.system.debug.interaction.tools.Eraser","new",0xafc41bf5,"flixel.system.debug.interaction.tools.Eraser.new","flixel/system/debug/interaction/tools/Eraser.hx",15,0xa546bf98)
HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_18_init,"flixel.system.debug.interaction.tools.Eraser","init",0x188d11db,"flixel.system.debug.interaction.tools.Eraser.init","flixel/system/debug/interaction/tools/Eraser.hx",18,0xa546bf98)
HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_26_update,"flixel.system.debug.interaction.tools.Eraser","update",0x1312e594,"flixel.system.debug.interaction.tools.Eraser.update","flixel/system/debug/interaction/tools/Eraser.hx",26,0xa546bf98)
HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_31_activate,"flixel.system.debug.interaction.tools.Eraser","activate",0x9778b3fe,"flixel.system.debug.interaction.tools.Eraser.activate","flixel/system/debug/interaction/tools/Eraser.hx",31,0xa546bf98)
HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_39_doDeletion,"flixel.system.debug.interaction.tools.Eraser","doDeletion",0x007d62c4,"flixel.system.debug.interaction.tools.Eraser.doDeletion","flixel/system/debug/interaction/tools/Eraser.hx",39,0xa546bf98)
HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_50_findAndDelete,"flixel.system.debug.interaction.tools.Eraser","findAndDelete",0xc5f7a2be,"flixel.system.debug.interaction.tools.Eraser.findAndDelete","flixel/system/debug/interaction/tools/Eraser.hx",50,0xa546bf98)
HX_LOCAL_STACK_FRAME(_hx_pos_741757cec8ede88f_70_removeFromMemory,"flixel.system.debug.interaction.tools.Eraser","removeFromMemory",0x828b48ba,"flixel.system.debug.interaction.tools.Eraser.removeFromMemory","flixel/system/debug/interaction/tools/Eraser.hx",70,0xa546bf98)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{
namespace tools{

void Eraser_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_741757cec8ede88f_15_new)
HXDLIN(  15)		super::__construct();
            	}

Dynamic Eraser_obj::__CreateEmpty() { return new Eraser_obj; }

void *Eraser_obj::_hx_vtable = 0;

Dynamic Eraser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Eraser_obj > _hx_result = new Eraser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Eraser_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1361d5a9 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x717bcd95;
		}
	}
}

 ::flixel::_hx_system::debug::interaction::tools::Tool Eraser_obj::init( ::flixel::_hx_system::debug::interaction::Interaction Brain){
            	HX_STACKFRAME(&_hx_pos_741757cec8ede88f_18_init)
HXLINE(  19)		this->super::init(Brain);
HXLINE(  20)		this->_name = HX_("Eraser",ec,54,c3,7a);
HXLINE(  21)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


void Eraser_obj::update(){
            	HX_STACKFRAME(&_hx_pos_741757cec8ede88f_26_update)
HXDLIN(  26)		if (this->_brain->keyJustPressed(46)) {
HXLINE(  27)			this->doDeletion(this->_brain->keyPressed(16));
            		}
            	}


void Eraser_obj::activate(){
            	HX_STACKFRAME(&_hx_pos_741757cec8ede88f_31_activate)
HXLINE(  32)		this->doDeletion(this->_brain->keyPressed(16));
HXLINE(  35)		this->_brain->setActiveTool(null());
            	}


void Eraser_obj::doDeletion(bool remove){
            	HX_STACKFRAME(&_hx_pos_741757cec8ede88f_39_doDeletion)
HXLINE(  40)		 ::flixel::group::FlxTypedGroup selectedItems = this->_brain->selectedItems;
HXLINE(  41)		if (::hx::IsNotNull( selectedItems )) {
HXLINE(  43)			this->findAndDelete(selectedItems,remove);
HXLINE(  44)			selectedItems->clear();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Eraser_obj,doDeletion,(void))

void Eraser_obj::findAndDelete( ::flixel::group::FlxTypedGroup items,::hx::Null< bool >  __o_remove){
            		bool remove = __o_remove.Default(false);
            	HX_STACKFRAME(&_hx_pos_741757cec8ede88f_50_findAndDelete)
HXDLIN(  50)		 ::Dynamic filter = null();
HXDLIN(  50)		::Array< ::Dynamic> _g__groupMembers = items->members;
HXDLIN(  50)		 ::Dynamic _g__filter = filter;
HXDLIN(  50)		int _g__cursor = 0;
HXDLIN(  50)		int _g__length = _g__groupMembers->length;
HXDLIN(  50)		while(true){
HXDLIN(  50)			while(true){
HXDLIN(  50)				bool _hx_tmp;
HXDLIN(  50)				if ((_g__cursor < _g__length)) {
HXDLIN(  50)					if (::hx::IsNotNull( _g__groupMembers->__get(_g__cursor).StaticCast<  ::flixel::FlxObject >() )) {
HXDLIN(  50)						if (::hx::IsNotNull( _g__filter )) {
HXDLIN(  50)							_hx_tmp = !(( (bool)(_g__filter(_g__groupMembers->__get(_g__cursor).StaticCast<  ::flixel::FlxObject >())) ));
            						}
            						else {
HXDLIN(  50)							_hx_tmp = false;
            						}
            					}
            					else {
HXDLIN(  50)						_hx_tmp = true;
            					}
            				}
            				else {
HXDLIN(  50)					_hx_tmp = false;
            				}
HXDLIN(  50)				if (!(_hx_tmp)) {
HXDLIN(  50)					goto _hx_goto_6;
            				}
HXDLIN(  50)				_g__cursor = (_g__cursor + 1);
            			}
            			_hx_goto_6:;
HXDLIN(  50)			if (!((_g__cursor < _g__length))) {
HXDLIN(  50)				goto _hx_goto_5;
            			}
HXDLIN(  50)			 ::flixel::FlxObject member;
HXDLIN(  50)			while(true){
HXDLIN(  50)				bool member1;
HXDLIN(  50)				if ((_g__cursor < _g__length)) {
HXDLIN(  50)					if (::hx::IsNotNull( _g__groupMembers->__get(_g__cursor).StaticCast<  ::flixel::FlxObject >() )) {
HXDLIN(  50)						if (::hx::IsNotNull( _g__filter )) {
HXDLIN(  50)							member1 = !(( (bool)(_g__filter(_g__groupMembers->__get(_g__cursor).StaticCast<  ::flixel::FlxObject >())) ));
            						}
            						else {
HXDLIN(  50)							member1 = false;
            						}
            					}
            					else {
HXDLIN(  50)						member1 = true;
            					}
            				}
            				else {
HXDLIN(  50)					member1 = false;
            				}
HXDLIN(  50)				if (!(member1)) {
HXDLIN(  50)					goto _hx_goto_7;
            				}
HXDLIN(  50)				_g__cursor = (_g__cursor + 1);
            			}
            			_hx_goto_7:;
HXDLIN(  50)			if ((_g__cursor < _g__length)) {
HXDLIN(  50)				_g__cursor = (_g__cursor + 1);
HXDLIN(  50)				member = _g__groupMembers->__get((_g__cursor - 1)).StaticCast<  ::flixel::FlxObject >();
            			}
            			else {
HXDLIN(  50)				member = null();
            			}
HXDLIN(  50)			 ::flixel::FlxObject member2 = member;
HXLINE(  52)			if (::hx::IsNull( member2 )) {
HXLINE(  53)				continue;
            			}
HXLINE(  55)			if (!(::Std_obj::isOfType(member2,::hx::ClassOf< ::flixel::group::FlxTypedGroup >()))) {
HXLINE(  61)				member2->kill();
HXLINE(  62)				if (remove) {
HXLINE(  63)					this->removeFromMemory(member2,::flixel::FlxG_obj::game->_state);
            				}
            			}
            		}
            		_hx_goto_5:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Eraser_obj,findAndDelete,(void))

void Eraser_obj::removeFromMemory( ::flixel::FlxBasic item, ::flixel::group::FlxTypedGroup parentGroup){
            	HX_STACKFRAME(&_hx_pos_741757cec8ede88f_70_removeFromMemory)
HXDLIN(  70)		int _g = 0;
HXDLIN(  70)		::Array< ::Dynamic> _g1 = parentGroup->members;
HXDLIN(  70)		while((_g < _g1->length)){
HXDLIN(  70)			 ::flixel::FlxBasic member = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(  70)			_g = (_g + 1);
HXLINE(  72)			if (::hx::IsNull( member )) {
HXLINE(  73)				continue;
            			}
HXLINE(  75)			if (::Std_obj::isOfType(member,::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE(  76)				this->removeFromMemory(item,( ( ::flixel::group::FlxTypedGroup)(member) ));
            			}
            			else {
HXLINE(  77)				if (::hx::IsInstanceEq( member,item )) {
HXLINE(  78)					parentGroup->remove(member,null()).StaticCast<  ::flixel::FlxBasic >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Eraser_obj,removeFromMemory,(void))


::hx::ObjectPtr< Eraser_obj > Eraser_obj::__new() {
	::hx::ObjectPtr< Eraser_obj > __this = new Eraser_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Eraser_obj > Eraser_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Eraser_obj *__this = (Eraser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Eraser_obj), true, "flixel.system.debug.interaction.tools.Eraser"));
	*(void **)__this = Eraser_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Eraser_obj::Eraser_obj()
{
}

::hx::Val Eraser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"activate") ) { return ::hx::Val( activate_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doDeletion") ) { return ::hx::Val( doDeletion_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"findAndDelete") ) { return ::hx::Val( findAndDelete_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removeFromMemory") ) { return ::hx::Val( removeFromMemory_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Eraser_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Eraser_obj_sStaticStorageInfo = 0;
#endif

static ::String Eraser_obj_sMemberFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("update",09,86,05,87),
	HX_("activate",b3,1b,ac,e5),
	HX_("doDeletion",b9,e1,21,d0),
	HX_("findAndDelete",e9,2a,a7,3f),
	HX_("removeFromMemory",6f,ed,ac,01),
	::String(null()) };

::hx::Class Eraser_obj::__mClass;

void Eraser_obj::__register()
{
	Eraser_obj _hx_dummy;
	Eraser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.interaction.tools.Eraser",83,fd,47,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Eraser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Eraser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Eraser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Eraser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
} // end namespace tools
