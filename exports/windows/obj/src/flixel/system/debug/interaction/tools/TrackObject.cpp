// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Icon
#include <flixel/system/debug/Icon.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug__Icon_Watch
#include <flixel/system/debug/_Icon/Watch.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_TrackObject
#include <flixel/system/debug/interaction/tools/TrackObject.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fccabd2d6c20203a_16_new,"flixel.system.debug.interaction.tools.TrackObject","new",0x7a0c4e05,"flixel.system.debug.interaction.tools.TrackObject.new","flixel/system/debug/interaction/tools/TrackObject.hx",16,0x18400d6e)
HX_LOCAL_STACK_FRAME(_hx_pos_fccabd2d6c20203a_19_init,"flixel.system.debug.interaction.tools.TrackObject","init",0x4d70adcb,"flixel.system.debug.interaction.tools.TrackObject.init","flixel/system/debug/interaction/tools/TrackObject.hx",19,0x18400d6e)
HX_LOCAL_STACK_FRAME(_hx_pos_fccabd2d6c20203a_34_update,"flixel.system.debug.interaction.tools.TrackObject","update",0xfd095d84,"flixel.system.debug.interaction.tools.TrackObject.update","flixel/system/debug/interaction/tools/TrackObject.hx",34,0x18400d6e)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{
namespace tools{

void TrackObject_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_fccabd2d6c20203a_16_new)
HXDLIN(  16)		super::__construct();
            	}

Dynamic TrackObject_obj::__CreateEmpty() { return new TrackObject_obj; }

void *TrackObject_obj::_hx_vtable = 0;

Dynamic TrackObject_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TrackObject_obj > _hx_result = new TrackObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TrackObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1361d5a9 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x2dc179dd || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::flixel::_hx_system::debug::interaction::tools::Tool TrackObject_obj::init( ::flixel::_hx_system::debug::interaction::Interaction brain){
            	HX_STACKFRAME(&_hx_pos_fccabd2d6c20203a_19_init)
HXLINE(  20)		this->super::init(brain);
HXLINE(  22)		this->_name = HX_("Track object",d4,cb,72,95);
HXLINE(  23)		this->setButton(::flixel::_hx_system::debug::Icon_obj::watch);
HXLINE(  24)		this->button->toggleMode = true;
HXLINE(  26)		this->setCursor(::flixel::_hx_system::debug::Icon_obj::watch,-5,-5);
HXLINE(  28)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


void TrackObject_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fccabd2d6c20203a_34_update)
HXDLIN(  34)		bool _hx_tmp;
HXDLIN(  34)		if (this->isActive()) {
HXDLIN(  34)			_hx_tmp = this->_brain->pointerJustPressed;
            		}
            		else {
HXDLIN(  34)			_hx_tmp = false;
            		}
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  36)			Float X = this->_brain->flixelPointer->x;
HXDLIN(  36)			Float Y = this->_brain->flixelPointer->y;
HXDLIN(  36)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(  36)			_this->x = X;
HXDLIN(  36)			_this->y = Y;
HXDLIN(  36)			_this->width = ( (Float)(1) );
HXDLIN(  36)			_this->height = ( (Float)(1) );
HXDLIN(  36)			 ::flixel::math::FlxRect rect = _this;
HXDLIN(  36)			rect->_inPool = false;
HXDLIN(  36)			 ::flixel::math::FlxRect rect1 = rect;
HXLINE(  37)			 ::flixel::FlxObject item = this->_brain->getTopItemWithinState(::flixel::FlxG_obj::game->_state,rect1);
HXLINE(  38)			if (::hx::IsNotNull( item )) {
HXLINE(  40)				::flixel::FlxG_obj::debugger->track(item,null());
HXLINE(  41)				this->_brain->selectedItems->clear();
HXLINE(  42)				this->_brain->selectedItems->add(item).StaticCast<  ::flixel::FlxObject >();
            			}
HXLINE(  44)			if (!(rect1->_inPool)) {
HXLINE(  44)				rect1->_inPool = true;
HXDLIN(  44)				rect1->_weak = false;
HXDLIN(  44)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect1);
            			}
            		}
            	}



::hx::ObjectPtr< TrackObject_obj > TrackObject_obj::__new() {
	::hx::ObjectPtr< TrackObject_obj > __this = new TrackObject_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TrackObject_obj > TrackObject_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TrackObject_obj *__this = (TrackObject_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrackObject_obj), true, "flixel.system.debug.interaction.tools.TrackObject"));
	*(void **)__this = TrackObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TrackObject_obj::TrackObject_obj()
{
}

::hx::Val TrackObject_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TrackObject_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TrackObject_obj_sStaticStorageInfo = 0;
#endif

static ::String TrackObject_obj_sMemberFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class TrackObject_obj::__mClass;

void TrackObject_obj::__register()
{
	TrackObject_obj _hx_dummy;
	TrackObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.interaction.tools.TrackObject",93,e7,e9,fe);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TrackObject_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TrackObject_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrackObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrackObject_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
} // end namespace tools
