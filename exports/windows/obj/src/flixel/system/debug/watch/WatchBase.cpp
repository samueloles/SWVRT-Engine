// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_system_debug_ScrollBar
#include <flixel/system/debug/ScrollBar.h>
#endif
#ifndef INCLUDED_flixel_system_debug_ScrollSprite
#include <flixel/system/debug/ScrollSprite.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_WatchBase
#include <flixel/system/debug/watch/WatchBase.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_WatchEntry
#include <flixel/system/debug/watch/WatchEntry.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_WatchEntryData
#include <flixel/system/debug/watch/WatchEntryData.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_64dd92a28a81661d_24_new,"flixel.system.debug.watch.WatchBase","new",0xeb2558eb,"flixel.system.debug.watch.WatchBase.new","flixel/system/debug/watch/Watch.hx",24,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_30_get_alwaysOnTop,"flixel.system.debug.watch.WatchBase","get_alwaysOnTop",0x59b6b209,"flixel.system.debug.watch.WatchBase.get_alwaysOnTop","flixel/system/debug/watch/Watch.hx",30,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_31_set_alwaysOnTop,"flixel.system.debug.watch.WatchBase","set_alwaysOnTop",0x55822f15,"flixel.system.debug.watch.WatchBase.set_alwaysOnTop","flixel/system/debug/watch/Watch.hx",31,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_56_add,"flixel.system.debug.watch.WatchBase","add",0xeb1b7aac,"flixel.system.debug.watch.WatchBase.add","flixel/system/debug/watch/Watch.hx",56,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_77_isInvalid,"flixel.system.debug.watch.WatchBase","isInvalid",0x98155af8,"flixel.system.debug.watch.WatchBase.isInvalid","flixel/system/debug/watch/Watch.hx",77,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_90_getExistingEntry,"flixel.system.debug.watch.WatchBase","getExistingEntry",0xc834a006,"flixel.system.debug.watch.WatchBase.getExistingEntry","flixel/system/debug/watch/Watch.hx",90,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_105_addEntry,"flixel.system.debug.watch.WatchBase","addEntry",0x46203e26,"flixel.system.debug.watch.WatchBase.addEntry","flixel/system/debug/watch/Watch.hx",105,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_107_addEntry,"flixel.system.debug.watch.WatchBase","addEntry",0x46203e26,"flixel.system.debug.watch.WatchBase.addEntry","flixel/system/debug/watch/Watch.hx",107,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_115_remove,"flixel.system.debug.watch.WatchBase","remove",0x333cbc99,"flixel.system.debug.watch.WatchBase.remove","flixel/system/debug/watch/Watch.hx",115,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_122_removeEntry,"flixel.system.debug.watch.WatchBase","removeEntry",0xdb67e119,"flixel.system.debug.watch.WatchBase.removeEntry","flixel/system/debug/watch/Watch.hx",122,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_133_clear,"flixel.system.debug.watch.WatchBase","clear",0xb10872d8,"flixel.system.debug.watch.WatchBase.clear","flixel/system/debug/watch/Watch.hx",133,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_145_removeAll,"flixel.system.debug.watch.WatchBase","removeAll",0x23b41a08,"flixel.system.debug.watch.WatchBase.removeAll","flixel/system/debug/watch/Watch.hx",145,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_150_update,"flixel.system.debug.watch.WatchBase","update",0xb5b9a65e,"flixel.system.debug.watch.WatchBase.update","flixel/system/debug/watch/Watch.hx",150,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_158_updateSize,"flixel.system.debug.watch.WatchBase","updateSize",0x615bfa3f,"flixel.system.debug.watch.WatchBase.updateSize","flixel/system/debug/watch/Watch.hx",158,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_172_getMarginWidth,"flixel.system.debug.watch.WatchBase","getMarginWidth",0xd6719f57,"flixel.system.debug.watch.WatchBase.getMarginWidth","flixel/system/debug/watch/Watch.hx",172,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_177_getMarginHeight,"flixel.system.debug.watch.WatchBase","getMarginHeight",0x83494576,"flixel.system.debug.watch.WatchBase.getMarginHeight","flixel/system/debug/watch/Watch.hx",177,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_181_resetEntries,"flixel.system.debug.watch.WatchBase","resetEntries",0x966a0156,"flixel.system.debug.watch.WatchBase.resetEntries","flixel/system/debug/watch/Watch.hx",181,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_195_getMaxNameWidth,"flixel.system.debug.watch.WatchBase","getMaxNameWidth",0x0106e738,"flixel.system.debug.watch.WatchBase.getMaxNameWidth","flixel/system/debug/watch/Watch.hx",195,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_200_getMaxMinWidth,"flixel.system.debug.watch.WatchBase","getMaxMinWidth",0xf8fa7e37,"flixel.system.debug.watch.WatchBase.getMaxMinWidth","flixel/system/debug/watch/Watch.hx",200,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_204_getMax,"flixel.system.debug.watch.WatchBase","getMax",0xd1d66403,"flixel.system.debug.watch.WatchBase.getMax","flixel/system/debug/watch/Watch.hx",204,0x446c9b58)
HX_LOCAL_STACK_FRAME(_hx_pos_64dd92a28a81661d_27_boot,"flixel.system.debug.watch.WatchBase","boot",0xcda17547,"flixel.system.debug.watch.WatchBase.boot","flixel/system/debug/watch/Watch.hx",27,0x446c9b58)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace watch{

void WatchBase_obj::__construct( ::Dynamic entryConstructor,::String title, ::openfl::display::BitmapData icon,::hx::Null< bool >  __o_resizable, ::openfl::geom::Rectangle bounds,::hx::Null< bool >  __o_closable,::hx::Null< bool >  __o_alwaysOnTop){
            		bool resizable = __o_resizable.Default(true);
            		bool closable = __o_closable.Default(false);
            		bool alwaysOnTop = __o_alwaysOnTop.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_64dd92a28a81661d_24_new)
HXLINE(  35)		this->entries = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  40)		this->create = entryConstructor;
HXLINE(  41)		super::__construct(title,icon,0,0,resizable,bounds,closable,alwaysOnTop);
HXLINE(  43)		this->entriesContainer =  ::flixel::_hx_system::debug::ScrollSprite_obj::__alloc( HX_CTX );
HXLINE(  44)		this->entriesContainer->set_x(( (Float)(2) ));
HXLINE(  45)		this->entriesContainer->set_y(( (Float)(15) ));
HXLINE(  46)		this->addChild(this->entriesContainer);
HXLINE(  48)		this->scrollbar = this->entriesContainer->createScrollBar();
HXLINE(  49)		 ::flixel::_hx_system::debug::ScrollBar _hx_tmp = this->scrollbar;
HXDLIN(  49)		_hx_tmp->set_y(this->entriesContainer->get_y());
HXLINE(  50)		this->addChild(this->scrollbar);
HXLINE(  52)		::flixel::FlxG_obj::signals->preStateSwitch->add(this->clear_dyn());
            	}

Dynamic WatchBase_obj::__CreateEmpty() { return new WatchBase_obj; }

void *WatchBase_obj::_hx_vtable = 0;

Dynamic WatchBase_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WatchBase_obj > _hx_result = new WatchBase_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool WatchBase_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27ebba19) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x27ebba19;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x39123ef8 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

bool WatchBase_obj::get_alwaysOnTop(){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_30_get_alwaysOnTop)
HXDLIN(  30)		return this->_alwaysOnTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WatchBase_obj,get_alwaysOnTop,return )

bool WatchBase_obj::set_alwaysOnTop(bool value){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_31_set_alwaysOnTop)
HXDLIN(  31)		return (this->_alwaysOnTop = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(WatchBase_obj,set_alwaysOnTop,return )

void WatchBase_obj::add(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_56_add)
HXLINE(  57)		if (this->isInvalid(displayName,data)) {
HXLINE(  58)			return;
            		}
HXLINE(  60)		 ::Dynamic existing = this->getExistingEntry(displayName,data);
HXLINE(  61)		if (::hx::IsNotNull( existing )) {
HXLINE(  63)			switch((int)(data->_hx_getIndex())){
            				case (int)1: {
HXLINE(  65)					::String _g = data->_hx_getString(0);
HXLINE(  66)					( ( ::flixel::_hx_system::debug::watch::WatchEntry)(existing) )->data = data;
            				}
            				break;
            				case (int)3: {
HXLINE(  65)					 ::Dynamic _g1 = data->_hx_getObject(0);
HXLINE(  66)					( ( ::flixel::_hx_system::debug::watch::WatchEntry)(existing) )->data = data;
            				}
            				break;
            				default:{
            				}
            			}
HXLINE(  69)			return;
            		}
HXLINE(  72)		this->addEntry(displayName,data,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(WatchBase_obj,add,(void))

bool WatchBase_obj::isInvalid(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_77_isInvalid)
HXDLIN(  77)		switch((int)(data->_hx_getIndex())){
            			case (int)0: {
HXLINE(  79)				 ::Dynamic object = data->_hx_getObject(0);
HXDLIN(  79)				::String field = data->_hx_getString(1);
HXDLIN(  79)				if (::hx::IsNotNull( object )) {
HXLINE(  79)					return ::hx::IsNull( field );
            				}
            				else {
HXLINE(  79)					return true;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(  80)				::String value = data->_hx_getString(0);
HXLINE(  81)				if (::hx::IsNotNull( displayName )) {
HXLINE(  81)					return (displayName.length == 0);
            				}
            				else {
HXLINE(  81)					return true;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(  82)				 ::hscript::Expr _g = data->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN(  82)				::String expression = data->_hx_getString(0);
HXLINE(  83)				if (::hx::IsNotNull( expression )) {
HXLINE(  83)					return (expression.length == 0);
            				}
            				else {
HXLINE(  83)					return true;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(  84)				 ::Dynamic func = data->_hx_getObject(0);
HXLINE(  85)				return ::hx::IsNull( func );
            			}
            			break;
            		}
HXLINE(  77)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(WatchBase_obj,isInvalid,return )

 ::Dynamic WatchBase_obj::getExistingEntry(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_90_getExistingEntry)
HXLINE(  91)		{
HXLINE(  91)			int _g = 0;
HXDLIN(  91)			::cpp::VirtualArray _g1 = this->entries;
HXDLIN(  91)			while((_g < _g1->get_length())){
HXLINE(  91)				 ::Dynamic entry = _g1->__get(_g);
HXDLIN(  91)				_g = (_g + 1);
HXLINE(  93)				bool _hx_tmp;
HXDLIN(  93)				if (::hx::IsNotNull( data )) {
HXLINE(  93)					switch((int)(data->_hx_getIndex())){
            						case (int)1: {
HXLINE(  93)							::String _g2 = data->_hx_getString(0);
HXDLIN(  93)							_hx_tmp = true;
            						}
            						break;
            						case (int)3: {
HXLINE(  93)							 ::Dynamic _g3 = data->_hx_getObject(0);
HXDLIN(  93)							_hx_tmp = true;
            						}
            						break;
            						default:{
HXLINE(  93)							_hx_tmp = false;
            						}
            					}
            				}
            				else {
HXLINE(  93)					_hx_tmp = true;
            				}
HXDLIN(  93)				if (_hx_tmp) {
HXLINE(  95)					if ((( ( ::flixel::_hx_system::debug::watch::WatchEntry)(entry) )->displayName == displayName)) {
HXLINE(  96)						return entry;
            					}
            				}
            				else {
HXLINE(  98)					if (__hxcpp_enum_eq(( ( ::flixel::_hx_system::debug::watch::WatchEntry)(entry) )->data,data)) {
HXLINE(  99)						return entry;
            					}
            				}
            			}
            		}
HXLINE( 101)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(WatchBase_obj,getExistingEntry,return )

void WatchBase_obj::addEntry(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data,::hx::Null< bool >  __o_redraw){
            		bool redraw = __o_redraw.Default(true);
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_105_addEntry)
HXLINE( 106)		 ::Dynamic entry = this->create(displayName,data);
HXLINE( 107)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,entry1, ::flixel::_hx_system::debug::watch::WatchBase,_g) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_107_addEntry)
HXLINE( 107)				_g->removeEntry(entry1);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 107)			 ::flixel::_hx_system::debug::watch::WatchBase _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)			 ::Dynamic entry1 = entry;
HXDLIN( 107)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(entry1,_g));
HXDLIN( 107)			( ( ::flixel::_hx_system::debug::watch::WatchEntry)(entry) )->onRemove->addOnce(_hx_tmp);
            		}
HXLINE( 108)		this->entries->push(entry);
HXLINE( 109)		this->entriesContainer->addChild(( ( ::openfl::display::DisplayObject)(entry) ));
HXLINE( 110)		if (redraw) {
HXLINE( 111)			this->updateSize();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(WatchBase_obj,addEntry,(void))

void WatchBase_obj::remove(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_115_remove)
HXLINE( 116)		 ::Dynamic existing = this->getExistingEntry(displayName,data);
HXLINE( 117)		if (::hx::IsNotNull( existing )) {
HXLINE( 118)			this->removeEntry(existing);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(WatchBase_obj,remove,(void))

void WatchBase_obj::removeEntry( ::Dynamic entry){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_122_removeEntry)
HXLINE( 123)		{
HXLINE( 123)			::cpp::VirtualArray array = this->entries;
HXDLIN( 123)			int index = array->indexOf(entry,null());
HXDLIN( 123)			if ((index != -1)) {
HXLINE( 123)				array->set(index,array->__get((array->get_length() - 1)));
HXDLIN( 123)				array->pop();
            			}
            		}
HXLINE( 124)		this->entriesContainer->removeChild(( ( ::openfl::display::DisplayObject)(entry) ));
HXLINE( 125)		( ( ::flixel::_hx_system::debug::watch::WatchEntry)(entry) )->destroy();
HXLINE( 126)		this->updateSize();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WatchBase_obj,removeEntry,(void))

void WatchBase_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_133_clear)
HXLINE( 134)		{
HXLINE( 134)			int _g = 0;
HXDLIN( 134)			::cpp::VirtualArray _g1 = this->entries;
HXDLIN( 134)			while((_g < _g1->get_length())){
HXLINE( 134)				 ::Dynamic entry = _g1->__get(_g);
HXDLIN( 134)				_g = (_g + 1);
HXLINE( 136)				this->entriesContainer->removeChild(( ( ::openfl::display::DisplayObject)(entry) ));
HXLINE( 137)				( ( ::flixel::_hx_system::debug::watch::WatchEntry)(entry) )->destroy();
            			}
            		}
HXLINE( 140)		this->entries->resize(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WatchBase_obj,clear,(void))

void WatchBase_obj::removeAll(){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_145_removeAll)
HXDLIN( 145)		this->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WatchBase_obj,removeAll,(void))

void WatchBase_obj::update(){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_150_update)
HXDLIN( 150)		int _g = 0;
HXDLIN( 150)		::cpp::VirtualArray _g1 = this->entries;
HXDLIN( 150)		while((_g < _g1->get_length())){
HXDLIN( 150)			 ::Dynamic entry = _g1->__get(_g);
HXDLIN( 150)			_g = (_g + 1);
HXLINE( 152)			if (this->entriesContainer->isChildVisible(( ( ::openfl::display::DisplayObject)(entry) ))) {
HXLINE( 153)				( ( ::flixel::_hx_system::debug::watch::WatchEntry)(entry) )->updateValue();
            			}
            		}
            	}


void WatchBase_obj::updateSize(){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_158_updateSize)
HXLINE( 159)		Float oldMinSize = this->minSize->x;
HXLINE( 160)		this->super::updateSize();
HXLINE( 161)		this->minSize->x = oldMinSize;
HXLINE( 163)		 ::flixel::_hx_system::debug::ScrollBar _hx_tmp = this->scrollbar;
HXDLIN( 163)		int _hx_tmp1 = this->_width;
HXDLIN( 163)		_hx_tmp->set_x(((( (Float)(_hx_tmp1) ) - this->scrollbar->get_width()) - ( (Float)(2) )));
HXLINE( 164)		 ::flixel::_hx_system::debug::ScrollBar _hx_tmp2 = this->scrollbar;
HXDLIN( 164)		_hx_tmp2->resize((this->getMarginHeight() - ( (Float)(10) )));
HXLINE( 166)		 ::flixel::_hx_system::debug::ScrollSprite _hx_tmp3 = this->entriesContainer;
HXDLIN( 166)		Float _hx_tmp4 = this->getMarginWidth();
HXDLIN( 166)		_hx_tmp3->setScrollSize(_hx_tmp4,this->getMarginHeight());
HXLINE( 167)		this->resetEntries();
            	}


Float WatchBase_obj::getMarginWidth(){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_172_getMarginWidth)
HXDLIN( 172)		int _hx_tmp = this->_width;
HXDLIN( 172)		Float _hx_tmp1 = (( (Float)(_hx_tmp) ) - this->entriesContainer->get_x());
HXDLIN( 172)		int _hx_tmp2;
HXDLIN( 172)		if (this->_resizable) {
HXDLIN( 172)			_hx_tmp2 = 5;
            		}
            		else {
HXDLIN( 172)			_hx_tmp2 = 3;
            		}
HXDLIN( 172)		return (((_hx_tmp1 - ( (Float)(_hx_tmp2) )) - this->scrollbar->get_width()) - ( (Float)(4) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WatchBase_obj,getMarginWidth,return )

Float WatchBase_obj::getMarginHeight(){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_177_getMarginHeight)
HXDLIN( 177)		int _hx_tmp = this->_height;
HXDLIN( 177)		return ((( (Float)(_hx_tmp) ) - this->entriesContainer->get_y()) - ( (Float)(3) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WatchBase_obj,getMarginHeight,return )

void WatchBase_obj::resetEntries(){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_181_resetEntries)
HXLINE( 182)		Float width = this->getMarginWidth();
HXLINE( 183)		Float sansNameWidth = ::Math_obj::min((width * ((Float)0.8)),this->getMaxMinWidth());
HXLINE( 184)		Float nameWidth = ::Math_obj::min(this->getMaxNameWidth(),(width - sansNameWidth));
HXLINE( 185)		{
HXLINE( 185)			int _g = 0;
HXDLIN( 185)			int _g1 = this->entries->get_length();
HXDLIN( 185)			while((_g < _g1)){
HXLINE( 185)				_g = (_g + 1);
HXDLIN( 185)				int i = (_g - 1);
HXLINE( 187)				 ::Dynamic entry = this->entries->__get(i);
HXLINE( 188)				( ( ::openfl::display::DisplayObject)(entry) )->set_y(( (Float)((i * 15)) ));
HXLINE( 189)				( ( ::flixel::_hx_system::debug::watch::WatchEntry)(entry) )->updateSize(nameWidth,width);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(WatchBase_obj,resetEntries,(void))

Float WatchBase_obj::getMaxNameWidth(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Float _hx_run( ::flixel::_hx_system::debug::watch::WatchEntry entry){
            			HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_195_getMaxNameWidth)
HXDLIN( 195)			return entry->getNameWidth();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_195_getMaxNameWidth)
HXDLIN( 195)		return this->getMax( ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WatchBase_obj,getMaxNameWidth,return )

Float WatchBase_obj::getMaxMinWidth(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Float _hx_run( ::flixel::_hx_system::debug::watch::WatchEntry entry){
            			HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_200_getMaxMinWidth)
HXDLIN( 200)			return entry->getMinWidth();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_200_getMaxMinWidth)
HXDLIN( 200)		return this->getMax( ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WatchBase_obj,getMaxMinWidth,return )

Float WatchBase_obj::getMax( ::Dynamic getValue){
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_204_getMax)
HXLINE( 205)		Float max = ((Float)0.0);
HXLINE( 206)		{
HXLINE( 206)			int _g = 0;
HXDLIN( 206)			::cpp::VirtualArray _g1 = this->entries;
HXDLIN( 206)			while((_g < _g1->get_length())){
HXLINE( 206)				 ::Dynamic entry = _g1->__get(_g);
HXDLIN( 206)				_g = (_g + 1);
HXLINE( 208)				Float value = ( (Float)(getValue(entry)) );
HXLINE( 209)				if ((value > max)) {
HXLINE( 210)					max = value;
            				}
            			}
            		}
HXLINE( 212)		return max;
            	}


HX_DEFINE_DYNAMIC_FUNC1(WatchBase_obj,getMax,return )

int WatchBase_obj::LINE_HEIGHT;


::hx::ObjectPtr< WatchBase_obj > WatchBase_obj::__new( ::Dynamic entryConstructor,::String title, ::openfl::display::BitmapData icon,::hx::Null< bool >  __o_resizable, ::openfl::geom::Rectangle bounds,::hx::Null< bool >  __o_closable,::hx::Null< bool >  __o_alwaysOnTop) {
	::hx::ObjectPtr< WatchBase_obj > __this = new WatchBase_obj();
	__this->__construct(entryConstructor,title,icon,__o_resizable,bounds,__o_closable,__o_alwaysOnTop);
	return __this;
}

::hx::ObjectPtr< WatchBase_obj > WatchBase_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic entryConstructor,::String title, ::openfl::display::BitmapData icon,::hx::Null< bool >  __o_resizable, ::openfl::geom::Rectangle bounds,::hx::Null< bool >  __o_closable,::hx::Null< bool >  __o_alwaysOnTop) {
	WatchBase_obj *__this = (WatchBase_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WatchBase_obj), true, "flixel.system.debug.watch.WatchBase"));
	*(void **)__this = WatchBase_obj::_hx_vtable;
	__this->__construct(entryConstructor,title,icon,__o_resizable,bounds,__o_closable,__o_alwaysOnTop);
	return __this;
}

WatchBase_obj::WatchBase_obj()
{
}

void WatchBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WatchBase);
	HX_MARK_MEMBER_NAME(entriesContainer,"entriesContainer");
	HX_MARK_MEMBER_NAME(scrollbar,"scrollbar");
	HX_MARK_MEMBER_NAME(entries,"entries");
	HX_MARK_MEMBER_NAME(create,"create");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WatchBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(entriesContainer,"entriesContainer");
	HX_VISIT_MEMBER_NAME(scrollbar,"scrollbar");
	HX_VISIT_MEMBER_NAME(entries,"entries");
	HX_VISIT_MEMBER_NAME(create,"create");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val WatchBase_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMax") ) { return ::hx::Val( getMax_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { return ::hx::Val( entries ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addEntry") ) { return ::hx::Val( addEntry_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollbar") ) { return ::hx::Val( scrollbar ); }
		if (HX_FIELD_EQ(inName,"isInvalid") ) { return ::hx::Val( isInvalid_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAll") ) { return ::hx::Val( removeAll_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateSize") ) { return ::hx::Val( updateSize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alwaysOnTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_alwaysOnTop() ); }
		if (HX_FIELD_EQ(inName,"removeEntry") ) { return ::hx::Val( removeEntry_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetEntries") ) { return ::hx::Val( resetEntries_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getMarginWidth") ) { return ::hx::Val( getMarginWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMaxMinWidth") ) { return ::hx::Val( getMaxMinWidth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_alwaysOnTop") ) { return ::hx::Val( get_alwaysOnTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alwaysOnTop") ) { return ::hx::Val( set_alwaysOnTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMarginHeight") ) { return ::hx::Val( getMarginHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMaxNameWidth") ) { return ::hx::Val( getMaxNameWidth_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"entriesContainer") ) { return ::hx::Val( entriesContainer ); }
		if (HX_FIELD_EQ(inName,"getExistingEntry") ) { return ::hx::Val( getExistingEntry_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WatchBase_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { create=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { entries=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollbar") ) { scrollbar=inValue.Cast<  ::flixel::_hx_system::debug::ScrollBar >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alwaysOnTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_alwaysOnTop(inValue.Cast< bool >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"entriesContainer") ) { entriesContainer=inValue.Cast<  ::flixel::_hx_system::debug::ScrollSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WatchBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("alwaysOnTop",67,4d,53,16));
	outFields->push(HX_("entriesContainer",d1,fd,5e,72));
	outFields->push(HX_("scrollbar",e6,9f,14,3e));
	outFields->push(HX_("entries",50,2d,5f,79));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WatchBase_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::_hx_system::debug::ScrollSprite */ ,(int)offsetof(WatchBase_obj,entriesContainer),HX_("entriesContainer",d1,fd,5e,72)},
	{::hx::fsObject /*  ::flixel::_hx_system::debug::ScrollBar */ ,(int)offsetof(WatchBase_obj,scrollbar),HX_("scrollbar",e6,9f,14,3e)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(WatchBase_obj,entries),HX_("entries",50,2d,5f,79)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WatchBase_obj,create),HX_("create",fc,66,0f,7c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo WatchBase_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &WatchBase_obj::LINE_HEIGHT,HX_("LINE_HEIGHT",12,8c,b0,ea)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String WatchBase_obj_sMemberFields[] = {
	HX_("get_alwaysOnTop",fe,04,35,d7),
	HX_("set_alwaysOnTop",0a,82,00,d3),
	HX_("entriesContainer",d1,fd,5e,72),
	HX_("scrollbar",e6,9f,14,3e),
	HX_("entries",50,2d,5f,79),
	HX_("create",fc,66,0f,7c),
	HX_("add",21,f2,49,00),
	HX_("isInvalid",2d,58,46,3f),
	HX_("getExistingEntry",71,e3,3e,19),
	HX_("addEntry",91,9e,e3,e9),
	HX_("remove",44,9c,88,04),
	HX_("removeEntry",8e,55,ba,6e),
	HX_("clear",8d,71,5b,48),
	HX_("removeAll",3d,17,e5,ca),
	HX_("update",09,86,05,87),
	HX_("updateSize",6a,8b,08,05),
	HX_("getMarginWidth",02,a2,75,9c),
	HX_("getMarginHeight",6b,98,c7,00),
	HX_("resetEntries",41,73,3d,eb),
	HX_("getMaxNameWidth",2d,3a,85,7e),
	HX_("getMaxMinWidth",e2,80,fe,be),
	HX_("getMax",ae,43,22,a3),
	::String(null()) };

static void WatchBase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WatchBase_obj::LINE_HEIGHT,"LINE_HEIGHT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WatchBase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WatchBase_obj::LINE_HEIGHT,"LINE_HEIGHT");
};

#endif

::hx::Class WatchBase_obj::__mClass;

static ::String WatchBase_obj_sStaticFields[] = {
	HX_("LINE_HEIGHT",12,8c,b0,ea),
	::String(null())
};

void WatchBase_obj::__register()
{
	WatchBase_obj _hx_dummy;
	WatchBase_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.watch.WatchBase",79,07,de,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WatchBase_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(WatchBase_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WatchBase_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WatchBase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WatchBase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WatchBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WatchBase_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void WatchBase_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_64dd92a28a81661d_27_boot)
HXDLIN(  27)		LINE_HEIGHT = 15;
            	}
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace watch
