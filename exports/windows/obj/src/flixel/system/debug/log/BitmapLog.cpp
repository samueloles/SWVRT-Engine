// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Icon
#include <flixel/system/debug/Icon.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug__Icon_BitmapLog
#include <flixel/system/debug/_Icon/BitmapLog.h>
#endif
#ifndef INCLUDED_flixel_system_debug__Icon_Close
#include <flixel/system/debug/_Icon/Close.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_BitmapLog
#include <flixel/system/debug/log/BitmapLog.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_Footer
#include <flixel/system/debug/log/Footer.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_Header
#include <flixel/system/debug/log/Header.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log__BitmapLog_State
#include <flixel/system/debug/log/_BitmapLog/State.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_61_new,"flixel.system.debug.log.BitmapLog","new",0x0bf20835,"flixel.system.debug.log.BitmapLog.new","flixel/system/debug/log/BitmapLog.hx",61,0x69d60e7d)
HX_DEFINE_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_62_new,"flixel.system.debug.log.BitmapLog","new",0x0bf20835,"flixel.system.debug.log.BitmapLog.new","flixel/system/debug/log/BitmapLog.hx",62,0x69d60e7d)
HX_DEFINE_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_28_new,"flixel.system.debug.log.BitmapLog","new",0x0bf20835,"flixel.system.debug.log.BitmapLog.new","flixel/system/debug/log/BitmapLog.hx",28,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_88_destroy,"flixel.system.debug.log.BitmapLog","destroy",0x0565734f,"flixel.system.debug.log.BitmapLog.destroy","flixel/system/debug/log/BitmapLog.hx",88,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_103_onMouseWheel,"flixel.system.debug.log.BitmapLog","onMouseWheel",0x4e236fc0,"flixel.system.debug.log.BitmapLog.onMouseWheel","flixel/system/debug/log/BitmapLog.hx",103,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_109_onMouseDown,"flixel.system.debug.log.BitmapLog","onMouseDown",0x4b0f28dd,"flixel.system.debug.log.BitmapLog.onMouseDown","flixel/system/debug/log/BitmapLog.hx",109,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_117_onMouseUp,"flixel.system.debug.log.BitmapLog","onMouseUp",0xe41af216,"flixel.system.debug.log.BitmapLog.onMouseUp","flixel/system/debug/log/BitmapLog.hx",117,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_123_onMouseMove,"flixel.system.debug.log.BitmapLog","onMouseMove",0x5102138c,"flixel.system.debug.log.BitmapLog.onMouseMove","flixel/system/debug/log/BitmapLog.hx",123,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_137_updateSize,"flixel.system.debug.log.BitmapLog","updateSize",0x36a82835,"flixel.system.debug.log.BitmapLog.updateSize","flixel/system/debug/log/BitmapLog.hx",137,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_144_resize,"flixel.system.debug.log.BitmapLog","resize",0x7b23f53f,"flixel.system.debug.log.BitmapLog.resize","flixel/system/debug/log/BitmapLog.hx",144,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_166_resetSettings,"flixel.system.debug.log.BitmapLog","resetSettings",0xbb149de7,"flixel.system.debug.log.BitmapLog.resetSettings","flixel/system/debug/log/BitmapLog.hx",166,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_172_indexOf,"flixel.system.debug.log.BitmapLog","indexOf",0xc19e8f1e,"flixel.system.debug.log.BitmapLog.indexOf","flixel/system/debug/log/BitmapLog.hx",172,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_182_entryOf,"flixel.system.debug.log.BitmapLog","entryOf",0x5a4a847e,"flixel.system.debug.log.BitmapLog.entryOf","flixel/system/debug/log/BitmapLog.hx",182,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_192_has,"flixel.system.debug.log.BitmapLog","has",0x0bed772f,"flixel.system.debug.log.BitmapLog.has","flixel/system/debug/log/BitmapLog.hx",192,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_205_add,"flixel.system.debug.log.BitmapLog","add",0x0be829f6,"flixel.system.debug.log.BitmapLog.add","flixel/system/debug/log/BitmapLog.hx",205,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_221_remove,"flixel.system.debug.log.BitmapLog","remove",0x7731378f,"flixel.system.debug.log.BitmapLog.remove","flixel/system/debug/log/BitmapLog.hx",221,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_229_removeCurrent,"flixel.system.debug.log.BitmapLog","removeCurrent",0xa3d62c6a,"flixel.system.debug.log.BitmapLog.removeCurrent","flixel/system/debug/log/BitmapLog.hx",229,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_236_clearAt,"flixel.system.debug.log.BitmapLog","clearAt",0x8c242e35,"flixel.system.debug.log.BitmapLog.clearAt","flixel/system/debug/log/BitmapLog.hx",236,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_249_clear,"flixel.system.debug.log.BitmapLog","clear",0x21d708a2,"flixel.system.debug.log.BitmapLog.clear","flixel/system/debug/log/BitmapLog.hx",249,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_255_drawCanvas,"flixel.system.debug.log.BitmapLog","drawCanvas",0x2ba56cc7,"flixel.system.debug.log.BitmapLog.drawCanvas","flixel/system/debug/log/BitmapLog.hx",255,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_297_setIndex,"flixel.system.debug.log.BitmapLog","setIndex",0xaec7481b,"flixel.system.debug.log.BitmapLog.setIndex","flixel/system/debug/log/BitmapLog.hx",297,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_309_validIndex,"flixel.system.debug.log.BitmapLog","validIndex",0x3df3a141,"flixel.system.debug.log.BitmapLog.validIndex","flixel/system/debug/log/BitmapLog.hx",309,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_323_drawBoundingBox,"flixel.system.debug.log.BitmapLog","drawBoundingBox",0xaffc5ab8,"flixel.system.debug.log.BitmapLog.drawBoundingBox","flixel/system/debug/log/BitmapLog.hx",323,0x69d60e7d)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace log{

void BitmapLog_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::_hx_system::debug::log::BitmapLog,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_61_new)
HXLINE(  61)			_gthis->setIndex((_gthis->index - 1));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::_hx_system::debug::log::BitmapLog,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_62_new)
HXLINE(  62)			_gthis->setIndex((_gthis->index + 1));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_28_new)
HXLINE(  40)		this->state = ::flixel::_hx_system::debug::log::_BitmapLog::State_obj::IDLE_dyn();
HXLINE(  39)		this->index = -1;
HXLINE(  37)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  37)		point->_inPool = false;
HXDLIN(  37)		this->canvasOffset = point;
HXLINE(  32)		this->entries = ::Array_obj< ::Dynamic>::__new();
HXLINE(  30)		this->zoom = ((Float)1);
HXLINE(  43)		 ::flixel::_hx_system::debug::log::BitmapLog _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  44)		super::__construct(HX_("BitmapLog",b5,3b,ae,68),::flixel::_hx_system::debug::Icon_obj::bitmapLog,null(),null(),null(),null(),null(),null());
HXLINE(  46)		this->minSize->x = ( (Float)(165) );
HXLINE(  47)		this->minSize->y = ( (Float)(31) );
HXLINE(  49)		int _hx_tmp = ::Std_obj::_hx_int(this->get_width());
HXDLIN(  49)		this->canvas =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((this->get_height() - ( (Float)(15) ))),true,0),null(),null());
HXLINE(  50)		this->canvas->set_x(( (Float)(0) ));
HXLINE(  51)		this->canvas->set_y(( (Float)(15) ));
HXLINE(  52)		this->addChild(this->canvas);
HXLINE(  54)		this->buttonRemove =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX ,::flixel::_hx_system::debug::Icon_obj::close,this->removeCurrent_dyn(),null());
HXLINE(  55)		 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp1 = this->buttonRemove;
HXDLIN(  55)		Float _hx_tmp2 = this->get_width();
HXDLIN(  55)		_hx_tmp1->set_x(((_hx_tmp2 - this->buttonRemove->get_width()) - ( (Float)(3) )));
HXLINE(  56)		this->buttonRemove->set_y(( (Float)(18) ));
HXLINE(  57)		this->addChild(this->buttonRemove);
HXLINE(  59)		this->header =  ::flixel::_hx_system::debug::log::Header_obj::__alloc( HX_CTX );
HXLINE(  60)		this->header->set_y(( (Float)(2) ));
HXLINE(  61)		this->header->onPrev->add( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  62)		this->header->onNext->add( ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(  63)		this->header->onReset->add(this->resetSettings_dyn());
HXLINE(  64)		this->addChild(this->header);
HXLINE(  66)		this->footer =  ::flixel::_hx_system::debug::log::Footer_obj::__alloc( HX_CTX );
HXLINE(  67)		this->addChild(this->footer);
HXLINE(  69)		this->setVisible(false);
HXLINE(  72)		this->addEventListener(HX_("mouseWheel",36,28,87,e7),this->onMouseWheel_dyn(),null(),null(),null());
HXLINE(  75)		::flixel::FlxG_obj::signals->preStateSwitch->add(this->clear_dyn());
HXLINE(  78)		this->removeChild(this->_handle);
HXLINE(  79)		this->addChild(this->_handle);
HXLINE(  81)		this->removeChild(this->_shadow);
            	}

Dynamic BitmapLog_obj::__CreateEmpty() { return new BitmapLog_obj; }

void *BitmapLog_obj::_hx_vtable = 0;

Dynamic BitmapLog_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BitmapLog_obj > _hx_result = new BitmapLog_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BitmapLog_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f4a4e2d) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2f4a4e2d;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x39123ef8 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void BitmapLog_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_88_destroy)
HXLINE(  89)		this->super::destroy();
HXLINE(  91)		this->clear();
HXLINE(  93)		this->removeChild(this->canvas);
HXLINE(  94)		 ::openfl::display::Bitmap _hx_tmp = this->canvas;
HXDLIN(  94)		_hx_tmp->set_bitmapData(::flixel::util::FlxDestroyUtil_obj::dispose(this->canvas->get_bitmapData()));
HXLINE(  95)		this->entries->resize(0);
HXLINE(  97)		this->removeEventListener(HX_("mouseWheel",36,28,87,e7),this->onMouseWheel_dyn(),null());
HXLINE(  99)		::flixel::FlxG_obj::signals->preStateSwitch->remove(this->clear_dyn());
            	}


void BitmapLog_obj::onMouseWheel( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_103_onMouseWheel)
HXLINE( 104)		int _hx_tmp;
HXDLIN( 104)		if ((e->delta < 0)) {
HXLINE( 104)			_hx_tmp = -1;
            		}
            		else {
HXLINE( 104)			_hx_tmp = 1;
            		}
HXDLIN( 104)		this->zoom = ::Math_obj::max(((Float)0.01),(this->zoom + (( (Float)(_hx_tmp) ) * ((Float)0.25))));
HXLINE( 105)		this->drawCanvas();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,onMouseWheel,(void))

void BitmapLog_obj::onMouseDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_109_onMouseDown)
HXLINE( 110)		this->super::onMouseDown(e);
HXLINE( 112)		bool _hx_tmp;
HXDLIN( 112)		if ((this->_overHeader == false)) {
HXLINE( 112)			_hx_tmp = (this->_overHandle == false);
            		}
            		else {
HXLINE( 112)			_hx_tmp = false;
            		}
HXDLIN( 112)		if (_hx_tmp) {
HXLINE( 113)			this->state = ::flixel::_hx_system::debug::log::_BitmapLog::State_obj::DRAG(e->stageX,e->stageY,this->canvasOffset->x,this->canvasOffset->y);
            		}
            	}


void BitmapLog_obj::onMouseUp( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_117_onMouseUp)
HXLINE( 118)		this->super::onMouseUp(e);
HXLINE( 119)		this->state = ::flixel::_hx_system::debug::log::_BitmapLog::State_obj::IDLE_dyn();
            	}


void BitmapLog_obj::onMouseMove( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_123_onMouseMove)
HXLINE( 124)		this->super::onMouseMove(e);
HXLINE( 126)		{
HXLINE( 126)			 ::flixel::_hx_system::debug::log::_BitmapLog::State _g = this->state;
HXDLIN( 126)			switch((int)(_g->_hx_getIndex())){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
HXLINE( 129)					Float startX = _g->_hx_getFloat(0);
HXDLIN( 129)					Float startY = _g->_hx_getFloat(1);
HXDLIN( 129)					Float offsetStartX = _g->_hx_getFloat(2);
HXDLIN( 129)					Float offsetStartY = _g->_hx_getFloat(3);
HXDLIN( 129)					{
HXLINE( 130)						this->canvasOffset->set_x(((e->stageX - startX) + offsetStartX));
HXLINE( 131)						this->canvasOffset->set_y(((e->stageY - startY) + offsetStartY));
HXLINE( 132)						this->drawCanvas();
            					}
            				}
            				break;
            			}
            		}
            	}


void BitmapLog_obj::updateSize(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_137_updateSize)
HXLINE( 138)		this->super::updateSize();
HXLINE( 140)		 ::openfl::display::Bitmap _hx_tmp = this->_background;
HXDLIN( 140)		int _hx_tmp1 = this->_height;
HXDLIN( 140)		_hx_tmp->set_scaleY((( (Float)(_hx_tmp1) ) - (this->_header->get_height() * ( (Float)(2) ))));
            	}


void BitmapLog_obj::resize(Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_144_resize)
HXLINE( 145)		this->super::resize(width,height);
HXLINE( 147)		 ::openfl::display::Bitmap _hx_tmp = this->canvas;
HXDLIN( 147)		_hx_tmp->set_bitmapData(::flixel::util::FlxDestroyUtil_obj::dispose(this->canvas->get_bitmapData()));
HXLINE( 149)		int canvasWidth = this->_width;
HXDLIN( 149)		int canvasWidth1 = ::Std_obj::_hx_int((( (Float)(canvasWidth) ) - this->canvas->get_x()));
HXLINE( 150)		int canvasHeight = this->_height;
HXDLIN( 150)		Float canvasHeight1 = (( (Float)(canvasHeight) ) - this->canvas->get_y());
HXDLIN( 150)		int canvasHeight2 = ::Std_obj::_hx_int((canvasHeight1 - ( (Float)(this->footer->getHeight()) )));
HXLINE( 152)		bool _hx_tmp1;
HXDLIN( 152)		if ((canvasWidth1 > 0)) {
HXLINE( 152)			_hx_tmp1 = (canvasHeight2 > 0);
            		}
            		else {
HXLINE( 152)			_hx_tmp1 = false;
            		}
HXDLIN( 152)		if (_hx_tmp1) {
HXLINE( 154)			 ::openfl::display::Bitmap _hx_tmp2 = this->canvas;
HXDLIN( 154)			_hx_tmp2->set_bitmapData( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,canvasWidth1,canvasHeight2,true,0));
HXLINE( 155)			this->drawCanvas();
            		}
HXLINE( 158)		 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp3 = this->buttonRemove;
HXDLIN( 158)		int _hx_tmp4 = this->_width;
HXDLIN( 158)		_hx_tmp3->set_x(((( (Float)(_hx_tmp4) ) - this->buttonRemove->get_width()) - ( (Float)(3) )));
HXLINE( 160)		this->header->resize(( (Float)((this->_width - 5)) ));
HXLINE( 161)		 ::flixel::_hx_system::debug::log::Footer _hx_tmp5 = this->footer;
HXDLIN( 161)		int _hx_tmp6 = this->_height;
HXDLIN( 161)		_hx_tmp5->set_y(( (Float)((_hx_tmp6 - this->footer->getHeight())) ));
HXLINE( 162)		this->footer->resize(( (Float)(this->_width) ));
            	}


void BitmapLog_obj::resetSettings(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_166_resetSettings)
HXLINE( 167)		this->zoom = ( (Float)(1) );
HXLINE( 168)		{
HXLINE( 168)			 ::flixel::math::FlxBasePoint this1 = this->canvasOffset;
HXDLIN( 168)			this1->set_x(( (Float)(0) ));
HXDLIN( 168)			this1->set_y(( (Float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,resetSettings,(void))

int BitmapLog_obj::indexOf( ::openfl::display::BitmapData bitmap){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_172_indexOf)
HXLINE( 173)		{
HXLINE( 173)			int _g_current = 0;
HXDLIN( 173)			::Array< ::Dynamic> _g_array = this->entries;
HXDLIN( 173)			while((_g_current < _g_array->length)){
HXLINE( 173)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 173)				_g_current = (_g_current + 1);
HXDLIN( 173)				int _g_key = (_g_current - 1);
HXDLIN( 173)				int i = _g_key;
HXDLIN( 173)				 ::Dynamic entry = _g_value;
HXLINE( 175)				if (::hx::IsInstanceEq( entry->__Field(HX_("bitmap",ef,0f,0c,f1),::hx::paccDynamic),bitmap )) {
HXLINE( 176)					return i;
            				}
            			}
            		}
HXLINE( 178)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,indexOf,return )

 ::Dynamic BitmapLog_obj::entryOf( ::openfl::display::BitmapData bitmap){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_182_entryOf)
HXLINE( 183)		{
HXLINE( 183)			int _g = 0;
HXDLIN( 183)			::Array< ::Dynamic> _g1 = this->entries;
HXDLIN( 183)			while((_g < _g1->length)){
HXLINE( 183)				 ::Dynamic entry = _g1->__get(_g);
HXDLIN( 183)				_g = (_g + 1);
HXLINE( 185)				if (::hx::IsInstanceEq( entry->__Field(HX_("bitmap",ef,0f,0c,f1),::hx::paccDynamic),bitmap )) {
HXLINE( 186)					return entry;
            				}
            			}
            		}
HXLINE( 188)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,entryOf,return )

bool BitmapLog_obj::has( ::openfl::display::BitmapData bitmap){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_192_has)
HXLINE( 193)		{
HXLINE( 193)			int _g_current = 0;
HXDLIN( 193)			::Array< ::Dynamic> _g_array = this->entries;
HXDLIN( 193)			while((_g_current < _g_array->length)){
HXLINE( 193)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 193)				_g_current = (_g_current + 1);
HXDLIN( 193)				int _g_key = (_g_current - 1);
HXDLIN( 193)				int i = _g_key;
HXDLIN( 193)				 ::Dynamic entry = _g_value;
HXLINE( 195)				if (::hx::IsInstanceEq( entry->__Field(HX_("bitmap",ef,0f,0c,f1),::hx::paccDynamic),bitmap )) {
HXLINE( 196)					return true;
            				}
            			}
            		}
HXLINE( 198)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,has,return )

bool BitmapLog_obj::add( ::openfl::display::BitmapData bitmap,::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_205_add)
HXLINE( 206)		if (::hx::IsNull( bitmap )) {
HXLINE( 207)			return false;
            		}
HXLINE( 209)		this->setVisible(true);
HXLINE( 211)		 ::Dynamic entry = this->entryOf(bitmap);
HXLINE( 212)		bool _hx_tmp;
HXDLIN( 212)		if (::hx::IsNotNull( entry )) {
HXLINE( 212)			_hx_tmp = ::hx::IsEq( entry->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),name );
            		}
            		else {
HXLINE( 212)			_hx_tmp = false;
            		}
HXDLIN( 212)		if (_hx_tmp) {
HXLINE( 213)			return true;
            		}
HXLINE( 215)		this->entries->push( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("bitmap",ef,0f,0c,f1),bitmap)
            			->setFixed(1,HX_("name",4b,72,ff,48),name)));
HXLINE( 216)		int _hx_tmp1;
HXDLIN( 216)		if ((this->index < 0)) {
HXLINE( 216)			_hx_tmp1 = 0;
            		}
            		else {
HXLINE( 216)			_hx_tmp1 = this->index;
            		}
HXDLIN( 216)		this->setIndex(_hx_tmp1);
HXLINE( 217)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapLog_obj,add,return )

void BitmapLog_obj::remove( ::openfl::display::BitmapData bitmap){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_221_remove)
HXLINE( 222)		int index = this->indexOf(bitmap);
HXLINE( 223)		if ((index != -1)) {
HXLINE( 224)			this->clearAt(index);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,remove,(void))

void BitmapLog_obj::removeCurrent(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_229_removeCurrent)
HXDLIN( 229)		this->clearAt(this->index);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,removeCurrent,(void))

void BitmapLog_obj::clearAt(::hx::Null< int >  __o_index){
            		int index = __o_index.Default(-1);
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_236_clearAt)
HXLINE( 237)		if ((index == -1)) {
HXLINE( 238)			index = (this->entries->length - 1);
            		}
HXLINE( 240)		this->entries->removeRange(index,1);
HXLINE( 242)		if ((index > (this->entries->length - 1))) {
HXLINE( 243)			this->setIndex((this->entries->length - 1));
            		}
            		else {
HXLINE( 245)			this->drawCanvas();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,clearAt,(void))

void BitmapLog_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_249_clear)
HXLINE( 250)		this->entries->resize(0);
HXLINE( 251)		this->drawCanvas();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,clear,(void))

void BitmapLog_obj::drawCanvas(){
            	HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_255_drawCanvas)
HXLINE( 256)		if (::hx::IsNull( this->canvas->get_bitmapData() )) {
HXLINE( 259)			return;
            		}
HXLINE( 262)		 ::openfl::display::BitmapData canvasBmd = this->canvas->get_bitmapData();
HXLINE( 264)		if ((this->index < 0)) {
HXLINE( 267)			canvasBmd->fillRect(canvasBmd->rect,-1);
HXLINE( 268)			canvasBmd->fillRect(canvasBmd->rect,0);
HXLINE( 269)			return;
            		}
HXLINE( 272)		 ::openfl::display::BitmapData bitmap = ( ( ::openfl::display::BitmapData)(this->entries->__get(this->index)->__Field(HX_("bitmap",ef,0f,0c,f1),::hx::paccDynamic)) );
HXLINE( 274)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 274)		point->_inPool = false;
HXDLIN( 274)		 ::flixel::math::FlxBasePoint point1 = point;
HXLINE( 275)		point1->set_x(((( (Float)(canvasBmd->width) ) / ( (Float)(2) )) - ((( (Float)(bitmap->width) ) * this->zoom) / ( (Float)(2) ))));
HXLINE( 276)		point1->set_y(((( (Float)(canvasBmd->height) ) / ( (Float)(2) )) - ((( (Float)(bitmap->height) ) * this->zoom) / ( (Float)(2) ))));
HXLINE( 278)		{
HXLINE( 278)			 ::flixel::math::FlxBasePoint point2 = this->canvasOffset;
HXDLIN( 278)			{
HXLINE( 278)				Float y = point2->y;
HXDLIN( 278)				point1->set_x((point1->x + point2->x));
HXDLIN( 278)				point1->set_y((point1->y + y));
            			}
HXDLIN( 278)			{
HXLINE( 278)				 ::flixel::math::FlxBasePoint _this = point2;
HXDLIN( 278)				if (_this->_weak) {
HXLINE( 278)					_this->put();
            				}
            			}
            		}
HXLINE( 280)		 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 281)		matrix->identity();
HXLINE( 282)		matrix->scale(this->zoom,this->zoom);
HXLINE( 283)		matrix->translate(point1->x,point1->y);
HXLINE( 284)		point1->put();
HXLINE( 286)		canvasBmd->fillRect(canvasBmd->rect,0);
HXLINE( 287)		canvasBmd->draw(bitmap,matrix,null(),null(),canvasBmd->rect,false);
HXLINE( 289)		this->drawBoundingBox(bitmap);
HXLINE( 290)		canvasBmd->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,matrix,null(),null(),canvasBmd->rect,false);
HXLINE( 292)		this->header->setText((this->index + 1),this->entries->length,bitmap->width,bitmap->height);
HXLINE( 293)		this->footer->setText(this->entries->__get(this->index));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,drawCanvas,(void))

bool BitmapLog_obj::setIndex(int index){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_297_setIndex)
HXLINE( 298)		this->index = this->validIndex(index);
HXLINE( 300)		if ((this->index < 0)) {
HXLINE( 301)			this->header->clear();
            		}
HXLINE( 303)		{
HXLINE( 303)			this->zoom = ( (Float)(1) );
HXDLIN( 303)			{
HXLINE( 303)				 ::flixel::math::FlxBasePoint this1 = this->canvasOffset;
HXDLIN( 303)				this1->set_x(( (Float)(0) ));
HXDLIN( 303)				this1->set_y(( (Float)(0) ));
            			}
            		}
HXLINE( 304)		this->drawCanvas();
HXLINE( 305)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,setIndex,return )

int BitmapLog_obj::validIndex(int index){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_309_validIndex)
HXLINE( 310)		if ((this->entries->length == 0)) {
HXLINE( 311)			return -1;
            		}
HXLINE( 313)		if ((index < 0)) {
HXLINE( 314)			return (this->entries->length - 1);
            		}
HXLINE( 316)		if ((index >= this->entries->length)) {
HXLINE( 317)			return 0;
            		}
HXLINE( 319)		return index;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,validIndex,return )

void BitmapLog_obj::drawBoundingBox( ::openfl::display::BitmapData bitmap){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_323_drawBoundingBox)
HXLINE( 324)		 ::openfl::display::Graphics gfx = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXLINE( 325)		gfx->clear();
HXLINE( 326)		gfx->lineStyle(1,-65536,((Float)0.75),false,1,null(),null(),null());
HXLINE( 327)		Float offset = (( (Float)(1) ) / this->zoom);
HXLINE( 328)		gfx->drawRect(-(offset),-(offset),(bitmap->width + offset),(bitmap->height + offset));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,drawBoundingBox,(void))


::hx::ObjectPtr< BitmapLog_obj > BitmapLog_obj::__new() {
	::hx::ObjectPtr< BitmapLog_obj > __this = new BitmapLog_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BitmapLog_obj > BitmapLog_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BitmapLog_obj *__this = (BitmapLog_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BitmapLog_obj), true, "flixel.system.debug.log.BitmapLog"));
	*(void **)__this = BitmapLog_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BitmapLog_obj::BitmapLog_obj()
{
}

void BitmapLog_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapLog);
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(entries,"entries");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(header,"header");
	HX_MARK_MEMBER_NAME(footer,"footer");
	HX_MARK_MEMBER_NAME(buttonRemove,"buttonRemove");
	HX_MARK_MEMBER_NAME(canvasOffset,"canvasOffset");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(state,"state");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BitmapLog_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(entries,"entries");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(header,"header");
	HX_VISIT_MEMBER_NAME(footer,"footer");
	HX_VISIT_MEMBER_NAME(buttonRemove,"buttonRemove");
	HX_VISIT_MEMBER_NAME(canvasOffset,"canvasOffset");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(state,"state");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BitmapLog_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return ::hx::Val( has_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return ::hx::Val( zoom ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return ::hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"state") ) { return ::hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"canvas") ) { return ::hx::Val( canvas ); }
		if (HX_FIELD_EQ(inName,"header") ) { return ::hx::Val( header ); }
		if (HX_FIELD_EQ(inName,"footer") ) { return ::hx::Val( footer ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { return ::hx::Val( entries ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"indexOf") ) { return ::hx::Val( indexOf_dyn() ); }
		if (HX_FIELD_EQ(inName,"entryOf") ) { return ::hx::Val( entryOf_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearAt") ) { return ::hx::Val( clearAt_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setIndex") ) { return ::hx::Val( setIndex_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return ::hx::Val( onMouseUp_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateSize") ) { return ::hx::Val( updateSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawCanvas") ) { return ::hx::Val( drawCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"validIndex") ) { return ::hx::Val( validIndex_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return ::hx::Val( onMouseMove_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"buttonRemove") ) { return ::hx::Val( buttonRemove ); }
		if (HX_FIELD_EQ(inName,"canvasOffset") ) { return ::hx::Val( canvasOffset ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return ::hx::Val( onMouseWheel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resetSettings") ) { return ::hx::Val( resetSettings_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeCurrent") ) { return ::hx::Val( removeCurrent_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"drawBoundingBox") ) { return ::hx::Val( drawBoundingBox_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BitmapLog_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::flixel::_hx_system::debug::log::_BitmapLog::State >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"header") ) { header=inValue.Cast<  ::flixel::_hx_system::debug::log::Header >(); return inValue; }
		if (HX_FIELD_EQ(inName,"footer") ) { footer=inValue.Cast<  ::flixel::_hx_system::debug::log::Footer >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { entries=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"buttonRemove") ) { buttonRemove=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvasOffset") ) { canvasOffset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapLog_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("entries",50,2d,5f,79));
	outFields->push(HX_("canvas",d8,54,42,b8));
	outFields->push(HX_("header",8d,09,00,fd));
	outFields->push(HX_("footer",9b,3e,98,fb));
	outFields->push(HX_("buttonRemove",d6,73,46,ac));
	outFields->push(HX_("canvasOffset",8b,92,a9,0b));
	outFields->push(HX_("index",12,9b,14,be));
	outFields->push(HX_("state",11,76,0b,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BitmapLog_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(BitmapLog_obj,zoom),HX_("zoom",13,a3,f8,50)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BitmapLog_obj,entries),HX_("entries",50,2d,5f,79)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(BitmapLog_obj,canvas),HX_("canvas",d8,54,42,b8)},
	{::hx::fsObject /*  ::flixel::_hx_system::debug::log::Header */ ,(int)offsetof(BitmapLog_obj,header),HX_("header",8d,09,00,fd)},
	{::hx::fsObject /*  ::flixel::_hx_system::debug::log::Footer */ ,(int)offsetof(BitmapLog_obj,footer),HX_("footer",9b,3e,98,fb)},
	{::hx::fsObject /*  ::flixel::_hx_system::ui::FlxSystemButton */ ,(int)offsetof(BitmapLog_obj,buttonRemove),HX_("buttonRemove",d6,73,46,ac)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(BitmapLog_obj,canvasOffset),HX_("canvasOffset",8b,92,a9,0b)},
	{::hx::fsInt,(int)offsetof(BitmapLog_obj,index),HX_("index",12,9b,14,be)},
	{::hx::fsObject /*  ::flixel::_hx_system::debug::log::_BitmapLog::State */ ,(int)offsetof(BitmapLog_obj,state),HX_("state",11,76,0b,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BitmapLog_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapLog_obj_sMemberFields[] = {
	HX_("zoom",13,a3,f8,50),
	HX_("entries",50,2d,5f,79),
	HX_("canvas",d8,54,42,b8),
	HX_("header",8d,09,00,fd),
	HX_("footer",9b,3e,98,fb),
	HX_("buttonRemove",d6,73,46,ac),
	HX_("canvasOffset",8b,92,a9,0b),
	HX_("index",12,9b,14,be),
	HX_("state",11,76,0b,84),
	HX_("destroy",fa,2c,86,24),
	HX_("onMouseWheel",35,ca,ca,bf),
	HX_("onMouseDown",08,94,05,11),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onMouseMove",b7,7e,f8,16),
	HX_("updateSize",6a,8b,08,05),
	HX_("resize",f4,59,7b,08),
	HX_("resetSettings",d2,69,dc,bb),
	HX_("indexOf",c9,48,bf,e0),
	HX_("entryOf",29,3e,6b,79),
	HX_("has",5a,3f,4f,00),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	HX_("removeCurrent",55,f8,9d,a4),
	HX_("clearAt",e0,e7,44,ab),
	HX_("clear",8d,71,5b,48),
	HX_("drawCanvas",fc,cf,05,fa),
	HX_("setIndex",10,04,49,cc),
	HX_("validIndex",76,04,54,0c),
	HX_("drawBoundingBox",63,37,3f,4b),
	::String(null()) };

::hx::Class BitmapLog_obj::__mClass;

void BitmapLog_obj::__register()
{
	BitmapLog_obj _hx_dummy;
	BitmapLog_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.log.BitmapLog",c3,c9,7a,56);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BitmapLog_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BitmapLog_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapLog_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapLog_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace log
