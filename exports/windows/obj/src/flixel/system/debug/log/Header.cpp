// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_system_debug_DebuggerUtil
#include <flixel/system/debug/DebuggerUtil.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Icon
#include <flixel/system/debug/Icon.h>
#endif
#ifndef INCLUDED_flixel_system_debug__Icon_ArrowLeft
#include <flixel/system/debug/_Icon/ArrowLeft.h>
#endif
#ifndef INCLUDED_flixel_system_debug__Icon_ArrowRight
#include <flixel/system/debug/_Icon/ArrowRight.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_Header
#include <flixel/system/debug/log/Header.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_70f93d70e799bea5_338_new,"flixel.system.debug.log.Header","new",0x8254b751,"flixel.system.debug.log.Header.new","flixel/system/debug/log/BitmapLog.hx",338,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_70f93d70e799bea5_373_clear,"flixel.system.debug.log.Header","clear",0xf998b6be,"flixel.system.debug.log.Header.clear","flixel/system/debug/log/BitmapLog.hx",373,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_70f93d70e799bea5_379_setText,"flixel.system.debug.log.Header","setText",0x817bc0e0,"flixel.system.debug.log.Header.setText","flixel/system/debug/log/BitmapLog.hx",379,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_70f93d70e799bea5_385_resize,"flixel.system.debug.log.Header","resize",0x6cda9fa3,"flixel.system.debug.log.Header.resize","flixel/system/debug/log/BitmapLog.hx",385,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_70f93d70e799bea5_394_getHeight,"flixel.system.debug.log.Header","getHeight",0xef08c2ce,"flixel.system.debug.log.Header.getHeight","flixel/system/debug/log/BitmapLog.hx",394,0x69d60e7d)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace log{

void Header_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_70f93d70e799bea5_338_new)
HXLINE( 342)		this->onNext =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );
HXLINE( 341)		this->onPrev =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );
HXLINE( 340)		this->onReset =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );
HXLINE( 352)		super::__construct();
HXLINE( 353)		this->prev =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX ,::flixel::_hx_system::debug::Icon_obj::arrowLeft,this->onPrev->dispatch,null());
HXLINE( 354)		this->addChild(this->prev);
HXLINE( 357)		this->reset =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX ,null(),this->onReset->dispatch,null());
HXLINE( 358)		this->addChild(this->reset);
HXLINE( 359)		this->counter = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField(0,-3,null(),null());
HXLINE( 360)		this->counter->set_text(HX_("0/0",51,95,24,00));
HXLINE( 361)		this->counter->set_x(( (Float)(-1) ));
HXLINE( 362)		this->reset->addChild(this->counter);
HXLINE( 364)		this->next =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX ,::flixel::_hx_system::debug::Icon_obj::arrowRight,this->onNext->dispatch,null());
HXLINE( 365)		this->next->set_x(( (Float)(60) ));
HXLINE( 366)		this->addChild(this->next);
HXLINE( 368)		this->dimensions = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField(0,-3,null(),null());
HXLINE( 369)		this->addChild(this->dimensions);
            	}

Dynamic Header_obj::__CreateEmpty() { return new Header_obj; }

void *Header_obj::_hx_vtable = 0;

Dynamic Header_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Header_obj > _hx_result = new Header_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Header_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x193c8b6d) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x193c8b6d;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Header_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_70f93d70e799bea5_373_clear)
HXLINE( 374)		this->setText(0,0,0,0);
HXLINE( 375)		this->dimensions->set_text(HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Header_obj,clear,(void))

void Header_obj::setText(int index,int total,int width,int height){
            	HX_STACKFRAME(&_hx_pos_70f93d70e799bea5_379_setText)
HXLINE( 380)		this->counter->set_text((((HX_("",00,00,00,00) + index) + HX_("/",2f,00,00,00)) + total));
HXLINE( 381)		this->dimensions->set_text((((HX_("",00,00,00,00) + width) + HX_(" x ",c8,b0,18,00)) + height));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Header_obj,setText,(void))

void Header_obj::resize(Float width){
            	HX_STACKFRAME(&_hx_pos_70f93d70e799bea5_385_resize)
HXLINE( 386)		 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp = this->next;
HXDLIN( 386)		_hx_tmp->set_x(((width - this->next->get_width()) - ( (Float)(3) )));
HXLINE( 387)		 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp1 = this->reset;
HXDLIN( 387)		Float _hx_tmp2 = this->next->get_x();
HXDLIN( 387)		_hx_tmp1->set_x(((_hx_tmp2 - this->reset->get_width()) - ( (Float)(3) )));
HXLINE( 388)		 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp3 = this->prev;
HXDLIN( 388)		Float _hx_tmp4 = this->reset->get_x();
HXDLIN( 388)		_hx_tmp3->set_x(((_hx_tmp4 - this->prev->get_width()) - ( (Float)(3) )));
HXLINE( 389)		 ::openfl::text::TextField _hx_tmp5 = this->dimensions;
HXDLIN( 389)		_hx_tmp5->set_x(((width - this->dimensions->get_textWidth()) / ( (Float)(2) )));
HXLINE( 390)		this->dimensions->set_visible((width > 200));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Header_obj,resize,(void))

int Header_obj::getHeight(){
            	HX_STACKFRAME(&_hx_pos_70f93d70e799bea5_394_getHeight)
HXDLIN( 394)		return 15;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Header_obj,getHeight,return )


::hx::ObjectPtr< Header_obj > Header_obj::__new() {
	::hx::ObjectPtr< Header_obj > __this = new Header_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Header_obj > Header_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Header_obj *__this = (Header_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Header_obj), true, "flixel.system.debug.log.Header"));
	*(void **)__this = Header_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Header_obj::Header_obj()
{
}

void Header_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Header);
	HX_MARK_MEMBER_NAME(onReset,"onReset");
	HX_MARK_MEMBER_NAME(onPrev,"onPrev");
	HX_MARK_MEMBER_NAME(onNext,"onNext");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(reset,"reset");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(dimensions,"dimensions");
	HX_MARK_MEMBER_NAME(counter,"counter");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Header_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onReset,"onReset");
	HX_VISIT_MEMBER_NAME(onPrev,"onPrev");
	HX_VISIT_MEMBER_NAME(onNext,"onNext");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(reset,"reset");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(dimensions,"dimensions");
	HX_VISIT_MEMBER_NAME(counter,"counter");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Header_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"prev") ) { return ::hx::Val( prev ); }
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onPrev") ) { return ::hx::Val( onPrev ); }
		if (HX_FIELD_EQ(inName,"onNext") ) { return ::hx::Val( onNext ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onReset") ) { return ::hx::Val( onReset ); }
		if (HX_FIELD_EQ(inName,"counter") ) { return ::hx::Val( counter ); }
		if (HX_FIELD_EQ(inName,"setText") ) { return ::hx::Val( setText_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getHeight") ) { return ::hx::Val( getHeight_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dimensions") ) { return ::hx::Val( dimensions ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Header_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { reset=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onPrev") ) { onPrev=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onNext") ) { onNext=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onReset") ) { onReset=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"counter") ) { counter=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dimensions") ) { dimensions=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Header_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("onReset",30,e8,05,7d));
	outFields->push(HX_("onPrev",b2,c7,e8,ec));
	outFields->push(HX_("onNext",b2,8d,8c,eb));
	outFields->push(HX_("prev",f3,be,5e,4a));
	outFields->push(HX_("reset",cf,49,c8,e6));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("dimensions",4d,be,9f,dc));
	outFields->push(HX_("counter",fc,ae,59,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Header_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal0 */ ,(int)offsetof(Header_obj,onReset),HX_("onReset",30,e8,05,7d)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal0 */ ,(int)offsetof(Header_obj,onPrev),HX_("onPrev",b2,c7,e8,ec)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal0 */ ,(int)offsetof(Header_obj,onNext),HX_("onNext",b2,8d,8c,eb)},
	{::hx::fsObject /*  ::flixel::_hx_system::ui::FlxSystemButton */ ,(int)offsetof(Header_obj,prev),HX_("prev",f3,be,5e,4a)},
	{::hx::fsObject /*  ::flixel::_hx_system::ui::FlxSystemButton */ ,(int)offsetof(Header_obj,reset),HX_("reset",cf,49,c8,e6)},
	{::hx::fsObject /*  ::flixel::_hx_system::ui::FlxSystemButton */ ,(int)offsetof(Header_obj,next),HX_("next",f3,84,02,49)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(Header_obj,dimensions),HX_("dimensions",4d,be,9f,dc)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(Header_obj,counter),HX_("counter",fc,ae,59,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Header_obj_sStaticStorageInfo = 0;
#endif

static ::String Header_obj_sMemberFields[] = {
	HX_("onReset",30,e8,05,7d),
	HX_("onPrev",b2,c7,e8,ec),
	HX_("onNext",b2,8d,8c,eb),
	HX_("prev",f3,be,5e,4a),
	HX_("reset",cf,49,c8,e6),
	HX_("next",f3,84,02,49),
	HX_("dimensions",4d,be,9f,dc),
	HX_("counter",fc,ae,59,1d),
	HX_("clear",8d,71,5b,48),
	HX_("setText",6f,0d,7e,12),
	HX_("resize",f4,59,7b,08),
	HX_("getHeight",1d,91,a2,7e),
	::String(null()) };

::hx::Class Header_obj::__mClass;

void Header_obj::__register()
{
	Header_obj _hx_dummy;
	Header_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.log.Header",df,ba,58,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Header_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Header_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Header_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Header_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace log
