// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_system_debug_ScrollBar
#include <flixel/system/debug/ScrollBar.h>
#endif
#ifndef INCLUDED_flixel_system_debug_ScrollSprite
#include <flixel/system/debug/ScrollSprite.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_20720863b5d7172e_42_new,"flixel.system.debug.ScrollSprite","new",0x2dcd068c,"flixel.system.debug.ScrollSprite.new","flixel/system/debug/ScrollSprite.hx",42,0xb969d163)
HX_DEFINE_STACK_FRAME(_hx_pos_20720863b5d7172e_39_new,"flixel.system.debug.ScrollSprite","new",0x2dcd068c,"flixel.system.debug.ScrollSprite.new","flixel/system/debug/ScrollSprite.hx",39,0xb969d163)
HX_DEFINE_STACK_FRAME(_hx_pos_20720863b5d7172e_11_new,"flixel.system.debug.ScrollSprite","new",0x2dcd068c,"flixel.system.debug.ScrollSprite.new","flixel/system/debug/ScrollSprite.hx",11,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_14_get_maxScrollY,"flixel.system.debug.ScrollSprite","get_maxScrollY",0x821f9705,"flixel.system.debug.ScrollSprite.get_maxScrollY","flixel/system/debug/ScrollSprite.hx",14,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_17_get_viewHeight,"flixel.system.debug.ScrollSprite","get_viewHeight",0x2abbf1c9,"flixel.system.debug.ScrollSprite.get_viewHeight","flixel/system/debug/ScrollSprite.hx",17,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_23_get_scrollY,"flixel.system.debug.ScrollSprite","get_scrollY",0xb2efd5ef,"flixel.system.debug.ScrollSprite.get_scrollY","flixel/system/debug/ScrollSprite.hx",23,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_25_set_scrollY,"flixel.system.debug.ScrollSprite","set_scrollY",0xbd5cdcfb,"flixel.system.debug.ScrollSprite.set_scrollY","flixel/system/debug/ScrollSprite.hx",25,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_48_createScrollBar,"flixel.system.debug.ScrollSprite","createScrollBar",0x7578d956,"flixel.system.debug.ScrollSprite.createScrollBar","flixel/system/debug/ScrollSprite.hx",48,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_53_onMouseScroll,"flixel.system.debug.ScrollSprite","onMouseScroll",0xcf6a4e5f,"flixel.system.debug.ScrollSprite.onMouseScroll","flixel/system/debug/ScrollSprite.hx",53,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_61_setScrollSize,"flixel.system.debug.ScrollSprite","setScrollSize",0xdb1e92dc,"flixel.system.debug.ScrollSprite.setScrollSize","flixel/system/debug/ScrollSprite.hx",61,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_69_updateScroll,"flixel.system.debug.ScrollSprite","updateScroll",0xe4a5234a,"flixel.system.debug.ScrollSprite.updateScroll","flixel/system/debug/ScrollSprite.hx",69,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_85_addChild,"flixel.system.debug.ScrollSprite","addChild",0xf82dba0f,"flixel.system.debug.ScrollSprite.addChild","flixel/system/debug/ScrollSprite.hx",85,0xb969d163)
HX_LOCAL_STACK_FRAME(_hx_pos_20720863b5d7172e_92_isChildVisible,"flixel.system.debug.ScrollSprite","isChildVisible",0xd3bfe294,"flixel.system.debug.ScrollSprite.isChildVisible","flixel/system/debug/ScrollSprite.hx",92,0xb969d163)
namespace flixel{
namespace _hx_system{
namespace debug{

void ScrollSprite_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::_hx_system::debug::ScrollSprite,_gthis) HXARGC(1)
            		void _hx_run( ::openfl::events::Event e){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::flixel::_hx_system::debug::ScrollSprite,_gthis, ::openfl::display::Stage,stage) HXARGC(1)
            			void _hx_run( ::openfl::events::Event _){
            				HX_GC_STACKFRAME(&_hx_pos_20720863b5d7172e_42_new)
HXLINE(  42)				stage->removeEventListener(HX_("mouseWheel",36,28,87,e7),_gthis->onMouseScroll_dyn(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_20720863b5d7172e_39_new)
HXLINE(  40)			 ::openfl::display::Stage stage = _gthis->stage;
HXLINE(  41)			stage->addEventListener(HX_("mouseWheel",36,28,87,e7),_gthis->onMouseScroll_dyn(),null(),null(),null());
HXLINE(  42)			_gthis->addEventListener(HX_("removedFromStage",34,21,76,ba), ::Dynamic(new _hx_Closure_0(_gthis,stage)),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_20720863b5d7172e_11_new)
HXLINE(  32)		this->scrollBar = null();
HXLINE(  31)		this->scroll =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  35)		 ::flixel::_hx_system::debug::ScrollSprite _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  36)		super::__construct();
HXLINE(  38)		this->addEventListener(HX_("addedToStage",63,22,55,0c), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null(),null());
            	}

Dynamic ScrollSprite_obj::__CreateEmpty() { return new ScrollSprite_obj; }

void *ScrollSprite_obj::_hx_vtable = 0;

Dynamic ScrollSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScrollSprite_obj > _hx_result = new ScrollSprite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ScrollSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x569bd0fa) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x569bd0fa;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

Float ScrollSprite_obj::get_maxScrollY(){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_14_get_maxScrollY)
HXDLIN(  14)		Float _hx_tmp = this->get_height();
HXDLIN(  14)		return (_hx_tmp - this->scroll->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollSprite_obj,get_maxScrollY,return )

Float ScrollSprite_obj::get_viewHeight(){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_17_get_viewHeight)
HXDLIN(  17)		return this->scroll->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollSprite_obj,get_viewHeight,return )

Float ScrollSprite_obj::get_scrollY(){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_23_get_scrollY)
HXDLIN(  23)		return this->scroll->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollSprite_obj,get_scrollY,return )

Float ScrollSprite_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_25_set_scrollY)
HXLINE(  26)		this->scroll->y = value;
HXLINE(  27)		this->updateScroll();
HXLINE(  28)		return this->scroll->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollSprite_obj,set_scrollY,return )

 ::flixel::_hx_system::debug::ScrollBar ScrollSprite_obj::createScrollBar(){
            	HX_GC_STACKFRAME(&_hx_pos_20720863b5d7172e_48_createScrollBar)
HXDLIN(  48)		return (this->scrollBar =  ::flixel::_hx_system::debug::ScrollBar_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollSprite_obj,createScrollBar,return )

void ScrollSprite_obj::onMouseScroll( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_53_onMouseScroll)
HXDLIN(  53)		bool _hx_tmp;
HXDLIN(  53)		bool _hx_tmp1;
HXDLIN(  53)		bool _hx_tmp2;
HXDLIN(  53)		if ((this->get_mouseX() > 0)) {
HXDLIN(  53)			Float _hx_tmp3 = this->get_mouseX();
HXDLIN(  53)			_hx_tmp2 = (_hx_tmp3 < this->scroll->width);
            		}
            		else {
HXDLIN(  53)			_hx_tmp2 = false;
            		}
HXDLIN(  53)		if (_hx_tmp2) {
HXDLIN(  53)			Float _hx_tmp4 = this->get_mouseY();
HXDLIN(  53)			_hx_tmp1 = ((_hx_tmp4 - this->scroll->y) > 0);
            		}
            		else {
HXDLIN(  53)			_hx_tmp1 = false;
            		}
HXDLIN(  53)		if (_hx_tmp1) {
HXDLIN(  53)			Float _hx_tmp5 = this->get_mouseY();
HXDLIN(  53)			_hx_tmp = ((_hx_tmp5 - this->scroll->y) < this->scroll->height);
            		}
            		else {
HXDLIN(  53)			_hx_tmp = false;
            		}
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  55)			 ::openfl::geom::Rectangle fh = this->scroll;
HXDLIN(  55)			fh->y = (fh->y - ( (Float)(e->delta) ));
HXLINE(  56)			this->updateScroll();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollSprite_obj,onMouseScroll,(void))

void ScrollSprite_obj::setScrollSize(Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_61_setScrollSize)
HXLINE(  62)		this->scroll->width = width;
HXLINE(  63)		this->scroll->height = height;
HXLINE(  65)		this->updateScroll();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ScrollSprite_obj,setScrollSize,(void))

void ScrollSprite_obj::updateScroll(){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_69_updateScroll)
HXLINE(  70)		this->set_scrollRect(null());
HXLINE(  72)		Float _hx_tmp = this->scroll->get_bottom();
HXDLIN(  72)		if ((_hx_tmp > this->get_height())) {
HXLINE(  73)			Float _hx_tmp1 = this->get_height();
HXDLIN(  73)			this->scroll->y = (_hx_tmp1 - this->scroll->height);
            		}
HXLINE(  75)		if ((this->scroll->y < 0)) {
HXLINE(  76)			this->scroll->y = ( (Float)(0) );
            		}
HXLINE(  78)		this->set_scrollRect(this->scroll);
HXLINE(  80)		if (::hx::IsNotNull( this->scrollBar )) {
HXLINE(  81)			this->scrollBar->onViewChange();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollSprite_obj,updateScroll,(void))

 ::openfl::display::DisplayObject ScrollSprite_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_85_addChild)
HXLINE(  86)		this->super::addChild(child);
HXLINE(  87)		this->updateScroll();
HXLINE(  88)		return child;
            	}


bool ScrollSprite_obj::isChildVisible( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_20720863b5d7172e_92_isChildVisible)
HXLINE(  93)		if ((this->getChildIndex(child) == -1)) {
HXLINE(  94)			HX_STACK_DO_THROW(HX_("Invalid child, not a child of this container",31,8b,e8,fe));
            		}
HXLINE(  96)		Float _hx_tmp = child->get_y();
HXDLIN(  96)		if ((_hx_tmp < this->scroll->get_bottom())) {
HXLINE(  96)			Float _hx_tmp1 = child->get_y();
HXDLIN(  96)			Float _hx_tmp2 = (_hx_tmp1 + child->get_height());
HXDLIN(  96)			return (_hx_tmp2 > this->scroll->y);
            		}
            		else {
HXLINE(  96)			return false;
            		}
HXDLIN(  96)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollSprite_obj,isChildVisible,return )


::hx::ObjectPtr< ScrollSprite_obj > ScrollSprite_obj::__new() {
	::hx::ObjectPtr< ScrollSprite_obj > __this = new ScrollSprite_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ScrollSprite_obj > ScrollSprite_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ScrollSprite_obj *__this = (ScrollSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScrollSprite_obj), true, "flixel.system.debug.ScrollSprite"));
	*(void **)__this = ScrollSprite_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ScrollSprite_obj::ScrollSprite_obj()
{
}

void ScrollSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScrollSprite);
	HX_MARK_MEMBER_NAME(scroll,"scroll");
	HX_MARK_MEMBER_NAME(scrollBar,"scrollBar");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ScrollSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(scroll,"scroll");
	HX_VISIT_MEMBER_NAME(scrollBar,"scrollBar");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ScrollSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"scroll") ) { return ::hx::Val( scroll ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollY() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return ::hx::Val( addChild_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { return ::hx::Val( scrollBar ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxScrollY() ); }
		if (HX_FIELD_EQ(inName,"viewHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_viewHeight() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_scrollY") ) { return ::hx::Val( get_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateScroll") ) { return ::hx::Val( updateScroll_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onMouseScroll") ) { return ::hx::Val( onMouseScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScrollSize") ) { return ::hx::Val( setScrollSize_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_maxScrollY") ) { return ::hx::Val( get_maxScrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_viewHeight") ) { return ::hx::Val( get_viewHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"isChildVisible") ) { return ::hx::Val( isChildVisible_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createScrollBar") ) { return ::hx::Val( createScrollBar_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScrollSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"scroll") ) { scroll=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrollBar") ) { scrollBar=inValue.Cast<  ::flixel::_hx_system::debug::ScrollBar >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScrollSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maxScrollY",68,ad,fc,9a));
	outFields->push(HX_("viewHeight",2c,08,99,43));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("scroll",0d,d8,64,47));
	outFields->push(HX_("scrollBar",c6,57,fc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScrollSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(ScrollSprite_obj,scroll),HX_("scroll",0d,d8,64,47)},
	{::hx::fsObject /*  ::flixel::_hx_system::debug::ScrollBar */ ,(int)offsetof(ScrollSprite_obj,scrollBar),HX_("scrollBar",c6,57,fc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ScrollSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String ScrollSprite_obj_sMemberFields[] = {
	HX_("get_maxScrollY",b1,35,f2,10),
	HX_("get_viewHeight",75,90,8e,b9),
	HX_("get_scrollY",c3,93,d2,b6),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("scroll",0d,d8,64,47),
	HX_("scrollBar",c6,57,fc,3d),
	HX_("createScrollBar",2a,11,f1,de),
	HX_("onMouseScroll",33,29,d7,9f),
	HX_("setScrollSize",b0,6d,8b,ab),
	HX_("updateScroll",f6,7e,28,47),
	HX_("addChild",bb,cf,16,bf),
	HX_("isChildVisible",40,81,92,62),
	::String(null()) };

::hx::Class ScrollSprite_obj::__mClass;

void ScrollSprite_obj::__register()
{
	ScrollSprite_obj _hx_dummy;
	ScrollSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.ScrollSprite",9a,10,14,60);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScrollSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScrollSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScrollSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScrollSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
