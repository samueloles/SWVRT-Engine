// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_AssetFrontEnd
#include <flixel/system/frontEnds/AssetFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSoundTray
#include <flixel/system/ui/FlxSoundTray.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSaveStatus
#include <flixel/util/FlxSaveStatus.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b1aa19ce59d84264_24_new,"flixel.system.ui.FlxSoundTray","new",0x221b6352,"flixel.system.ui.FlxSoundTray.new","flixel/system/ui/FlxSoundTray.hx",24,0x04618f9d)
HX_LOCAL_STACK_FRAME(_hx_pos_b1aa19ce59d84264_121_update,"flixel.system.ui.FlxSoundTray","update",0x9cbad657,"flixel.system.ui.FlxSoundTray.update","flixel/system/ui/FlxSoundTray.hx",121,0x04618f9d)
HX_LOCAL_STACK_FRAME(_hx_pos_b1aa19ce59d84264_155_showAnim,"flixel.system.ui.FlxSoundTray","showAnim",0x91dcc97c,"flixel.system.ui.FlxSoundTray.showAnim","flixel/system/ui/FlxSoundTray.hx",155,0x04618f9d)
HX_LOCAL_STACK_FRAME(_hx_pos_b1aa19ce59d84264_179_show,"flixel.system.ui.FlxSoundTray","show",0xb92bd5cb,"flixel.system.ui.FlxSoundTray.show","flixel/system/ui/FlxSoundTray.hx",179,0x04618f9d)
HX_LOCAL_STACK_FRAME(_hx_pos_b1aa19ce59d84264_186_showIncrement,"flixel.system.ui.FlxSoundTray","showIncrement",0x8e107ee4,"flixel.system.ui.FlxSoundTray.showIncrement","flixel/system/ui/FlxSoundTray.hx",186,0x04618f9d)
HX_LOCAL_STACK_FRAME(_hx_pos_b1aa19ce59d84264_192_showDecrement,"flixel.system.ui.FlxSoundTray","showDecrement",0x6c936ec8,"flixel.system.ui.FlxSoundTray.showDecrement","flixel/system/ui/FlxSoundTray.hx",192,0x04618f9d)
HX_LOCAL_STACK_FRAME(_hx_pos_b1aa19ce59d84264_199_screenCenter,"flixel.system.ui.FlxSoundTray","screenCenter",0x0f14ad2f,"flixel.system.ui.FlxSoundTray.screenCenter","flixel/system/ui/FlxSoundTray.hx",199,0x04618f9d)
HX_LOCAL_STACK_FRAME(_hx_pos_b1aa19ce59d84264_207_updateSize,"flixel.system.ui.FlxSoundTray","updateSize",0x90e71ab8,"flixel.system.ui.FlxSoundTray.updateSize","flixel/system/ui/FlxSoundTray.hx",207,0x04618f9d)
namespace flixel{
namespace _hx_system{
namespace ui{

void FlxSoundTray_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b1aa19ce59d84264_24_new)
HXLINE(  62)		this->silent = false;
HXLINE(  59)		this->volumeDownSound = HX_("flixel/sounds/beep",e6,b5,a9,33);
HXLINE(  56)		this->volumeUpSound = HX_("flixel/sounds/beep",e6,b5,a9,33);
HXLINE(  53)		this->_defaultScale = ((Float)2.0);
HXLINE(  51)		this->_minWidth = 80;
HXLINE(  70)		super::__construct();
HXLINE(  72)		this->set_visible(false);
HXLINE(  73)		this->set_scaleX(this->_defaultScale);
HXLINE(  74)		this->set_scaleY(this->_defaultScale);
HXLINE(  75)		this->_bg =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->_minWidth,30,true,(int)2130706432),null(),null());
HXLINE(  76)		this->screenCenter();
HXLINE(  77)		this->addChild(this->_bg);
HXLINE(  79)		this->_label =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  80)		 ::openfl::text::TextField _hx_tmp = this->_label;
HXDLIN(  80)		_hx_tmp->set_width(this->_bg->get_width());
HXLINE(  82)		this->_label->set_multiline(true);
HXLINE(  84)		this->_label->set_selectable(false);
HXLINE(  92)		 ::openfl::text::TextFormat dtf =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT,10,16777215,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  93)		dtf->align = 0;
HXLINE(  94)		this->_label->set_defaultTextFormat(dtf);
HXLINE(  95)		this->addChild(this->_label);
HXLINE(  96)		this->_label->set_text(HX_("VOLUME",da,d5,d5,11));
HXLINE(  97)		this->_label->set_y(( (Float)(16) ));
HXLINE( 100)		this->_bars = ::Array_obj< ::Dynamic>::__new();
HXLINE( 102)		 ::openfl::display::Bitmap tmp;
HXLINE( 103)		{
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,1,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,2,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,3,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,4,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,5,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,6,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,7,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,8,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,9,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
HXLINE( 104)			{
HXLINE( 105)				tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,4,10,false,-1),null(),null());
HXLINE( 106)				this->addChild(tmp);
HXLINE( 107)				this->_bars->push(tmp);
            			}
            		}
HXLINE( 109)		this->updateSize();
HXLINE( 111)		this->set_y(-(this->get_height()));
HXLINE( 112)		this->set_visible(false);
            	}

Dynamic FlxSoundTray_obj::__CreateEmpty() { return new FlxSoundTray_obj; }

void *FlxSoundTray_obj::_hx_vtable = 0;

Dynamic FlxSoundTray_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxSoundTray_obj > _hx_result = new FlxSoundTray_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxSoundTray_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x232a5d76 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void FlxSoundTray_obj::update(Float MS){
            	HX_STACKFRAME(&_hx_pos_b1aa19ce59d84264_121_update)
HXDLIN( 121)		if ((this->_timer > 0)) {
HXLINE( 123)			 ::flixel::_hx_system::ui::FlxSoundTray _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 123)			_hx_tmp->_timer = (_hx_tmp->_timer - (MS / ( (Float)(1000) )));
            		}
            		else {
HXLINE( 125)			Float _hx_tmp1 = this->get_y();
HXDLIN( 125)			if ((_hx_tmp1 > -(this->get_height()))) {
HXLINE( 127)				Float _hx_tmp2 = this->get_y();
HXDLIN( 127)				this->set_y((_hx_tmp2 - (((MS / ( (Float)(1000) )) * this->get_height()) * ((Float)0.5))));
HXLINE( 129)				Float _hx_tmp3 = this->get_y();
HXDLIN( 129)				if ((_hx_tmp3 <= -(this->get_height()))) {
HXLINE( 131)					this->set_visible(false);
HXLINE( 132)					this->active = false;
HXLINE( 136)					 ::flixel::util::FlxSaveStatus _g = ::flixel::FlxG_obj::save->status;
HXDLIN( 136)					bool _hx_tmp4;
HXDLIN( 136)					if ((_g->_hx_getIndex() == 1)) {
HXLINE( 136)						::String _g1 = _g->_hx_getString(0);
HXDLIN( 136)						::String _g2 = _g->_hx_getString(1);
HXDLIN( 136)						_hx_tmp4 = true;
            					}
            					else {
HXLINE( 136)						_hx_tmp4 = false;
            					}
HXDLIN( 136)					if (_hx_tmp4) {
HXLINE( 138)						::flixel::FlxG_obj::save->data->__SetField(HX_("mute",d9,6e,65,48),::flixel::FlxG_obj::sound->muted,::hx::paccDynamic);
HXLINE( 139)						::flixel::FlxG_obj::save->data->__SetField(HX_("volume",da,29,53,5f),::flixel::FlxG_obj::sound->volume,::hx::paccDynamic);
HXLINE( 140)						::flixel::FlxG_obj::save->flush(null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSoundTray_obj,update,(void))

void FlxSoundTray_obj::showAnim(Float volume, ::Dynamic sound,::hx::Null< Float >  __o_duration,::String __o_label){
            		Float duration = __o_duration.Default(((Float)1.0));
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("VOLUME",da,d5,d5,11);
            	HX_STACKFRAME(&_hx_pos_b1aa19ce59d84264_155_showAnim)
HXLINE( 156)		if (::hx::IsNotNull( sound )) {
HXLINE( 157)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 157)			 ::flixel::_hx_system::frontEnds::AssetFrontEnd _this = ::flixel::FlxG_obj::assets;
HXDLIN( 157)			 ::flixel::_hx_system::debug::log::LogStyle logStyle = null();
HXDLIN( 157)			::String id;
HXDLIN( 157)			bool id1;
HXDLIN( 157)			bool id2;
HXDLIN( 157)			if (!(::StringTools_obj::endsWith(( (::String)(sound) ),HX_(".mp3",02,e8,ba,1e)))) {
HXLINE( 157)				id2 = !(::StringTools_obj::endsWith(( (::String)(sound) ),HX_(".ogg",e1,64,bc,1e)));
            			}
            			else {
HXLINE( 157)				id2 = false;
            			}
HXDLIN( 157)			if (id2) {
HXLINE( 157)				id1 = !(::StringTools_obj::endsWith(( (::String)(sound) ),HX_(".wav",be,71,c2,1e)));
            			}
            			else {
HXLINE( 157)				id1 = false;
            			}
HXDLIN( 157)			if (id1) {
HXLINE( 157)				id = (sound + _this->defaultSoundExtension);
            			}
            			else {
HXLINE( 157)				id = ( (::String)(sound) );
            			}
HXDLIN( 157)			_hx_tmp->play(( ( ::openfl::media::Sound)(_this->getAsset(id,HX_("sound",cf,8c,cc,80),true,logStyle)) ),null(),null(),null(),null(),null());
            		}
HXLINE( 159)		this->_timer = duration;
HXLINE( 160)		this->set_y(( (Float)(0) ));
HXLINE( 161)		this->set_visible(true);
HXLINE( 162)		this->active = true;
HXLINE( 163)		int numBars = ::Math_obj::round((volume * ( (Float)(10) )));
HXLINE( 164)		{
HXLINE( 164)			int _g = 0;
HXDLIN( 164)			int _g1 = this->_bars->length;
HXDLIN( 164)			while((_g < _g1)){
HXLINE( 164)				_g = (_g + 1);
HXDLIN( 164)				int i = (_g - 1);
HXLINE( 165)				Float _hx_tmp1;
HXDLIN( 165)				if ((i < numBars)) {
HXLINE( 165)					_hx_tmp1 = ((Float)1.0);
            				}
            				else {
HXLINE( 165)					_hx_tmp1 = ((Float)0.5);
            				}
HXDLIN( 165)				this->_bars->__get(i).StaticCast<  ::openfl::display::Bitmap >()->set_alpha(_hx_tmp1);
            			}
            		}
HXLINE( 167)		this->_label->set_text(label);
HXLINE( 168)		this->updateSize();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxSoundTray_obj,showAnim,(void))

void FlxSoundTray_obj::show(::hx::Null< bool >  __o_up){
            		bool up = __o_up.Default(false);
            	HX_STACKFRAME(&_hx_pos_b1aa19ce59d84264_179_show)
HXDLIN( 179)		if (up) {
HXLINE( 180)			this->showIncrement();
            		}
            		else {
HXLINE( 182)			this->showDecrement();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSoundTray_obj,show,(void))

void FlxSoundTray_obj::showIncrement(){
            	HX_STACKFRAME(&_hx_pos_b1aa19ce59d84264_186_showIncrement)
HXLINE( 187)		Float volume;
HXDLIN( 187)		if (::flixel::FlxG_obj::sound->muted) {
HXLINE( 187)			volume = ( (Float)(0) );
            		}
            		else {
HXLINE( 187)			volume = ::flixel::FlxG_obj::sound->volume;
            		}
HXLINE( 188)		 ::Dynamic _hx_tmp;
HXDLIN( 188)		if (this->silent) {
HXLINE( 188)			_hx_tmp = null();
            		}
            		else {
HXLINE( 188)			_hx_tmp = this->volumeUpSound;
            		}
HXDLIN( 188)		this->showAnim(volume,_hx_tmp,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSoundTray_obj,showIncrement,(void))

void FlxSoundTray_obj::showDecrement(){
            	HX_STACKFRAME(&_hx_pos_b1aa19ce59d84264_192_showDecrement)
HXLINE( 193)		Float volume;
HXDLIN( 193)		if (::flixel::FlxG_obj::sound->muted) {
HXLINE( 193)			volume = ( (Float)(0) );
            		}
            		else {
HXLINE( 193)			volume = ::flixel::FlxG_obj::sound->volume;
            		}
HXLINE( 194)		 ::Dynamic _hx_tmp;
HXDLIN( 194)		if (this->silent) {
HXLINE( 194)			_hx_tmp = null();
            		}
            		else {
HXLINE( 194)			_hx_tmp = this->volumeDownSound;
            		}
HXDLIN( 194)		this->showAnim(volume,_hx_tmp,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSoundTray_obj,showDecrement,(void))

void FlxSoundTray_obj::screenCenter(){
            	HX_STACKFRAME(&_hx_pos_b1aa19ce59d84264_199_screenCenter)
HXLINE( 200)		this->set_scaleX(this->_defaultScale);
HXLINE( 201)		this->set_scaleY(this->_defaultScale);
HXLINE( 203)		int _hx_tmp = ::openfl::Lib_obj::get_current()->stage->stageWidth;
HXDLIN( 203)		Float _hx_tmp1 = this->_bg->get_width();
HXDLIN( 203)		Float _hx_tmp2 = (((Float)0.5) * (( (Float)(_hx_tmp) ) - (_hx_tmp1 * this->_defaultScale)));
HXDLIN( 203)		this->set_x((_hx_tmp2 - ::flixel::FlxG_obj::game->get_x()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSoundTray_obj,screenCenter,(void))

void FlxSoundTray_obj::updateSize(){
            	HX_STACKFRAME(&_hx_pos_b1aa19ce59d84264_207_updateSize)
HXLINE( 208)		Float _hx_tmp = (this->_label->get_textWidth() + 10);
HXDLIN( 208)		if ((_hx_tmp > this->_bg->get_width())) {
HXLINE( 209)			 ::openfl::text::TextField _hx_tmp1 = this->_label;
HXDLIN( 209)			_hx_tmp1->set_width((this->_label->get_textWidth() + 10));
            		}
HXLINE( 211)		 ::openfl::display::Bitmap _hx_tmp2 = this->_bg;
HXDLIN( 211)		Float _hx_tmp3;
HXDLIN( 211)		Float _hx_tmp4 = (this->_label->get_textWidth() + 10);
HXDLIN( 211)		if ((_hx_tmp4 > this->_minWidth)) {
HXLINE( 211)			_hx_tmp3 = (this->_label->get_textWidth() + 10);
            		}
            		else {
HXLINE( 211)			_hx_tmp3 = ( (Float)(this->_minWidth) );
            		}
HXDLIN( 211)		_hx_tmp2->set_width(_hx_tmp3);
HXLINE( 213)		 ::openfl::text::TextField _hx_tmp5 = this->_label;
HXDLIN( 213)		_hx_tmp5->set_width(this->_bg->get_width());
HXLINE( 215)		int bx = ::Std_obj::_hx_int(((this->_bg->get_width() / ( (Float)(2) )) - ( (Float)(30) )));
HXLINE( 216)		int by = 14;
HXLINE( 217)		{
HXLINE( 217)			int _g = 0;
HXDLIN( 217)			int _g1 = this->_bars->length;
HXDLIN( 217)			while((_g < _g1)){
HXLINE( 217)				_g = (_g + 1);
HXDLIN( 217)				int i = (_g - 1);
HXLINE( 219)				this->_bars->__get(i).StaticCast<  ::openfl::display::Bitmap >()->set_x(( (Float)(bx) ));
HXLINE( 220)				this->_bars->__get(i).StaticCast<  ::openfl::display::Bitmap >()->set_y(( (Float)(by) ));
HXLINE( 221)				bx = (bx + 6);
HXLINE( 222)				by = (by - 1);
            			}
            		}
HXLINE( 225)		this->screenCenter();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSoundTray_obj,updateSize,(void))


::hx::ObjectPtr< FlxSoundTray_obj > FlxSoundTray_obj::__new() {
	::hx::ObjectPtr< FlxSoundTray_obj > __this = new FlxSoundTray_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxSoundTray_obj > FlxSoundTray_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxSoundTray_obj *__this = (FlxSoundTray_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxSoundTray_obj), true, "flixel.system.ui.FlxSoundTray"));
	*(void **)__this = FlxSoundTray_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxSoundTray_obj::FlxSoundTray_obj()
{
}

void FlxSoundTray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSoundTray);
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(_label,"_label");
	HX_MARK_MEMBER_NAME(_bg,"_bg");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_bars,"_bars");
	HX_MARK_MEMBER_NAME(_minWidth,"_minWidth");
	HX_MARK_MEMBER_NAME(_defaultScale,"_defaultScale");
	HX_MARK_MEMBER_NAME(volumeUpSound,"volumeUpSound");
	HX_MARK_MEMBER_NAME(volumeDownSound,"volumeDownSound");
	HX_MARK_MEMBER_NAME(silent,"silent");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxSoundTray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(_label,"_label");
	HX_VISIT_MEMBER_NAME(_bg,"_bg");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_bars,"_bars");
	HX_VISIT_MEMBER_NAME(_minWidth,"_minWidth");
	HX_VISIT_MEMBER_NAME(_defaultScale,"_defaultScale");
	HX_VISIT_MEMBER_NAME(volumeUpSound,"volumeUpSound");
	HX_VISIT_MEMBER_NAME(volumeDownSound,"volumeDownSound");
	HX_VISIT_MEMBER_NAME(silent,"silent");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxSoundTray_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_bg") ) { return ::hx::Val( _bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { return ::hx::Val( show_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_bars") ) { return ::hx::Val( _bars ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return ::hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"_label") ) { return ::hx::Val( _label ); }
		if (HX_FIELD_EQ(inName,"_timer") ) { return ::hx::Val( _timer ); }
		if (HX_FIELD_EQ(inName,"silent") ) { return ::hx::Val( silent ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"showAnim") ) { return ::hx::Val( showAnim_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_minWidth") ) { return ::hx::Val( _minWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateSize") ) { return ::hx::Val( updateSize_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenCenter") ) { return ::hx::Val( screenCenter_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_defaultScale") ) { return ::hx::Val( _defaultScale ); }
		if (HX_FIELD_EQ(inName,"volumeUpSound") ) { return ::hx::Val( volumeUpSound ); }
		if (HX_FIELD_EQ(inName,"showIncrement") ) { return ::hx::Val( showIncrement_dyn() ); }
		if (HX_FIELD_EQ(inName,"showDecrement") ) { return ::hx::Val( showDecrement_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"volumeDownSound") ) { return ::hx::Val( volumeDownSound ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxSoundTray_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_bg") ) { _bg=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_bars") ) { _bars=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_label") ) { _label=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"silent") ) { silent=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_minWidth") ) { _minWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_defaultScale") ) { _defaultScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volumeUpSound") ) { volumeUpSound=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"volumeDownSound") ) { volumeDownSound=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxSoundTray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("_label",35,55,96,6b));
	outFields->push(HX_("_bg",e4,6b,48,00));
	outFields->push(HX_("_timer",06,07,1d,0c));
	outFields->push(HX_("_bars",1f,03,22,f4));
	outFields->push(HX_("_minWidth",73,1a,30,09));
	outFields->push(HX_("_defaultScale",e8,9c,98,10));
	outFields->push(HX_("volumeUpSound",ba,f9,db,f4));
	outFields->push(HX_("volumeDownSound",d3,0b,9f,83));
	outFields->push(HX_("silent",95,76,cd,b7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxSoundTray_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxSoundTray_obj,active),HX_("active",c6,41,46,16)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(FlxSoundTray_obj,_label),HX_("_label",35,55,96,6b)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(FlxSoundTray_obj,_bg),HX_("_bg",e4,6b,48,00)},
	{::hx::fsFloat,(int)offsetof(FlxSoundTray_obj,_timer),HX_("_timer",06,07,1d,0c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxSoundTray_obj,_bars),HX_("_bars",1f,03,22,f4)},
	{::hx::fsInt,(int)offsetof(FlxSoundTray_obj,_minWidth),HX_("_minWidth",73,1a,30,09)},
	{::hx::fsFloat,(int)offsetof(FlxSoundTray_obj,_defaultScale),HX_("_defaultScale",e8,9c,98,10)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxSoundTray_obj,volumeUpSound),HX_("volumeUpSound",ba,f9,db,f4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxSoundTray_obj,volumeDownSound),HX_("volumeDownSound",d3,0b,9f,83)},
	{::hx::fsBool,(int)offsetof(FlxSoundTray_obj,silent),HX_("silent",95,76,cd,b7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxSoundTray_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxSoundTray_obj_sMemberFields[] = {
	HX_("active",c6,41,46,16),
	HX_("_label",35,55,96,6b),
	HX_("_bg",e4,6b,48,00),
	HX_("_timer",06,07,1d,0c),
	HX_("_bars",1f,03,22,f4),
	HX_("_minWidth",73,1a,30,09),
	HX_("_defaultScale",e8,9c,98,10),
	HX_("volumeUpSound",ba,f9,db,f4),
	HX_("volumeDownSound",d3,0b,9f,83),
	HX_("silent",95,76,cd,b7),
	HX_("update",09,86,05,87),
	HX_("showAnim",ae,49,f8,a7),
	HX_("show",fd,d4,52,4c),
	HX_("showIncrement",72,09,1d,22),
	HX_("showDecrement",56,f9,9f,00),
	HX_("screenCenter",61,2e,f9,e2),
	HX_("updateSize",6a,8b,08,05),
	::String(null()) };

::hx::Class FlxSoundTray_obj::__mClass;

void FlxSoundTray_obj::__register()
{
	FlxSoundTray_obj _hx_dummy;
	FlxSoundTray_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.ui.FlxSoundTray",60,12,f7,3e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxSoundTray_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxSoundTray_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSoundTray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSoundTray_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace ui
