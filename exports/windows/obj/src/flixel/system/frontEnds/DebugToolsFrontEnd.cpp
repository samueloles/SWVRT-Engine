// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebugToolsFrontEnd
#include <flixel/system/frontEnds/DebugToolsFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5632fdf8c996cdcb_223_new,"flixel.system.frontEnds.DebugToolsFrontEnd","new",0x9b11cb46,"flixel.system.frontEnds.DebugToolsFrontEnd.new","flixel/system/frontEnds/DebuggerFrontEnd.hx",223,0x2ebb4b30)
HX_LOCAL_STACK_FRAME(_hx_pos_5632fdf8c996cdcb_218_get_activeTool,"flixel.system.frontEnds.DebugToolsFrontEnd","get_activeTool",0x038e6f61,"flixel.system.frontEnds.DebugToolsFrontEnd.get_activeTool","flixel/system/frontEnds/DebuggerFrontEnd.hx",218,0x2ebb4b30)
HX_LOCAL_STACK_FRAME(_hx_pos_5632fdf8c996cdcb_221_get_interaction,"flixel.system.frontEnds.DebugToolsFrontEnd","get_interaction",0xe4f8ab4f,"flixel.system.frontEnds.DebugToolsFrontEnd.get_interaction","flixel/system/frontEnds/DebuggerFrontEnd.hx",221,0x2ebb4b30)
HX_LOCAL_STACK_FRAME(_hx_pos_5632fdf8c996cdcb_227_add,"flixel.system.frontEnds.DebugToolsFrontEnd","add",0x9b07ed07,"flixel.system.frontEnds.DebugToolsFrontEnd.add","flixel/system/frontEnds/DebuggerFrontEnd.hx",227,0x2ebb4b30)
HX_LOCAL_STACK_FRAME(_hx_pos_5632fdf8c996cdcb_232_remove,"flixel.system.frontEnds.DebugToolsFrontEnd","remove",0xd549f51e,"flixel.system.frontEnds.DebugToolsFrontEnd.remove","flixel/system/frontEnds/DebuggerFrontEnd.hx",232,0x2ebb4b30)
namespace flixel{
namespace _hx_system{
namespace frontEnds{

void DebugToolsFrontEnd_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5632fdf8c996cdcb_223_new)
            	}

Dynamic DebugToolsFrontEnd_obj::__CreateEmpty() { return new DebugToolsFrontEnd_obj; }

void *DebugToolsFrontEnd_obj::_hx_vtable = 0;

Dynamic DebugToolsFrontEnd_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DebugToolsFrontEnd_obj > _hx_result = new DebugToolsFrontEnd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DebugToolsFrontEnd_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x121b816c;
}

 ::flixel::_hx_system::debug::interaction::tools::Tool DebugToolsFrontEnd_obj::get_activeTool(){
            	HX_STACKFRAME(&_hx_pos_5632fdf8c996cdcb_218_get_activeTool)
HXDLIN( 218)		return ::flixel::FlxG_obj::game->debugger->interaction->activeTool;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DebugToolsFrontEnd_obj,get_activeTool,return )

 ::flixel::_hx_system::debug::interaction::Interaction DebugToolsFrontEnd_obj::get_interaction(){
            	HX_STACKFRAME(&_hx_pos_5632fdf8c996cdcb_221_get_interaction)
HXDLIN( 221)		return ::flixel::FlxG_obj::game->debugger->interaction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DebugToolsFrontEnd_obj,get_interaction,return )

void DebugToolsFrontEnd_obj::add( ::flixel::_hx_system::debug::interaction::tools::Tool tool){
            	HX_STACKFRAME(&_hx_pos_5632fdf8c996cdcb_227_add)
HXDLIN( 227)		::flixel::FlxG_obj::game->debugger->interaction->addTool(tool);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DebugToolsFrontEnd_obj,add,(void))

void DebugToolsFrontEnd_obj::remove( ::flixel::_hx_system::debug::interaction::tools::Tool tool){
            	HX_STACKFRAME(&_hx_pos_5632fdf8c996cdcb_232_remove)
HXDLIN( 232)		::flixel::FlxG_obj::game->debugger->interaction->removeTool(tool);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DebugToolsFrontEnd_obj,remove,(void))


::hx::ObjectPtr< DebugToolsFrontEnd_obj > DebugToolsFrontEnd_obj::__new() {
	::hx::ObjectPtr< DebugToolsFrontEnd_obj > __this = new DebugToolsFrontEnd_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DebugToolsFrontEnd_obj > DebugToolsFrontEnd_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DebugToolsFrontEnd_obj *__this = (DebugToolsFrontEnd_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DebugToolsFrontEnd_obj), false, "flixel.system.frontEnds.DebugToolsFrontEnd"));
	*(void **)__this = DebugToolsFrontEnd_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DebugToolsFrontEnd_obj::DebugToolsFrontEnd_obj()
{
}

::hx::Val DebugToolsFrontEnd_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_activeTool() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interaction") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_interaction() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_activeTool") ) { return ::hx::Val( get_activeTool_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_interaction") ) { return ::hx::Val( get_interaction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void DebugToolsFrontEnd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("activeTool",3e,24,2c,f6));
	outFields->push(HX_("interaction",d2,37,59,3c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *DebugToolsFrontEnd_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *DebugToolsFrontEnd_obj_sStaticStorageInfo = 0;
#endif

static ::String DebugToolsFrontEnd_obj_sMemberFields[] = {
	HX_("get_activeTool",87,ac,21,6c),
	HX_("get_interaction",69,ef,3a,fd),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	::String(null()) };

::hx::Class DebugToolsFrontEnd_obj::__mClass;

void DebugToolsFrontEnd_obj::__register()
{
	DebugToolsFrontEnd_obj _hx_dummy;
	DebugToolsFrontEnd_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.frontEnds.DebugToolsFrontEnd",54,70,35,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DebugToolsFrontEnd_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DebugToolsFrontEnd_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DebugToolsFrontEnd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DebugToolsFrontEnd_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds
