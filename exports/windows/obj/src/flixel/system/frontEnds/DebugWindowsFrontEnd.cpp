// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebugWindowsFrontEnd
#include <flixel/system/frontEnds/DebugWindowsFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3409faf9df01acb4_242_new,"flixel.system.frontEnds.DebugWindowsFrontEnd","new",0x76791b6e,"flixel.system.frontEnds.DebugWindowsFrontEnd.new","flixel/system/frontEnds/DebuggerFrontEnd.hx",242,0x2ebb4b30)
HX_LOCAL_STACK_FRAME(_hx_pos_3409faf9df01acb4_240_get_debugger,"flixel.system.frontEnds.DebugWindowsFrontEnd","get_debugger",0xb870bb5c,"flixel.system.frontEnds.DebugWindowsFrontEnd.get_debugger","flixel/system/frontEnds/DebuggerFrontEnd.hx",240,0x2ebb4b30)
HX_LOCAL_STACK_FRAME(_hx_pos_3409faf9df01acb4_245_add,"flixel.system.frontEnds.DebugWindowsFrontEnd","add",0x766f3d2f,"flixel.system.frontEnds.DebugWindowsFrontEnd.add","flixel/system/frontEnds/DebuggerFrontEnd.hx",245,0x2ebb4b30)
HX_LOCAL_STACK_FRAME(_hx_pos_3409faf9df01acb4_251_remove,"flixel.system.frontEnds.DebugWindowsFrontEnd","remove",0xcfc52df6,"flixel.system.frontEnds.DebugWindowsFrontEnd.remove","flixel/system/frontEnds/DebuggerFrontEnd.hx",251,0x2ebb4b30)
namespace flixel{
namespace _hx_system{
namespace frontEnds{

void DebugWindowsFrontEnd_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3409faf9df01acb4_242_new)
            	}

Dynamic DebugWindowsFrontEnd_obj::__CreateEmpty() { return new DebugWindowsFrontEnd_obj; }

void *DebugWindowsFrontEnd_obj::_hx_vtable = 0;

Dynamic DebugWindowsFrontEnd_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DebugWindowsFrontEnd_obj > _hx_result = new DebugWindowsFrontEnd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DebugWindowsFrontEnd_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4f4ad478;
}

 ::flixel::_hx_system::debug::FlxDebugger DebugWindowsFrontEnd_obj::get_debugger(){
            	HX_STACKFRAME(&_hx_pos_3409faf9df01acb4_240_get_debugger)
HXDLIN( 240)		return ::flixel::FlxG_obj::game->debugger;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DebugWindowsFrontEnd_obj,get_debugger,return )

void DebugWindowsFrontEnd_obj::add( ::flixel::_hx_system::debug::Window window, ::Dynamic button){
            	HX_STACKFRAME(&_hx_pos_3409faf9df01acb4_245_add)
HXLINE( 246)		{
HXLINE( 246)			 ::flixel::_hx_system::debug::FlxDebugger _this = ::flixel::FlxG_obj::game->debugger;
HXDLIN( 246)			_this->_windows->push(window);
HXDLIN( 246)			_this->addChild(window);
HXDLIN( 246)			if (::hx::IsNotNull( _this->_screenBounds )) {
HXLINE( 246)				_this->updateBounds();
HXDLIN( 246)				window->bound();
            			}
            		}
HXLINE( 247)		::flixel::FlxG_obj::game->debugger->addWindowToggleButton(window,button);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DebugWindowsFrontEnd_obj,add,(void))

void DebugWindowsFrontEnd_obj::remove( ::flixel::_hx_system::debug::Window window){
            	HX_STACKFRAME(&_hx_pos_3409faf9df01acb4_251_remove)
HXLINE( 252)		{
HXLINE( 252)			 ::flixel::_hx_system::debug::FlxDebugger _this = ::flixel::FlxG_obj::game->debugger;
HXDLIN( 252)			if (_this->contains(window)) {
HXLINE( 252)				_this->removeChild(window);
            			}
HXDLIN( 252)			{
HXLINE( 252)				::Array< ::Dynamic> array = _this->_windows;
HXDLIN( 252)				int index = array->indexOf(window,null());
HXDLIN( 252)				if ((index != -1)) {
HXLINE( 252)					array[index] = array->__get((array->length - 1)).StaticCast<  ::flixel::_hx_system::debug::Window >();
HXDLIN( 252)					array->pop().StaticCast<  ::flixel::_hx_system::debug::Window >();
            				}
            			}
            		}
HXLINE( 253)		if (::hx::IsNotNull( window->toggleButton )) {
HXLINE( 254)			::flixel::FlxG_obj::game->debugger->removeButton(window->toggleButton,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DebugWindowsFrontEnd_obj,remove,(void))


::hx::ObjectPtr< DebugWindowsFrontEnd_obj > DebugWindowsFrontEnd_obj::__new() {
	::hx::ObjectPtr< DebugWindowsFrontEnd_obj > __this = new DebugWindowsFrontEnd_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DebugWindowsFrontEnd_obj > DebugWindowsFrontEnd_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DebugWindowsFrontEnd_obj *__this = (DebugWindowsFrontEnd_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DebugWindowsFrontEnd_obj), false, "flixel.system.frontEnds.DebugWindowsFrontEnd"));
	*(void **)__this = DebugWindowsFrontEnd_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DebugWindowsFrontEnd_obj::DebugWindowsFrontEnd_obj()
{
}

::hx::Val DebugWindowsFrontEnd_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"debugger") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_debugger() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_debugger") ) { return ::hx::Val( get_debugger_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void DebugWindowsFrontEnd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("debugger",21,24,eb,90));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *DebugWindowsFrontEnd_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *DebugWindowsFrontEnd_obj_sStaticStorageInfo = 0;
#endif

static ::String DebugWindowsFrontEnd_obj_sMemberFields[] = {
	HX_("get_debugger",2a,d8,04,46),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	::String(null()) };

::hx::Class DebugWindowsFrontEnd_obj::__mClass;

void DebugWindowsFrontEnd_obj::__register()
{
	DebugWindowsFrontEnd_obj _hx_dummy;
	DebugWindowsFrontEnd_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.frontEnds.DebugWindowsFrontEnd",7c,8c,57,e1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DebugWindowsFrontEnd_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DebugWindowsFrontEnd_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DebugWindowsFrontEnd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DebugWindowsFrontEnd_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds
