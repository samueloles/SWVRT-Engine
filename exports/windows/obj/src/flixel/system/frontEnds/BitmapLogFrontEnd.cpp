// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_BitmapLog
#include <flixel/system/debug/log/BitmapLog.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapLogFrontEnd
#include <flixel/system/frontEnds/BitmapLogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_729ca37c5683ec35_97_new,"flixel.system.frontEnds.BitmapLogFrontEnd","new",0xa186019f,"flixel.system.frontEnds.BitmapLogFrontEnd.new","flixel/system/frontEnds/BitmapLogFrontEnd.hx",97,0x20ede752)
HX_LOCAL_STACK_FRAME(_hx_pos_729ca37c5683ec35_14_get_window,"flixel.system.frontEnds.BitmapLogFrontEnd","get_window",0xc764085a,"flixel.system.frontEnds.BitmapLogFrontEnd.get_window","flixel/system/frontEnds/BitmapLogFrontEnd.hx",14,0x20ede752)
HX_LOCAL_STACK_FRAME(_hx_pos_729ca37c5683ec35_32_addGraphic,"flixel.system.frontEnds.BitmapLogFrontEnd","addGraphic",0x5fe18b28,"flixel.system.frontEnds.BitmapLogFrontEnd.addGraphic","flixel/system/frontEnds/BitmapLogFrontEnd.hx",32,0x20ede752)
HX_LOCAL_STACK_FRAME(_hx_pos_729ca37c5683ec35_43_getGraphicName,"flixel.system.frontEnds.BitmapLogFrontEnd","getGraphicName",0x44aa293e,"flixel.system.frontEnds.BitmapLogFrontEnd.getGraphicName","flixel/system/frontEnds/BitmapLogFrontEnd.hx",43,0x20ede752)
HX_LOCAL_STACK_FRAME(_hx_pos_729ca37c5683ec35_67_clear,"flixel.system.frontEnds.BitmapLogFrontEnd","clear",0x3f6bb08c,"flixel.system.frontEnds.BitmapLogFrontEnd.clear","flixel/system/frontEnds/BitmapLogFrontEnd.hx",67,0x20ede752)
HX_LOCAL_STACK_FRAME(_hx_pos_729ca37c5683ec35_78_clearAt,"flixel.system.frontEnds.BitmapLogFrontEnd","clearAt",0xb622249f,"flixel.system.frontEnds.BitmapLogFrontEnd.clearAt","flixel/system/frontEnds/BitmapLogFrontEnd.hx",78,0x20ede752)
HX_LOCAL_STACK_FRAME(_hx_pos_729ca37c5683ec35_86_viewCache,"flixel.system.frontEnds.BitmapLogFrontEnd","viewCache",0xebde341c,"flixel.system.frontEnds.BitmapLogFrontEnd.viewCache","flixel/system/frontEnds/BitmapLogFrontEnd.hx",86,0x20ede752)
namespace flixel{
namespace _hx_system{
namespace frontEnds{

void BitmapLogFrontEnd_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_729ca37c5683ec35_97_new)
            	}

Dynamic BitmapLogFrontEnd_obj::__CreateEmpty() { return new BitmapLogFrontEnd_obj; }

void *BitmapLogFrontEnd_obj::_hx_vtable = 0;

Dynamic BitmapLogFrontEnd_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BitmapLogFrontEnd_obj > _hx_result = new BitmapLogFrontEnd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BitmapLogFrontEnd_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x799a5779;
}

 ::flixel::_hx_system::debug::log::BitmapLog BitmapLogFrontEnd_obj::get_window(){
            	HX_STACKFRAME(&_hx_pos_729ca37c5683ec35_14_get_window)
HXDLIN(  14)		return ::flixel::FlxG_obj::game->debugger->bitmapLog;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLogFrontEnd_obj,get_window,return )

void BitmapLogFrontEnd_obj::addGraphic( ::flixel::graphics::FlxGraphic graphic,::String name){
            	HX_STACKFRAME(&_hx_pos_729ca37c5683ec35_32_addGraphic)
HXDLIN(  32)		bool _hx_tmp;
HXDLIN(  32)		if (::hx::IsNotNull( graphic )) {
HXDLIN(  32)			_hx_tmp = ::hx::IsNotNull( graphic->bitmap );
            		}
            		else {
HXDLIN(  32)			_hx_tmp = false;
            		}
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  34)			if (::hx::IsNull( name )) {
HXLINE(  35)				name = this->getGraphicName(graphic);
            			}
HXLINE(  37)			{
HXLINE(  37)				::String name1 = name;
HXDLIN(  37)				if (::hx::IsNull( name1 )) {
HXLINE(  37)					name1 = HX_("",00,00,00,00);
            				}
HXDLIN(  37)				::flixel::FlxG_obj::game->debugger->bitmapLog->add(graphic->bitmap,name1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapLogFrontEnd_obj,addGraphic,(void))

::String BitmapLogFrontEnd_obj::getGraphicName( ::flixel::graphics::FlxGraphic graphic){
            	HX_STACKFRAME(&_hx_pos_729ca37c5683ec35_43_getGraphicName)
HXLINE(  44)		if (::hx::IsNotNull( graphic->key )) {
HXLINE(  45)			return graphic->key;
            		}
HXLINE(  47)		if (::hx::IsNotNull( graphic->assetsKey )) {
HXLINE(  48)			return graphic->assetsKey;
            		}
HXLINE(  50)		if (::hx::IsNotNull( graphic->assetsClass )) {
HXLINE(  51)			return ::Type_obj::getClassName(graphic->assetsClass);
            		}
HXLINE(  54)		if (::hx::IsNotNull( graphic->trackingInfo )) {
HXLINE(  55)			return graphic->trackingInfo;
            		}
HXLINE(  58)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLogFrontEnd_obj,getGraphicName,return )

void BitmapLogFrontEnd_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_729ca37c5683ec35_67_clear)
HXDLIN(  67)		::flixel::FlxG_obj::game->debugger->bitmapLog->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLogFrontEnd_obj,clear,(void))

void BitmapLogFrontEnd_obj::clearAt(::hx::Null< int >  __o_Index){
            		int Index = __o_Index.Default(-1);
            	HX_STACKFRAME(&_hx_pos_729ca37c5683ec35_78_clearAt)
HXDLIN(  78)		::flixel::FlxG_obj::game->debugger->bitmapLog->clearAt(Index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLogFrontEnd_obj,clearAt,(void))

void BitmapLogFrontEnd_obj::viewCache(){
            	HX_STACKFRAME(&_hx_pos_729ca37c5683ec35_86_viewCache)
HXLINE(  88)		::flixel::FlxG_obj::game->debugger->bitmapLog->clear();
HXLINE(  89)		{
HXLINE(  89)			 ::Dynamic cachedGraphic = ::flixel::FlxG_obj::bitmap->_cache->iterator();
HXDLIN(  89)			while(( (bool)(cachedGraphic->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  89)				 ::flixel::graphics::FlxGraphic cachedGraphic1 = ( ( ::flixel::graphics::FlxGraphic)(cachedGraphic->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  91)				{
HXLINE(  91)					::String name = cachedGraphic1->key;
HXDLIN(  91)					if (::hx::IsNull( name )) {
HXLINE(  91)						name = HX_("",00,00,00,00);
            					}
HXDLIN(  91)					::flixel::FlxG_obj::game->debugger->bitmapLog->add(cachedGraphic1->bitmap,name);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLogFrontEnd_obj,viewCache,(void))


::hx::ObjectPtr< BitmapLogFrontEnd_obj > BitmapLogFrontEnd_obj::__new() {
	::hx::ObjectPtr< BitmapLogFrontEnd_obj > __this = new BitmapLogFrontEnd_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BitmapLogFrontEnd_obj > BitmapLogFrontEnd_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BitmapLogFrontEnd_obj *__this = (BitmapLogFrontEnd_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BitmapLogFrontEnd_obj), false, "flixel.system.frontEnds.BitmapLogFrontEnd"));
	*(void **)__this = BitmapLogFrontEnd_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BitmapLogFrontEnd_obj::BitmapLogFrontEnd_obj()
{
}

::hx::Val BitmapLogFrontEnd_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_window() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"clearAt") ) { return ::hx::Val( clearAt_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"viewCache") ) { return ::hx::Val( viewCache_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_window") ) { return ::hx::Val( get_window_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGraphic") ) { return ::hx::Val( addGraphic_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getGraphicName") ) { return ::hx::Val( getGraphicName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void BitmapLogFrontEnd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("window",f0,93,8c,52));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BitmapLogFrontEnd_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BitmapLogFrontEnd_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapLogFrontEnd_obj_sMemberFields[] = {
	HX_("get_window",b9,03,14,43),
	HX_("addGraphic",87,86,91,db),
	HX_("getGraphicName",1d,c0,84,0a),
	HX_("clear",8d,71,5b,48),
	HX_("clearAt",e0,e7,44,ab),
	HX_("viewCache",9d,09,a9,81),
	::String(null()) };

::hx::Class BitmapLogFrontEnd_obj::__mClass;

void BitmapLogFrontEnd_obj::__register()
{
	BitmapLogFrontEnd_obj _hx_dummy;
	BitmapLogFrontEnd_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.frontEnds.BitmapLogFrontEnd",2d,46,a7,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BitmapLogFrontEnd_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BitmapLogFrontEnd_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapLogFrontEnd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapLogFrontEnd_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds
