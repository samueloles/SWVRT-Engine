// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_states_menu_MainMenuState
#include <states/menu/MainMenuState.h>
#endif
#ifndef INCLUDED_states_menu_MenuDebugState
#include <states/menu/MenuDebugState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6f600fa06bcdf6b1_13_new,"states.menu.MainMenuState","new",0x31fbf0e8,"states.menu.MainMenuState.new","states/menu/MainMenuState.hx",13,0x75f9bfe8)
static const ::String _hx_array_data_68af9cf6_1[] = {
	HX_("STORY MODE",8e,db,83,bd),HX_("FREEPLAY",a0,20,0c,7c),HX_("OPTIONS",3e,07,d2,5f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_6f600fa06bcdf6b1_19_create,"states.menu.MainMenuState","create",0x44204b74,"states.menu.MainMenuState.create","states/menu/MainMenuState.hx",19,0x75f9bfe8)
HX_LOCAL_STACK_FRAME(_hx_pos_6f600fa06bcdf6b1_45_update,"states.menu.MainMenuState","update",0x4f166a81,"states.menu.MainMenuState.update","states/menu/MainMenuState.hx",45,0x75f9bfe8)
HX_LOCAL_STACK_FRAME(_hx_pos_6f600fa06bcdf6b1_71_update,"states.menu.MainMenuState","update",0x4f166a81,"states.menu.MainMenuState.update","states/menu/MainMenuState.hx",71,0x75f9bfe8)
HX_LOCAL_STACK_FRAME(_hx_pos_6f600fa06bcdf6b1_76_updateSelection,"states.menu.MainMenuState","updateSelection",0x0940958b,"states.menu.MainMenuState.updateSelection","states/menu/MainMenuState.hx",76,0x75f9bfe8)
namespace states{
namespace menu{

void MainMenuState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6f600fa06bcdf6b1_13_new)
HXLINE(  16)		this->selected = 0;
HXLINE(  15)		this->optionTexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  14)		this->options = ::Array_obj< ::String >::fromData( _hx_array_data_68af9cf6_1,3);
HXLINE(  13)		super::__construct();
            	}

Dynamic MainMenuState_obj::__CreateEmpty() { return new MainMenuState_obj; }

void *MainMenuState_obj::_hx_vtable = 0;

Dynamic MainMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainMenuState_obj > _hx_result = new MainMenuState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MainMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x134809f4) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x134809f4;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void MainMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_6f600fa06bcdf6b1_19_create)
HXLINE(  20)		this->super::create();
HXLINE(  22)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  23)		bg->loadGraphic(HX_("assets/imagen/menu/mainBG.png",d9,6e,c8,26),null(),null(),null(),null(),null());
HXLINE(  24)		bg->setGraphicSize(1280,720);
HXLINE(  25)		bg->updateHitbox();
HXLINE(  26)		this->add(bg);
HXLINE(  28)		{
HXLINE(  28)			int _g = 0;
HXDLIN(  28)			int _g1 = this->options->length;
HXDLIN(  28)			while((_g < _g1)){
HXLINE(  28)				_g = (_g + 1);
HXDLIN(  28)				int i = (_g - 1);
HXLINE(  29)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(300 + (i * 60)),1280,this->options->__get(i),32,null());
HXLINE(  30)				text->setFormat(null(),32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  31)				this->optionTexts->push(text);
HXLINE(  32)				this->add(text);
            			}
            		}
HXLINE(  35)		this->cursor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,400,(this->optionTexts->__get(0).StaticCast<  ::flixel::text::FlxText >()->y + 8),null());
HXLINE(  36)		this->cursor->makeGraphic(32,32,-65536,null(),null());
HXLINE(  37)		this->add(this->cursor);
HXLINE(  39)		bool _hx_tmp;
HXDLIN(  39)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  39)			_hx_tmp = ::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel );
            		}
            		else {
HXLINE(  39)			_hx_tmp = true;
            		}
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  40)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/menuMusic.ogg",71,65,f4,9f),((Float)1.0),true,null());
            		}
HXLINE(  42)		this->updateSelection();
            	}


void MainMenuState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_6f600fa06bcdf6b1_45_update)
HXLINE(  46)		this->super::update(elapsed);
HXLINE(  49)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  49)		if (_this->keyManager->checkStatusUnsafe(40,_this->status)) {
HXLINE(  50)			this->selected = ::hx::Mod((this->selected + 1),this->options->length);
HXLINE(  51)			this->updateSelection();
            		}
            		else {
HXLINE(  52)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  52)			if (_this1->keyManager->checkStatusUnsafe(38,_this1->status)) {
HXLINE(  53)				this->selected = ::hx::Mod(((this->selected - 1) + this->options->length),this->options->length);
HXLINE(  54)				this->updateSelection();
            			}
            		}
HXLINE(  57)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  57)		if (_this2->keyManager->checkStatusUnsafe(13,_this2->status)) {
HXLINE(  58)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/confirm.ogg",22,0e,a9,76),null(),null(),null(),null(),null());
HXLINE(  59)			{
HXLINE(  59)				 ::flixel::sound::FlxSound _this3 = ::flixel::FlxG_obj::sound->music;
HXDLIN(  59)				_this3->cleanup(_this3->autoDestroy,true);
            			}
HXLINE(  61)			switch((int)(this->selected)){
            				case (int)0: {
HXLINE(  62)					::haxe::Log_obj::trace(HX_("StoryMenuState not found.",fc,d0,3d,b4),::hx::SourceInfo(HX_("source/states/menu/MainMenuState.hx",dc,94,93,e6),62,HX_("states.menu.MainMenuState",f6,9c,af,68),HX_("update",09,86,05,87)));
            				}
            				break;
            				case (int)1: {
HXLINE(  63)					::haxe::Log_obj::trace(HX_("FreeplayMenuState not found.",67,b1,9d,cb),::hx::SourceInfo(HX_("source/states/menu/MainMenuState.hx",dc,94,93,e6),63,HX_("states.menu.MainMenuState",f6,9c,af,68),HX_("update",09,86,05,87)));
            				}
            				break;
            				case (int)2: {
HXLINE(  64)					::haxe::Log_obj::trace(HX_("OptionsMenuState not found.",e5,32,2c,04),::hx::SourceInfo(HX_("source/states/menu/MainMenuState.hx",dc,94,93,e6),64,HX_("states.menu.MainMenuState",f6,9c,af,68),HX_("update",09,86,05,87)));
            				}
            				break;
            			}
            		}
HXLINE(  68)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  68)		if (_this4->keyManager->checkStatusUnsafe(55,_this4->status)) {
HXLINE(  69)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/confirm.ogg",22,0e,a9,76),null(),null(),null(),null(),null());
HXLINE(  70)			{
HXLINE(  70)				 ::flixel::sound::FlxSound _this5 = ::flixel::FlxG_obj::sound->music;
HXDLIN(  70)				_this5->cleanup(_this5->autoDestroy,true);
            			}
HXLINE(  71)			{
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				 ::states::menu::MenuDebugState _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_6f600fa06bcdf6b1_71_update)
HXLINE(  71)					return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6f600fa06bcdf6b1_71_update)
HXLINE(  71)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  71)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  71)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  71)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  71)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  71)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            			}
            		}
            	}


void MainMenuState_obj::updateSelection(){
            	HX_STACKFRAME(&_hx_pos_6f600fa06bcdf6b1_76_updateSelection)
HXLINE(  77)		{
HXLINE(  77)			int _g = 0;
HXDLIN(  77)			int _g1 = this->optionTexts->length;
HXDLIN(  77)			while((_g < _g1)){
HXLINE(  77)				_g = (_g + 1);
HXDLIN(  77)				int i = (_g - 1);
HXLINE(  78)				int _hx_tmp;
HXDLIN(  78)				if ((i == this->selected)) {
HXLINE(  78)					_hx_tmp = -256;
            				}
            				else {
HXLINE(  78)					_hx_tmp = -1;
            				}
HXDLIN(  78)				this->optionTexts->__get(i).StaticCast<  ::flixel::text::FlxText >()->set_color(_hx_tmp);
            			}
            		}
HXLINE(  80)		this->cursor->set_y((this->optionTexts->__get(this->selected).StaticCast<  ::flixel::text::FlxText >()->y + 8));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,updateSelection,(void))


::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__new() {
	::hx::ObjectPtr< MainMenuState_obj > __this = new MainMenuState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MainMenuState_obj *__this = (MainMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuState_obj), true, "states.menu.MainMenuState"));
	*(void **)__this = MainMenuState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MainMenuState_obj::MainMenuState_obj()
{
}

void MainMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuState);
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(optionTexts,"optionTexts");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(optionTexts,"optionTexts");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { return ::hx::Val( cursor ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"optionTexts") ) { return ::hx::Val( optionTexts ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateSelection") ) { return ::hx::Val( updateSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MainMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { cursor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"optionTexts") ) { optionTexts=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MainMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("optionTexts",71,3f,f0,af));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	outFields->push(HX_("cursor",d6,8e,e8,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuState_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuState_obj,optionTexts),HX_("optionTexts",71,3f,f0,af)},
	{::hx::fsInt,(int)offsetof(MainMenuState_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,cursor),HX_("cursor",d6,8e,e8,3e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MainMenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MainMenuState_obj_sMemberFields[] = {
	HX_("options",5e,33,fe,df),
	HX_("optionTexts",71,3f,f0,af),
	HX_("selected",5b,2a,6d,b1),
	HX_("cursor",d6,8e,e8,3e),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("updateSelection",03,c9,a5,dd),
	::String(null()) };

::hx::Class MainMenuState_obj::__mClass;

void MainMenuState_obj::__register()
{
	MainMenuState_obj _hx_dummy;
	MainMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.menu.MainMenuState",f6,9c,af,68);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainMenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace menu
