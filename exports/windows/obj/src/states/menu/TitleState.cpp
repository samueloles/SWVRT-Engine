// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_states_menu_MainMenuState
#include <states/menu/MainMenuState.h>
#endif
#ifndef INCLUDED_states_menu_TitleState
#include <states/menu/TitleState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_028799c7f283c70c_11_new,"states.menu.TitleState","new",0x39c4d3ae,"states.menu.TitleState.new","states/menu/TitleState.hx",11,0xe13e2322)
HX_LOCAL_STACK_FRAME(_hx_pos_028799c7f283c70c_18_create,"states.menu.TitleState","create",0x2e70e86e,"states.menu.TitleState.create","states/menu/TitleState.hx",18,0xe13e2322)
HX_LOCAL_STACK_FRAME(_hx_pos_028799c7f283c70c_46_update,"states.menu.TitleState","update",0x3967077b,"states.menu.TitleState.update","states/menu/TitleState.hx",46,0xe13e2322)
HX_LOCAL_STACK_FRAME(_hx_pos_028799c7f283c70c_57_update,"states.menu.TitleState","update",0x3967077b,"states.menu.TitleState.update","states/menu/TitleState.hx",57,0xe13e2322)
HX_LOCAL_STACK_FRAME(_hx_pos_028799c7f283c70c_59_update,"states.menu.TitleState","update",0x3967077b,"states.menu.TitleState.update","states/menu/TitleState.hx",59,0xe13e2322)
HX_LOCAL_STACK_FRAME(_hx_pos_028799c7f283c70c_63_destroy,"states.menu.TitleState","destroy",0x8775ef48,"states.menu.TitleState.destroy","states/menu/TitleState.hx",63,0xe13e2322)
namespace states{
namespace menu{

void TitleState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_028799c7f283c70c_11_new)
HXLINE(  15)		this->fading = false;
HXLINE(  11)		super::__construct();
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x4bb8df9a) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x4bb8df9a;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void TitleState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_028799c7f283c70c_18_create)
HXLINE(  19)		this->super::create();
HXLINE(  22)		::flixel::FlxG_obj::set_updateFramerate(60);
HXLINE(  23)		::flixel::FlxG_obj::set_drawFramerate(60);
HXLINE(  26)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/imagen/menu/titleBG.png",b8,40,08,d8));
HXLINE(  27)		this->bg->setGraphicSize(1280,720);
HXLINE(  28)		this->bg->updateHitbox();
HXLINE(  29)		this->add(this->bg);
HXLINE(  32)		this->titleText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,140,1280,HX_("SWVRT ENGINE",ee,22,42,ed),64,null());
HXLINE(  33)		this->titleText->setFormat(null(),64,-65536,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  34)		this->add(this->titleText);
HXLINE(  37)		this->pressEnter =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,600,1280,HX_("Presiona ENTER",41,4a,b9,1e),32,null());
HXLINE(  38)		this->pressEnter->setFormat(null(),32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  39)		this->add(this->pressEnter);
HXLINE(  42)		bool _hx_tmp;
HXDLIN(  42)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  42)			_hx_tmp = ::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel );
            		}
            		else {
HXLINE(  42)			_hx_tmp = true;
            		}
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  43)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/menuMusic.ogg",71,65,f4,9f),((Float)1.0),true,null());
            		}
            	}


void TitleState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_028799c7f283c70c_46_update)
HXLINE(  47)		this->super::update(elapsed);
HXLINE(  50)		bool _hx_tmp;
HXDLIN(  50)		if (!(this->fading)) {
HXLINE(  50)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  50)			_hx_tmp = _this->keyManager->checkStatusUnsafe(13,_this->status);
            		}
            		else {
HXLINE(  50)			_hx_tmp = false;
            		}
HXDLIN(  50)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_028799c7f283c70c_57_update)
HXLINE(  58)				{
HXLINE(  58)					 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  58)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(  59)				{
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            					 ::states::menu::MainMenuState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_028799c7f283c70c_59_update)
HXLINE(  59)						return  ::states::menu::MainMenuState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_028799c7f283c70c_59_update)
HXLINE(  59)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  59)							::flixel::FlxG_obj::game->_nextState = nextState;
            						}
            						else {
HXLINE(  59)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  59)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  59)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  59)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  54)			this->fading = true;
HXLINE(  55)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/confirm.ogg",22,0e,a9,76),null(),null(),null(),null(),null());
HXLINE(  57)			::flixel::FlxG_obj::camera->fade(-16777216,1,false, ::Dynamic(new _hx_Closure_2()),null());
            		}
            	}


void TitleState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_028799c7f283c70c_63_destroy)
HXLINE(  64)		if (::hx::IsNotNull( this->blinkTween )) {
HXLINE(  64)			this->blinkTween->cancel();
            		}
HXLINE(  65)		this->super::destroy();
            	}



::hx::ObjectPtr< TitleState_obj > TitleState_obj::__new() {
	::hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TitleState_obj *__this = (TitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "states.menu.TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(pressEnter,"pressEnter");
	HX_MARK_MEMBER_NAME(fading,"fading");
	HX_MARK_MEMBER_NAME(blinkTween,"blinkTween");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(pressEnter,"pressEnter");
	HX_VISIT_MEMBER_NAME(fading,"fading");
	HX_VISIT_MEMBER_NAME(blinkTween,"blinkTween");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fading") ) { return ::hx::Val( fading ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pressEnter") ) { return ::hx::Val( pressEnter ); }
		if (HX_FIELD_EQ(inName,"blinkTween") ) { return ::hx::Val( blinkTween ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fading") ) { fading=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pressEnter") ) { pressEnter=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blinkTween") ) { blinkTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("pressEnter",95,ee,de,4d));
	outFields->push(HX_("fading",b9,75,ae,e4));
	outFields->push(HX_("blinkTween",6f,bb,11,63));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(TitleState_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(TitleState_obj,pressEnter),HX_("pressEnter",95,ee,de,4d)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,fading),HX_("fading",b9,75,ae,e4)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(TitleState_obj,blinkTween),HX_("blinkTween",6f,bb,11,63)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TitleState_obj_sStaticStorageInfo = 0;
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("titleText",65,ba,a4,70),
	HX_("pressEnter",95,ee,de,4d),
	HX_("fading",b9,75,ae,e4),
	HX_("blinkTween",6f,bb,11,63),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class TitleState_obj::__mClass;

void TitleState_obj::__register()
{
	TitleState_obj _hx_dummy;
	TitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.menu.TitleState",bc,24,d2,1d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace menu
