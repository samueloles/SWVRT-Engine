// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_debug_CharacterEditorState
#include <states/debug/CharacterEditorState.h>
#endif
#ifndef INCLUDED_states_debug_ChartMenuState
#include <states/debug/ChartMenuState.h>
#endif
#ifndef INCLUDED_states_debug_EventsEditorState
#include <states/debug/EventsEditorState.h>
#endif
#ifndef INCLUDED_states_debug_MenuEditorState
#include <states/debug/MenuEditorState.h>
#endif
#ifndef INCLUDED_states_debug_ScratchEditorState
#include <states/debug/ScratchEditorState.h>
#endif
#ifndef INCLUDED_states_menu_MenuDebugState
#include <states/menu/MenuDebugState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9789b7b1159c611e_15_new,"states.menu.MenuDebugState","new",0x1d7e2712,"states.menu.MenuDebugState.new","states/menu/MenuDebugState.hx",15,0xfea1983e)
static const ::String _hx_array_data_b13cf620_1[] = {
	HX_W(u"Editor de Men\u00fa",1ce1,9e08),HX_("Editor Scratch",c7,77,3c,7f),HX_("Editor de Eventos",72,2b,58,5e),HX_("Chart Menu",61,04,a7,37),HX_("Character Editor",84,45,58,b1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_21_create,"states.menu.MenuDebugState","create",0xc326cb8a,"states.menu.MenuDebugState.create","states/menu/MenuDebugState.hx",21,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_35_crearFondo,"states.menu.MenuDebugState","crearFondo",0xbec42297,"states.menu.MenuDebugState.crearFondo","states/menu/MenuDebugState.hx",35,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_41_crearTextos,"states.menu.MenuDebugState","crearTextos",0x0a7fa86a,"states.menu.MenuDebugState.crearTextos","states/menu/MenuDebugState.hx",41,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_54_crearBotones,"states.menu.MenuDebugState","crearBotones",0xe759c55b,"states.menu.MenuDebugState.crearBotones","states/menu/MenuDebugState.hx",54,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_71_update,"states.menu.MenuDebugState","update",0xce1cea97,"states.menu.MenuDebugState.update","states/menu/MenuDebugState.hx",71,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_87_update,"states.menu.MenuDebugState","update",0xce1cea97,"states.menu.MenuDebugState.update","states/menu/MenuDebugState.hx",87,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_88_update,"states.menu.MenuDebugState","update",0xce1cea97,"states.menu.MenuDebugState.update","states/menu/MenuDebugState.hx",88,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_89_update,"states.menu.MenuDebugState","update",0xce1cea97,"states.menu.MenuDebugState.update","states/menu/MenuDebugState.hx",89,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_90_update,"states.menu.MenuDebugState","update",0xce1cea97,"states.menu.MenuDebugState.update","states/menu/MenuDebugState.hx",90,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_91_update,"states.menu.MenuDebugState","update",0xce1cea97,"states.menu.MenuDebugState.update","states/menu/MenuDebugState.hx",91,0xfea1983e)
HX_LOCAL_STACK_FRAME(_hx_pos_9789b7b1159c611e_98_updateSelection,"states.menu.MenuDebugState","updateSelection",0x3bd062b5,"states.menu.MenuDebugState.updateSelection","states/menu/MenuDebugState.hx",98,0xfea1983e)
namespace states{
namespace menu{

void MenuDebugState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_15_new)
HXLINE(  18)		this->selected = 0;
HXLINE(  17)		this->optionTexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  16)		this->options = ::Array_obj< ::String >::fromData( _hx_array_data_b13cf620_1,5);
HXLINE(  15)		super::__construct();
            	}

Dynamic MenuDebugState_obj::__CreateEmpty() { return new MenuDebugState_obj; }

void *MenuDebugState_obj::_hx_vtable = 0;

Dynamic MenuDebugState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuDebugState_obj > _hx_result = new MenuDebugState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MenuDebugState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x24fd77fe) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x24fd77fe;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void MenuDebugState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_21_create)
HXLINE(  22)		this->super::create();
HXLINE(  30)		this->crearFondo();
HXLINE(  31)		this->crearTextos();
HXLINE(  32)		this->crearBotones();
            	}


void MenuDebugState_obj::crearFondo(){
            	HX_GC_STACKFRAME(&_hx_pos_9789b7b1159c611e_35_crearFondo)
HXLINE(  36)		 ::flixel::FlxSprite fondo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  37)		int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  37)		int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(  37)		int Alpha = 255;
HXDLIN(  37)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  37)		{
HXLINE(  37)			color = (color & -16711681);
HXDLIN(  37)			color = (color | 1966080);
            		}
HXDLIN(  37)		{
HXLINE(  37)			color = (color & -65281);
HXDLIN(  37)			color = (color | 7680);
            		}
HXDLIN(  37)		{
HXLINE(  37)			color = (color & -256);
HXDLIN(  37)			color = (color | 70);
            		}
HXDLIN(  37)		{
HXLINE(  37)			color = (color & 16777215);
HXDLIN(  37)			int color1;
HXDLIN(  37)			if ((Alpha > 255)) {
HXLINE(  37)				color1 = 255;
            			}
            			else {
HXLINE(  37)				if ((Alpha < 0)) {
HXLINE(  37)					color1 = 0;
            				}
            				else {
HXLINE(  37)					color1 = Alpha;
            				}
            			}
HXDLIN(  37)			color = (color | (color1 << 24));
            		}
HXDLIN(  37)		fondo->makeGraphic(_hx_tmp,_hx_tmp1,color,null(),null());
HXLINE(  38)		this->add(fondo);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuDebugState_obj,crearFondo,(void))

void MenuDebugState_obj::crearTextos(){
            	HX_GC_STACKFRAME(&_hx_pos_9789b7b1159c611e_41_crearTextos)
HXLINE(  42)		::Array< ::Dynamic> textos = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("y",79,00,00,00),60)
            			->setFixed(1,HX_("texto",22,4b,99,0d),HX_("menu debug",12,a5,7a,50))
            			->setFixed(2,HX_("color",63,71,5c,4a),-256)
            			->setFixed(3,HX_("size",c1,a0,53,4c),36)))->init(1, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("y",79,00,00,00),120)
            			->setFixed(1,HX_("texto",22,4b,99,0d),HX_W(u"Men\u00fa de creaci\u00f3n interactiva",601f,1126))
            			->setFixed(2,HX_("color",63,71,5c,4a),-1)
            			->setFixed(3,HX_("size",c1,a0,53,4c),24)));
HXLINE(  47)		{
HXLINE(  47)			int _g = 0;
HXDLIN(  47)			while((_g < textos->length)){
HXLINE(  47)				 ::Dynamic t = textos->__get(_g);
HXDLIN(  47)				_g = (_g + 1);
HXLINE(  48)				 ::flixel::text::FlxText txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,t->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),::flixel::FlxG_obj::width,( (::String)(t->__Field(HX_("texto",22,4b,99,0d),::hx::paccDynamic)) ),t->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic),null());
HXLINE(  49)				txt->setFormat(null(),t->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic),t->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic),HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  50)				this->add(txt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuDebugState_obj,crearTextos,(void))

void MenuDebugState_obj::crearBotones(){
            	HX_GC_STACKFRAME(&_hx_pos_9789b7b1159c611e_54_crearBotones)
HXLINE(  56)		{
HXLINE(  56)			int _g = 0;
HXDLIN(  56)			int _g1 = this->options->length;
HXDLIN(  56)			while((_g < _g1)){
HXLINE(  56)				_g = (_g + 1);
HXDLIN(  56)				int i = (_g - 1);
HXLINE(  57)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(300 + (i * 60)),::flixel::FlxG_obj::width,this->options->__get(i),24,null());
HXLINE(  58)				text->setFormat(null(),24,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  59)				this->optionTexts->push(text);
HXLINE(  60)				this->add(text);
            			}
            		}
HXLINE(  64)		this->cursor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(150) )),(this->optionTexts->__get(0).StaticCast<  ::flixel::text::FlxText >()->y + 8),null());
HXLINE(  65)		this->cursor->makeGraphic(32,32,-65536,null(),null());
HXLINE(  66)		this->add(this->cursor);
HXLINE(  68)		this->updateSelection();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuDebugState_obj,crearBotones,(void))

void MenuDebugState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_71_update)
HXLINE(  72)		this->super::update(elapsed);
HXLINE(  76)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  76)		if (_this->keyManager->checkStatusUnsafe(40,_this->status)) {
HXLINE(  77)			this->selected = ::hx::Mod((this->selected + 1),this->options->length);
HXLINE(  78)			this->updateSelection();
            		}
            		else {
HXLINE(  79)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  79)			if (_this1->keyManager->checkStatusUnsafe(38,_this1->status)) {
HXLINE(  80)				this->selected = ::hx::Mod(((this->selected - 1) + this->options->length),this->options->length);
HXLINE(  81)				this->updateSelection();
            			}
            		}
HXLINE(  85)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  85)		if (_this2->keyManager->checkStatusUnsafe(13,_this2->status)) {
HXLINE(  86)			switch((int)(this->selected)){
            				case (int)0: {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            					 ::states::debug::MenuEditorState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_9789b7b1159c611e_87_update)
HXLINE(  87)						return  ::states::debug::MenuEditorState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_87_update)
HXLINE(  87)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  87)							::flixel::FlxG_obj::game->_nextState = nextState;
            						}
            						else {
HXLINE(  87)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  87)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  87)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  87)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            					 ::states::debug::ScratchEditorState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_9789b7b1159c611e_88_update)
HXLINE(  88)						return  ::states::debug::ScratchEditorState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,nextState1, ::flixel::FlxState,stateOnCall1) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_88_update)
HXLINE(  88)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall1 )) {
HXLINE(  88)							::flixel::FlxG_obj::game->_nextState = nextState1;
            						}
            						else {
HXLINE(  88)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  88)					 ::Dynamic nextState1 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_2()));
HXDLIN(  88)					 ::flixel::FlxState stateOnCall1 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  88)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_3(nextState1,stateOnCall1)));
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            					 ::states::debug::EventsEditorState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_9789b7b1159c611e_89_update)
HXLINE(  89)						return  ::states::debug::EventsEditorState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::Dynamic,nextState2, ::flixel::FlxState,stateOnCall2) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_89_update)
HXLINE(  89)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall2 )) {
HXLINE(  89)							::flixel::FlxG_obj::game->_nextState = nextState2;
            						}
            						else {
HXLINE(  89)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  89)					 ::Dynamic nextState2 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_4()));
HXDLIN(  89)					 ::flixel::FlxState stateOnCall2 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  89)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_5(nextState2,stateOnCall2)));
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(0)
            					 ::states::debug::ChartMenuState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_9789b7b1159c611e_90_update)
HXLINE(  90)						return  ::states::debug::ChartMenuState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::flixel::FlxState,stateOnCall3, ::Dynamic,nextState3) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_90_update)
HXLINE(  90)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall3 )) {
HXLINE(  90)							::flixel::FlxG_obj::game->_nextState = nextState3;
            						}
            						else {
HXLINE(  90)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  90)					 ::Dynamic nextState3 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_6()));
HXDLIN(  90)					 ::flixel::FlxState stateOnCall3 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  90)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_7(stateOnCall3,nextState3)));
            				}
            				break;
            				case (int)4: {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(0)
            					 ::states::debug::CharacterEditorState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_9789b7b1159c611e_91_update)
HXLINE(  91)						return  ::states::debug::CharacterEditorState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::Dynamic,nextState4, ::flixel::FlxState,stateOnCall4) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_91_update)
HXLINE(  91)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall4 )) {
HXLINE(  91)							::flixel::FlxG_obj::game->_nextState = nextState4;
            						}
            						else {
HXLINE(  91)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  91)					 ::Dynamic nextState4 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_8()));
HXDLIN(  91)					 ::flixel::FlxState stateOnCall4 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  91)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_9(nextState4,stateOnCall4)));
            				}
            				break;
            			}
            		}
            	}


void MenuDebugState_obj::updateSelection(){
            	HX_STACKFRAME(&_hx_pos_9789b7b1159c611e_98_updateSelection)
HXLINE(  99)		{
HXLINE(  99)			int _g = 0;
HXDLIN(  99)			int _g1 = this->optionTexts->length;
HXDLIN(  99)			while((_g < _g1)){
HXLINE(  99)				_g = (_g + 1);
HXDLIN(  99)				int i = (_g - 1);
HXLINE( 100)				int _hx_tmp;
HXDLIN( 100)				if ((i == this->selected)) {
HXLINE( 100)					_hx_tmp = -256;
            				}
            				else {
HXLINE( 100)					_hx_tmp = -1;
            				}
HXDLIN( 100)				this->optionTexts->__get(i).StaticCast<  ::flixel::text::FlxText >()->set_color(_hx_tmp);
            			}
            		}
HXLINE( 102)		this->cursor->set_y((this->optionTexts->__get(this->selected).StaticCast<  ::flixel::text::FlxText >()->y + 8));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuDebugState_obj,updateSelection,(void))


::hx::ObjectPtr< MenuDebugState_obj > MenuDebugState_obj::__new() {
	::hx::ObjectPtr< MenuDebugState_obj > __this = new MenuDebugState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MenuDebugState_obj > MenuDebugState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MenuDebugState_obj *__this = (MenuDebugState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuDebugState_obj), true, "states.menu.MenuDebugState"));
	*(void **)__this = MenuDebugState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MenuDebugState_obj::MenuDebugState_obj()
{
}

void MenuDebugState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuDebugState);
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(optionTexts,"optionTexts");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuDebugState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(optionTexts,"optionTexts");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuDebugState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { return ::hx::Val( cursor ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"crearFondo") ) { return ::hx::Val( crearFondo_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"optionTexts") ) { return ::hx::Val( optionTexts ); }
		if (HX_FIELD_EQ(inName,"crearTextos") ) { return ::hx::Val( crearTextos_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"crearBotones") ) { return ::hx::Val( crearBotones_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateSelection") ) { return ::hx::Val( updateSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MenuDebugState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"cursor") ) { cursor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"optionTexts") ) { optionTexts=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuDebugState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("optionTexts",71,3f,f0,af));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	outFields->push(HX_("cursor",d6,8e,e8,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuDebugState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuDebugState_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuDebugState_obj,optionTexts),HX_("optionTexts",71,3f,f0,af)},
	{::hx::fsInt,(int)offsetof(MenuDebugState_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuDebugState_obj,cursor),HX_("cursor",d6,8e,e8,3e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MenuDebugState_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuDebugState_obj_sMemberFields[] = {
	HX_("options",5e,33,fe,df),
	HX_("optionTexts",71,3f,f0,af),
	HX_("selected",5b,2a,6d,b1),
	HX_("cursor",d6,8e,e8,3e),
	HX_("create",fc,66,0f,7c),
	HX_("crearFondo",09,5f,44,cb),
	HX_("crearTextos",b8,4f,34,ee),
	HX_("crearBotones",4d,82,b7,41),
	HX_("update",09,86,05,87),
	HX_("updateSelection",03,c9,a5,dd),
	::String(null()) };

::hx::Class MenuDebugState_obj::__mClass;

void MenuDebugState_obj::__register()
{
	MenuDebugState_obj _hx_dummy;
	MenuDebugState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.menu.MenuDebugState",20,f6,3c,b1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuDebugState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuDebugState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuDebugState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuDebugState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace menu
