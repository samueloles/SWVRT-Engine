// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_debug_CodeEditorMenu
#include <states/debug/CodeEditorMenu.h>
#endif
#ifndef INCLUDED_states_debug_MenuEditorState
#include <states/debug/MenuEditorState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_447cf24677b95537_11_new,"states.debug.CodeEditorMenu","new",0x21eda8f2,"states.debug.CodeEditorMenu.new","states/debug/CodeEditorMenu.hx",11,0xc5ab09bc)
HX_LOCAL_STACK_FRAME(_hx_pos_447cf24677b95537_21_create,"states.debug.CodeEditorMenu","create",0xc6adb5aa,"states.debug.CodeEditorMenu.create","states/debug/CodeEditorMenu.hx",21,0xc5ab09bc)
HX_LOCAL_STACK_FRAME(_hx_pos_447cf24677b95537_12_create,"states.debug.CodeEditorMenu","create",0xc6adb5aa,"states.debug.CodeEditorMenu.create","states/debug/CodeEditorMenu.hx",12,0xc5ab09bc)
HX_LOCAL_STACK_FRAME(_hx_pos_447cf24677b95537_29_update,"states.debug.CodeEditorMenu","update",0xd1a3d4b7,"states.debug.CodeEditorMenu.update","states/debug/CodeEditorMenu.hx",29,0xc5ab09bc)
HX_LOCAL_STACK_FRAME(_hx_pos_447cf24677b95537_31_update,"states.debug.CodeEditorMenu","update",0xd1a3d4b7,"states.debug.CodeEditorMenu.update","states/debug/CodeEditorMenu.hx",31,0xc5ab09bc)
namespace states{
namespace debug{

void CodeEditorMenu_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_447cf24677b95537_11_new)
HXDLIN(  11)		super::__construct();
            	}

Dynamic CodeEditorMenu_obj::__CreateEmpty() { return new CodeEditorMenu_obj; }

void *CodeEditorMenu_obj::_hx_vtable = 0;

Dynamic CodeEditorMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CodeEditorMenu_obj > _hx_result = new CodeEditorMenu_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CodeEditorMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c795c9f) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x563293a6) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x563293a6;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x7c795c9f;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7ff82626;
	}
}

void CodeEditorMenu_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::debug::MenuEditorState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_447cf24677b95537_21_create)
HXLINE(  21)				return  ::states::debug::MenuEditorState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_447cf24677b95537_21_create)
HXLINE(  21)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  21)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE(  21)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_447cf24677b95537_21_create)
HXLINE(  21)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  21)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  21)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_447cf24677b95537_12_create)
HXLINE(  13)		this->super::create();
HXLINE(  15)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  15)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  15)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN(  15)		int Alpha = 255;
HXDLIN(  15)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  15)		{
HXLINE(  15)			color = (color & -16711681);
HXDLIN(  15)			color = (color | 1966080);
            		}
HXDLIN(  15)		{
HXLINE(  15)			color = (color & -65281);
HXDLIN(  15)			color = (color | 7680);
            		}
HXDLIN(  15)		{
HXLINE(  15)			color = (color & -256);
HXDLIN(  15)			color = (color | 30);
            		}
HXDLIN(  15)		{
HXLINE(  15)			color = (color & 16777215);
HXDLIN(  15)			int color1;
HXDLIN(  15)			if ((Alpha > 255)) {
HXLINE(  15)				color1 = 255;
            			}
            			else {
HXLINE(  15)				if ((Alpha < 0)) {
HXLINE(  15)					color1 = 0;
            				}
            				else {
HXLINE(  15)					color1 = Alpha;
            				}
            			}
HXDLIN(  15)			color = (color | (color1 << 24));
            		}
HXDLIN(  15)		this->add(_hx_tmp->makeGraphic(_hx_tmp1,_hx_tmp2,color,null(),null()));
HXLINE(  17)		 ::flixel::text::FlxText titulo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,20,0,HX_W(u"\U0001f4dc MODO PROGRAMAR",b0ea,8c93),null(),null());
HXLINE(  18)		titulo->setFormat(null(),20,-1,null(),null(),null(),null());
HXLINE(  19)		this->add(titulo);
HXLINE(  21)		this->add( ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 160),20,HX_W(u"\u2190 Volver",2c44,1f12), ::Dynamic(new _hx_Closure_2())));
HXLINE(  23)		 ::flixel::text::FlxText placeholder =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,HX_W(u"Bloques de programaci\u00f3n \U0001f604",b496,ebd7),null(),null());
HXLINE(  24)		placeholder->setFormat(null(),18,-16711936,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  25)		{
HXLINE(  25)			int axes = 17;
HXDLIN(  25)			bool _hx_tmp3;
HXDLIN(  25)			if ((axes != 1)) {
HXLINE(  25)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(  25)				_hx_tmp3 = true;
            			}
HXDLIN(  25)			if (_hx_tmp3) {
HXLINE(  25)				int _hx_tmp4 = ::flixel::FlxG_obj::width;
HXDLIN(  25)				placeholder->set_x(((( (Float)(_hx_tmp4) ) - placeholder->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  25)			bool _hx_tmp5;
HXDLIN(  25)			if ((axes != 16)) {
HXLINE(  25)				_hx_tmp5 = (axes == 17);
            			}
            			else {
HXLINE(  25)				_hx_tmp5 = true;
            			}
HXDLIN(  25)			if (_hx_tmp5) {
HXLINE(  25)				int _hx_tmp6 = ::flixel::FlxG_obj::height;
HXDLIN(  25)				placeholder->set_y(((( (Float)(_hx_tmp6) ) - placeholder->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  26)		this->add(placeholder);
            	}


void CodeEditorMenu_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_447cf24677b95537_29_update)
HXLINE(  30)		this->super::update(elapsed);
HXLINE(  31)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  31)		if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::debug::MenuEditorState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_447cf24677b95537_31_update)
HXLINE(  31)				return  ::states::debug::MenuEditorState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_447cf24677b95537_31_update)
HXLINE(  31)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  31)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE(  31)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  31)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  31)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  31)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            	}



::hx::ObjectPtr< CodeEditorMenu_obj > CodeEditorMenu_obj::__new() {
	::hx::ObjectPtr< CodeEditorMenu_obj > __this = new CodeEditorMenu_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CodeEditorMenu_obj > CodeEditorMenu_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CodeEditorMenu_obj *__this = (CodeEditorMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CodeEditorMenu_obj), true, "states.debug.CodeEditorMenu"));
	*(void **)__this = CodeEditorMenu_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CodeEditorMenu_obj::CodeEditorMenu_obj()
{
}

::hx::Val CodeEditorMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CodeEditorMenu_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CodeEditorMenu_obj_sStaticStorageInfo = 0;
#endif

static ::String CodeEditorMenu_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class CodeEditorMenu_obj::__mClass;

void CodeEditorMenu_obj::__register()
{
	CodeEditorMenu_obj _hx_dummy;
	CodeEditorMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.debug.CodeEditorMenu",00,08,8e,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CodeEditorMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CodeEditorMenu_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CodeEditorMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CodeEditorMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace debug
