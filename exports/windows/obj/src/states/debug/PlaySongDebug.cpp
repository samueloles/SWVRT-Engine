// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_debug_PlaySongDebug
#include <states/debug/PlaySongDebug.h>
#endif
#ifndef INCLUDED_states_menu_MenuDebugState
#include <states/menu/MenuDebugState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_20bc201790c2ad86_15_new,"states.debug.PlaySongDebug","new",0x75140f75,"states.debug.PlaySongDebug.new","states/debug/PlaySongDebug.hx",15,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_30_create,"states.debug.PlaySongDebug","create",0x31a20307,"states.debug.PlaySongDebug.create","states/debug/PlaySongDebug.hx",30,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_68_detectarCanciones,"states.debug.PlaySongDebug","detectarCanciones",0xc4963e24,"states.debug.PlaySongDebug.detectarCanciones","states/debug/PlaySongDebug.hx",68,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_93_cargarChart,"states.debug.PlaySongDebug","cargarChart",0xbf9e9ccf,"states.debug.PlaySongDebug.cargarChart","states/debug/PlaySongDebug.hx",93,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_116_crearSistemaNotas,"states.debug.PlaySongDebug","crearSistemaNotas",0xc05e767f,"states.debug.PlaySongDebug.crearSistemaNotas","states/debug/PlaySongDebug.hx",116,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_144_generarNotas,"states.debug.PlaySongDebug","generarNotas",0x339f4d02,"states.debug.PlaySongDebug.generarNotas","states/debug/PlaySongDebug.hx",144,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_164_crearFlechaIzquierda,"states.debug.PlaySongDebug","crearFlechaIzquierda",0x037d4dc5,"states.debug.PlaySongDebug.crearFlechaIzquierda","states/debug/PlaySongDebug.hx",164,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_179_crearFlechaDerecha,"states.debug.PlaySongDebug","crearFlechaDerecha",0xf2ae0e4f,"states.debug.PlaySongDebug.crearFlechaDerecha","states/debug/PlaySongDebug.hx",179,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_194_crearFlechaArriba,"states.debug.PlaySongDebug","crearFlechaArriba",0x0fb10760,"states.debug.PlaySongDebug.crearFlechaArriba","states/debug/PlaySongDebug.hx",194,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_209_crearFlechaAbajo,"states.debug.PlaySongDebug","crearFlechaAbajo",0x25a8ce8c,"states.debug.PlaySongDebug.crearFlechaAbajo","states/debug/PlaySongDebug.hx",209,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_237_crearControlesDebug,"states.debug.PlaySongDebug","crearControlesDebug",0x30c65a04,"states.debug.PlaySongDebug.crearControlesDebug","states/debug/PlaySongDebug.hx",237,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_224_crearControlesDebug,"states.debug.PlaySongDebug","crearControlesDebug",0x30c65a04,"states.debug.PlaySongDebug.crearControlesDebug","states/debug/PlaySongDebug.hx",224,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_242_togglePlay,"states.debug.PlaySongDebug","togglePlay",0xa0897133,"states.debug.PlaySongDebug.togglePlay","states/debug/PlaySongDebug.hx",242,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_247_stopSong,"states.debug.PlaySongDebug","stopSong",0xd38c5dc2,"states.debug.PlaySongDebug.stopSong","states/debug/PlaySongDebug.hx",247,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_253_restartSong,"states.debug.PlaySongDebug","restartSong",0x311d8759,"states.debug.PlaySongDebug.restartSong","states/debug/PlaySongDebug.hx",253,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_260_actualizarDebugInfo,"states.debug.PlaySongDebug","actualizarDebugInfo",0xdf74a6a6,"states.debug.PlaySongDebug.actualizarDebugInfo","states/debug/PlaySongDebug.hx",260,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_271_update,"states.debug.PlaySongDebug","update",0x3c982214,"states.debug.PlaySongDebug.update","states/debug/PlaySongDebug.hx",271,0x0e01f05d)
HX_LOCAL_STACK_FRAME(_hx_pos_20bc201790c2ad86_309_update,"states.debug.PlaySongDebug","update",0x3c982214,"states.debug.PlaySongDebug.update","states/debug/PlaySongDebug.hx",309,0x0e01f05d)
namespace states{
namespace debug{

void PlaySongDebug_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_15_new)
HXLINE(  28)		this->bpm = ((Float)120);
HXLINE(  27)		this->songPosition = ((Float)0);
HXLINE(  26)		this->chartNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  21)		this->isPlaying = false;
HXLINE(  20)		this->currentBeat = 0;
HXLINE(  17)		this->availableSongs = ::Array_obj< ::String >::__new(0);
HXLINE(  16)		this->songName = HX_("Debug Song",02,45,6b,06);
HXLINE(  15)		super::__construct();
            	}

Dynamic PlaySongDebug_obj::__CreateEmpty() { return new PlaySongDebug_obj; }

void *PlaySongDebug_obj::_hx_vtable = 0;

Dynamic PlaySongDebug_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlaySongDebug_obj > _hx_result = new PlaySongDebug_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PlaySongDebug_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x03b3d619) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x03b3d619;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlaySongDebug_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_30_create)
HXLINE(  31)		this->super::create();
HXLINE(  34)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  35)		bg->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-15918294,null(),null());
HXLINE(  36)		this->add(bg);
HXLINE(  39)		 ::flixel::text::FlxText titulo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,(HX_W(u"\U0001f3b5 DEBUG - ",24aa,f2e1) + this->songName),null(),null());
HXLINE(  40)		titulo->setFormat(null(),24,-256,null(),null(),null(),null());
HXLINE(  41)		this->add(titulo);
HXLINE(  44)		this->debugInfo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,60,(::flixel::FlxG_obj::width - 20),HX_("",00,00,00,00),null(),null());
HXLINE(  45)		this->debugInfo->setFormat(null(),14,-1,null(),null(),null(),null());
HXLINE(  46)		this->add(this->debugInfo);
HXLINE(  49)		this->eventsList =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,200,(::flixel::FlxG_obj::width - 20),HX_("Eventos del Chart:\n- Beat 4: Flash\n- Beat 8: Zoom\n- Beat 12: Shake",a4,16,3f,42),null(),null());
HXLINE(  50)		this->eventsList->setFormat(null(),12,-16711681,null(),null(),null(),null());
HXLINE(  51)		this->add(this->eventsList);
HXLINE(  54)		this->detectarCanciones();
HXLINE(  57)		this->cargarChart();
HXLINE(  60)		this->crearSistemaNotas();
HXLINE(  63)		this->crearControlesDebug();
HXLINE(  65)		this->actualizarDebugInfo();
            	}


void PlaySongDebug_obj::detectarCanciones(){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_68_detectarCanciones)
HXLINE(  69)		::String chartsPath = HX_("assets/charts",21,91,2c,59);
HXLINE(  71)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  72)			bool _hx_tmp;
HXDLIN(  72)			if (::sys::FileSystem_obj::exists(chartsPath)) {
HXLINE(  72)				_hx_tmp = ::sys::FileSystem_obj::isDirectory(chartsPath);
            			}
            			else {
HXLINE(  72)				_hx_tmp = false;
            			}
HXDLIN(  72)			if (_hx_tmp) {
HXLINE(  73)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(chartsPath);
HXLINE(  75)				{
HXLINE(  75)					int _g = 0;
HXDLIN(  75)					while((_g < files->length)){
HXLINE(  75)						::String file = files->__get(_g);
HXDLIN(  75)						_g = (_g + 1);
HXLINE(  76)						if (::sys::FileSystem_obj::isDirectory(((chartsPath + HX_("/",2f,00,00,00)) + file))) {
HXLINE(  77)							this->availableSongs->push(file);
            						}
            					}
            				}
HXLINE(  81)				if ((this->availableSongs->length > 0)) {
HXLINE(  82)					this->songName = this->availableSongs->__get(0);
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE(  85)				{
HXLINE(  85)					null();
            				}
HXDLIN(  85)				 ::Dynamic e = _g1;
HXLINE(  86)				{
HXLINE(  86)					 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(  86)					::String _hx_tmp2 = (HX_("Error detectando canciones: ",dc,91,9c,95) + ::Std_obj::string(e));
HXDLIN(  86)					_hx_tmp1(_hx_tmp2,::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),86,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("detectarCanciones",4f,a4,e1,5a)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  89)		 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN(  89)		::String _hx_tmp4 = (HX_W(u"\U0001f3b5 Canciones disponibles: ",895f,19b5) + this->availableSongs->join(HX_(", ",74,26,00,00)));
HXDLIN(  89)		_hx_tmp3(_hx_tmp4,::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),89,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("detectarCanciones",4f,a4,e1,5a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,detectarCanciones,(void))

void PlaySongDebug_obj::cargarChart(){
            	HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_93_cargarChart)
HXDLIN(  93)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  94)			::String chartsPath = HX_("assets/charts",21,91,2c,59);
HXLINE(  95)			if (::sys::FileSystem_obj::exists(chartsPath)) {
HXLINE(  96)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(chartsPath);
HXLINE(  97)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(  97)				{
HXLINE(  97)					int _g1 = 0;
HXDLIN(  97)					::Array< ::String > _g2 = files;
HXDLIN(  97)					while((_g1 < _g2->length)){
HXLINE(  97)						::String v = _g2->__get(_g1);
HXDLIN(  97)						_g1 = (_g1 + 1);
HXDLIN(  97)						if ((v.indexOf(HX_(".json",56,f1,d6,c2),null()) != -1)) {
HXLINE(  97)							_g->push(v);
            						}
            					}
            				}
HXDLIN(  97)				::Array< ::String > jsonFiles = _g;
HXLINE(  99)				if ((jsonFiles->length > 0)) {
HXLINE( 100)					::String latestFile = jsonFiles->__get((jsonFiles->length - 1));
HXLINE( 101)					::String content = ::sys::io::File_obj::getContent(((chartsPath + HX_("/",2f,00,00,00)) + latestFile));
HXLINE( 102)					 ::Dynamic chartData =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,content)->doParse();
HXLINE( 104)					this->chartNotes = ( (::cpp::VirtualArray)(chartData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE( 105)					this->bpm = ( (Float)(chartData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 106)					this->songName = ( (::String)(chartData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE( 108)					::haxe::Log_obj::trace(((HX_W(u"\U0001f3bc Chart cargado: ",54fa,ac9c) + this->chartNotes->get_length()) + HX_(" notas",a5,64,36,6b)),::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),108,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("cargarChart",ba,c0,39,d4)));
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g3 = _hx_e;
HXLINE( 111)				{
HXLINE( 111)					null();
            				}
HXDLIN( 111)				 ::Dynamic e = _g3;
HXLINE( 112)				{
HXLINE( 112)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 112)					::String _hx_tmp1 = (HX_("Error cargando chart: ",67,f6,25,ef) + ::Std_obj::string(e));
HXDLIN( 112)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),112,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("cargarChart",ba,c0,39,d4)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,cargarChart,(void))

void PlaySongDebug_obj::crearSistemaNotas(){
            	HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_116_crearSistemaNotas)
HXLINE( 118)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 119)		this->add(this->notes);
HXLINE( 122)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 150),null());
HXLINE( 123)		this->strumLine->makeGraphic(::flixel::FlxG_obj::width,4,-1,null(),null());
HXLINE( 124)		this->add(this->strumLine);
HXLINE( 127)		{
HXLINE( 127)			{
HXLINE( 128)				 ::flixel::FlxSprite receptor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(160) )),(this->strumLine->y - ( (Float)(40) )),null());
HXLINE( 130)				this->crearFlechaIzquierda(receptor,-8388480);
HXLINE( 135)				receptor->set_alpha(((Float)0.6));
HXLINE( 136)				this->add(receptor);
            			}
HXLINE( 127)			{
HXLINE( 128)				 ::flixel::FlxSprite receptor1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(160) )) + 80),(this->strumLine->y - ( (Float)(40) )),null());
HXLINE( 131)				this->crearFlechaAbajo(receptor1,-16776961);
HXLINE( 135)				receptor1->set_alpha(((Float)0.6));
HXLINE( 136)				this->add(receptor1);
            			}
HXLINE( 127)			{
HXLINE( 128)				 ::flixel::FlxSprite receptor2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(160) )) + 160),(this->strumLine->y - ( (Float)(40) )),null());
HXLINE( 132)				this->crearFlechaArriba(receptor2,-16744448);
HXLINE( 135)				receptor2->set_alpha(((Float)0.6));
HXLINE( 136)				this->add(receptor2);
            			}
HXLINE( 127)			{
HXLINE( 128)				 ::flixel::FlxSprite receptor3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(160) )) + 240),(this->strumLine->y - ( (Float)(40) )),null());
HXLINE( 133)				this->crearFlechaDerecha(receptor3,-65536);
HXLINE( 135)				receptor3->set_alpha(((Float)0.6));
HXLINE( 136)				this->add(receptor3);
            			}
            		}
HXLINE( 140)		this->generarNotas();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,crearSistemaNotas,(void))

void PlaySongDebug_obj::generarNotas(){
            	HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_144_generarNotas)
HXDLIN( 144)		int _g = 0;
HXDLIN( 144)		::cpp::VirtualArray _g1 = this->chartNotes;
HXDLIN( 144)		while((_g < _g1->get_length())){
HXDLIN( 144)			 ::Dynamic noteData = _g1->__get(_g);
HXDLIN( 144)			_g = (_g + 1);
HXLINE( 145)			 ::flixel::FlxSprite nota =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 146)			nota->set_x((((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(160) )) + (::hx::Mod(noteData->__Field(HX_("lane",ec,05,ad,47),::hx::paccDynamic),4) * ( (Float)(80) ))));
HXLINE( 147)			nota->set_y(( (Float)(-100) ));
HXLINE( 150)			Float _hx_switch_0 = ::hx::Mod(noteData->__Field(HX_("lane",ec,05,ad,47),::hx::paccDynamic),4);
            			if (  (_hx_switch_0==( (Float)(0) )) ){
HXLINE( 151)				this->crearFlechaIzquierda(nota,-8388480);
HXDLIN( 151)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==( (Float)(1) )) ){
HXLINE( 152)				this->crearFlechaAbajo(nota,-16776961);
HXDLIN( 152)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==( (Float)(2) )) ){
HXLINE( 153)				this->crearFlechaArriba(nota,-16744448);
HXDLIN( 153)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==( (Float)(3) )) ){
HXLINE( 154)				this->crearFlechaDerecha(nota,-65536);
HXDLIN( 154)				goto _hx_goto_8;
            			}
            			_hx_goto_8:;
HXLINE( 158)			nota->ID = ::Std_obj::_hx_int((( (Float)(noteData->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic)) ) * ( (Float)(1000) )));
HXLINE( 159)			this->notes->add(nota).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,generarNotas,(void))

void PlaySongDebug_obj::crearFlechaIzquierda( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_164_crearFlechaIzquierda)
HXLINE( 165)		sprite->makeGraphic(60,60,0,true,null());
HXLINE( 166)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 168)		{
HXLINE( 168)			int _g = 0;
HXDLIN( 168)			while((_g < 60)){
HXLINE( 168)				_g = (_g + 1);
HXDLIN( 168)				int y = (_g - 1);
HXLINE( 169)				{
HXLINE( 169)					int _g1 = 0;
HXDLIN( 169)					while((_g1 < 60)){
HXLINE( 169)						_g1 = (_g1 + 1);
HXDLIN( 169)						int x = (_g1 - 1);
HXLINE( 170)						bool _hx_tmp;
HXDLIN( 170)						bool _hx_tmp1;
HXDLIN( 170)						bool _hx_tmp2;
HXDLIN( 170)						bool _hx_tmp3;
HXDLIN( 170)						bool _hx_tmp4;
HXDLIN( 170)						if ((x >= 10)) {
HXLINE( 170)							_hx_tmp4 = (x <= 20);
            						}
            						else {
HXLINE( 170)							_hx_tmp4 = false;
            						}
HXDLIN( 170)						if (_hx_tmp4) {
HXLINE( 170)							_hx_tmp3 = (y >= 24);
            						}
            						else {
HXLINE( 170)							_hx_tmp3 = false;
            						}
HXDLIN( 170)						if (_hx_tmp3) {
HXLINE( 170)							_hx_tmp2 = (y <= 35);
            						}
            						else {
HXLINE( 170)							_hx_tmp2 = false;
            						}
HXDLIN( 170)						if (!(_hx_tmp2)) {
HXLINE( 171)							bool _hx_tmp5;
HXDLIN( 171)							bool _hx_tmp6;
HXDLIN( 171)							if ((x >= 0)) {
HXLINE( 171)								_hx_tmp6 = (x <= 30);
            							}
            							else {
HXLINE( 171)								_hx_tmp6 = false;
            							}
HXDLIN( 171)							if (_hx_tmp6) {
HXLINE( 171)								_hx_tmp5 = (y >= 28);
            							}
            							else {
HXLINE( 171)								_hx_tmp5 = false;
            							}
HXDLIN( 171)							if (_hx_tmp5) {
HXLINE( 170)								_hx_tmp1 = (y <= 31);
            							}
            							else {
HXLINE( 170)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 170)							_hx_tmp1 = true;
            						}
HXDLIN( 170)						if (!(_hx_tmp1)) {
HXLINE( 172)							bool _hx_tmp7;
HXDLIN( 172)							if ((x >= 4)) {
HXLINE( 172)								_hx_tmp7 = (x <= 24);
            							}
            							else {
HXLINE( 172)								_hx_tmp7 = false;
            							}
HXDLIN( 172)							if (_hx_tmp7) {
HXLINE( 170)								_hx_tmp = (::Math_obj::abs(( (Float)((y - 29)) )) <= (24 - x));
            							}
            							else {
HXLINE( 170)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 170)							_hx_tmp = true;
            						}
HXDLIN( 170)						if (_hx_tmp) {
HXLINE( 173)							pixels->setPixel32(x,y,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlaySongDebug_obj,crearFlechaIzquierda,(void))

void PlaySongDebug_obj::crearFlechaDerecha( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_179_crearFlechaDerecha)
HXLINE( 180)		sprite->makeGraphic(60,60,0,true,null());
HXLINE( 181)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 183)		{
HXLINE( 183)			int _g = 0;
HXDLIN( 183)			while((_g < 60)){
HXLINE( 183)				_g = (_g + 1);
HXDLIN( 183)				int y = (_g - 1);
HXLINE( 184)				{
HXLINE( 184)					int _g1 = 0;
HXDLIN( 184)					while((_g1 < 60)){
HXLINE( 184)						_g1 = (_g1 + 1);
HXDLIN( 184)						int x = (_g1 - 1);
HXLINE( 185)						bool _hx_tmp;
HXDLIN( 185)						bool _hx_tmp1;
HXDLIN( 185)						bool _hx_tmp2;
HXDLIN( 185)						bool _hx_tmp3;
HXDLIN( 185)						bool _hx_tmp4;
HXDLIN( 185)						if ((x >= 38)) {
HXLINE( 185)							_hx_tmp4 = (x <= 48);
            						}
            						else {
HXLINE( 185)							_hx_tmp4 = false;
            						}
HXDLIN( 185)						if (_hx_tmp4) {
HXLINE( 185)							_hx_tmp3 = (y >= 24);
            						}
            						else {
HXLINE( 185)							_hx_tmp3 = false;
            						}
HXDLIN( 185)						if (_hx_tmp3) {
HXLINE( 185)							_hx_tmp2 = (y <= 35);
            						}
            						else {
HXLINE( 185)							_hx_tmp2 = false;
            						}
HXDLIN( 185)						if (!(_hx_tmp2)) {
HXLINE( 186)							bool _hx_tmp5;
HXDLIN( 186)							bool _hx_tmp6;
HXDLIN( 186)							if ((x >= 28)) {
HXLINE( 186)								_hx_tmp6 = (x <= 58);
            							}
            							else {
HXLINE( 186)								_hx_tmp6 = false;
            							}
HXDLIN( 186)							if (_hx_tmp6) {
HXLINE( 186)								_hx_tmp5 = (y >= 28);
            							}
            							else {
HXLINE( 186)								_hx_tmp5 = false;
            							}
HXDLIN( 186)							if (_hx_tmp5) {
HXLINE( 185)								_hx_tmp1 = (y <= 31);
            							}
            							else {
HXLINE( 185)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 185)							_hx_tmp1 = true;
            						}
HXDLIN( 185)						if (!(_hx_tmp1)) {
HXLINE( 187)							bool _hx_tmp7;
HXDLIN( 187)							if ((x >= 34)) {
HXLINE( 187)								_hx_tmp7 = (x <= 54);
            							}
            							else {
HXLINE( 187)								_hx_tmp7 = false;
            							}
HXDLIN( 187)							if (_hx_tmp7) {
HXLINE( 185)								_hx_tmp = (::Math_obj::abs(( (Float)((y - 29)) )) <= (x - 34));
            							}
            							else {
HXLINE( 185)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 185)							_hx_tmp = true;
            						}
HXDLIN( 185)						if (_hx_tmp) {
HXLINE( 188)							pixels->setPixel32(x,y,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlaySongDebug_obj,crearFlechaDerecha,(void))

void PlaySongDebug_obj::crearFlechaArriba( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_194_crearFlechaArriba)
HXLINE( 195)		sprite->makeGraphic(60,60,0,true,null());
HXLINE( 196)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 198)		{
HXLINE( 198)			int _g = 0;
HXDLIN( 198)			while((_g < 60)){
HXLINE( 198)				_g = (_g + 1);
HXDLIN( 198)				int y = (_g - 1);
HXLINE( 199)				{
HXLINE( 199)					int _g1 = 0;
HXDLIN( 199)					while((_g1 < 60)){
HXLINE( 199)						_g1 = (_g1 + 1);
HXDLIN( 199)						int x = (_g1 - 1);
HXLINE( 200)						bool _hx_tmp;
HXDLIN( 200)						bool _hx_tmp1;
HXDLIN( 200)						bool _hx_tmp2;
HXDLIN( 200)						bool _hx_tmp3;
HXDLIN( 200)						bool _hx_tmp4;
HXDLIN( 200)						if ((x >= 24)) {
HXLINE( 200)							_hx_tmp4 = (x <= 35);
            						}
            						else {
HXLINE( 200)							_hx_tmp4 = false;
            						}
HXDLIN( 200)						if (_hx_tmp4) {
HXLINE( 200)							_hx_tmp3 = (y >= 10);
            						}
            						else {
HXLINE( 200)							_hx_tmp3 = false;
            						}
HXDLIN( 200)						if (_hx_tmp3) {
HXLINE( 200)							_hx_tmp2 = (y <= 20);
            						}
            						else {
HXLINE( 200)							_hx_tmp2 = false;
            						}
HXDLIN( 200)						if (!(_hx_tmp2)) {
HXLINE( 201)							bool _hx_tmp5;
HXDLIN( 201)							bool _hx_tmp6;
HXDLIN( 201)							if ((x >= 28)) {
HXLINE( 201)								_hx_tmp6 = (x <= 31);
            							}
            							else {
HXLINE( 201)								_hx_tmp6 = false;
            							}
HXDLIN( 201)							if (_hx_tmp6) {
HXLINE( 201)								_hx_tmp5 = (y >= 0);
            							}
            							else {
HXLINE( 201)								_hx_tmp5 = false;
            							}
HXDLIN( 201)							if (_hx_tmp5) {
HXLINE( 200)								_hx_tmp1 = (y <= 30);
            							}
            							else {
HXLINE( 200)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 200)							_hx_tmp1 = true;
            						}
HXDLIN( 200)						if (!(_hx_tmp1)) {
HXLINE( 202)							bool _hx_tmp7;
HXDLIN( 202)							if ((y >= 4)) {
HXLINE( 202)								_hx_tmp7 = (y <= 24);
            							}
            							else {
HXLINE( 202)								_hx_tmp7 = false;
            							}
HXDLIN( 202)							if (_hx_tmp7) {
HXLINE( 200)								_hx_tmp = (::Math_obj::abs(( (Float)((x - 29)) )) <= (24 - y));
            							}
            							else {
HXLINE( 200)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 200)							_hx_tmp = true;
            						}
HXDLIN( 200)						if (_hx_tmp) {
HXLINE( 203)							pixels->setPixel32(x,y,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlaySongDebug_obj,crearFlechaArriba,(void))

void PlaySongDebug_obj::crearFlechaAbajo( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_209_crearFlechaAbajo)
HXLINE( 210)		sprite->makeGraphic(60,60,0,true,null());
HXLINE( 211)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 213)		{
HXLINE( 213)			int _g = 0;
HXDLIN( 213)			while((_g < 60)){
HXLINE( 213)				_g = (_g + 1);
HXDLIN( 213)				int y = (_g - 1);
HXLINE( 214)				{
HXLINE( 214)					int _g1 = 0;
HXDLIN( 214)					while((_g1 < 60)){
HXLINE( 214)						_g1 = (_g1 + 1);
HXDLIN( 214)						int x = (_g1 - 1);
HXLINE( 215)						bool _hx_tmp;
HXDLIN( 215)						bool _hx_tmp1;
HXDLIN( 215)						bool _hx_tmp2;
HXDLIN( 215)						bool _hx_tmp3;
HXDLIN( 215)						bool _hx_tmp4;
HXDLIN( 215)						if ((x >= 24)) {
HXLINE( 215)							_hx_tmp4 = (x <= 35);
            						}
            						else {
HXLINE( 215)							_hx_tmp4 = false;
            						}
HXDLIN( 215)						if (_hx_tmp4) {
HXLINE( 215)							_hx_tmp3 = (y >= 38);
            						}
            						else {
HXLINE( 215)							_hx_tmp3 = false;
            						}
HXDLIN( 215)						if (_hx_tmp3) {
HXLINE( 215)							_hx_tmp2 = (y <= 48);
            						}
            						else {
HXLINE( 215)							_hx_tmp2 = false;
            						}
HXDLIN( 215)						if (!(_hx_tmp2)) {
HXLINE( 216)							bool _hx_tmp5;
HXDLIN( 216)							bool _hx_tmp6;
HXDLIN( 216)							if ((x >= 28)) {
HXLINE( 216)								_hx_tmp6 = (x <= 31);
            							}
            							else {
HXLINE( 216)								_hx_tmp6 = false;
            							}
HXDLIN( 216)							if (_hx_tmp6) {
HXLINE( 216)								_hx_tmp5 = (y >= 28);
            							}
            							else {
HXLINE( 216)								_hx_tmp5 = false;
            							}
HXDLIN( 216)							if (_hx_tmp5) {
HXLINE( 215)								_hx_tmp1 = (y <= 58);
            							}
            							else {
HXLINE( 215)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 215)							_hx_tmp1 = true;
            						}
HXDLIN( 215)						if (!(_hx_tmp1)) {
HXLINE( 217)							bool _hx_tmp7;
HXDLIN( 217)							if ((y >= 34)) {
HXLINE( 217)								_hx_tmp7 = (y <= 54);
            							}
            							else {
HXLINE( 217)								_hx_tmp7 = false;
            							}
HXDLIN( 217)							if (_hx_tmp7) {
HXLINE( 215)								_hx_tmp = (::Math_obj::abs(( (Float)((x - 29)) )) <= (y - 34));
            							}
            							else {
HXLINE( 215)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 215)							_hx_tmp = true;
            						}
HXDLIN( 215)						if (_hx_tmp) {
HXLINE( 218)							pixels->setPixel32(x,y,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlaySongDebug_obj,crearFlechaAbajo,(void))

void PlaySongDebug_obj::crearControlesDebug(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::menu::MenuDebugState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_237_crearControlesDebug)
HXLINE( 237)				return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_237_crearControlesDebug)
HXLINE( 237)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 237)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE( 237)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_237_crearControlesDebug)
HXLINE( 237)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 237)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 237)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_224_crearControlesDebug)
HXLINE( 225)		int y = (::flixel::FlxG_obj::height - 120);
HXLINE( 227)		::String btnPlay;
HXDLIN( 227)		if (this->isPlaying) {
HXLINE( 227)			btnPlay = HX_W(u"\u23f8\ufe0f Pausar",c925,5ab8);
            		}
            		else {
HXLINE( 227)			btnPlay = HX_W(u"\u25b6\ufe0f Play",fbb0,8031);
            		}
HXDLIN( 227)		 ::flixel::ui::FlxButton btnPlay1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,y,btnPlay,this->togglePlay_dyn());
HXLINE( 228)		this->add(btnPlay1);
HXLINE( 230)		 ::flixel::ui::FlxButton btnStop =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,120,y,HX_W(u"\u23f9\ufe0f Stop",b1a8,b8fe),this->stopSong_dyn());
HXLINE( 231)		this->add(btnStop);
HXLINE( 233)		 ::flixel::ui::FlxButton btnRestart =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,230,y,HX_W(u"\U0001f504 Restart",076e,fb68),this->restartSong_dyn());
HXLINE( 234)		this->add(btnRestart);
HXLINE( 236)		 ::flixel::ui::FlxButton btnVolver =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 120),10,HX_W(u"\u2190 Volver",2c44,1f12), ::Dynamic(new _hx_Closure_2()));
HXLINE( 239)		this->add(btnVolver);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,crearControlesDebug,(void))

void PlaySongDebug_obj::togglePlay(){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_242_togglePlay)
HXLINE( 243)		this->isPlaying = !(this->isPlaying);
HXLINE( 244)		 ::Dynamic _hx_tmp;
HXDLIN( 244)		if (this->isPlaying) {
HXLINE( 244)			_hx_tmp = HX_W(u"\u25b6\ufe0f Reproduciendo",6b49,cfdb);
            		}
            		else {
HXLINE( 244)			_hx_tmp = HX_W(u"\u23f8\ufe0f Pausado",2b78,06f7);
            		}
HXDLIN( 244)		::haxe::Log_obj::trace(_hx_tmp,::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),244,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("togglePlay",a8,73,10,e2)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,togglePlay,(void))

void PlaySongDebug_obj::stopSong(){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_247_stopSong)
HXLINE( 248)		this->isPlaying = false;
HXLINE( 249)		this->currentBeat = 0;
HXLINE( 250)		::haxe::Log_obj::trace(HX_W(u"\u23f9\ufe0f Detenido",e95e,e1ab),::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),250,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("stopSong",f7,68,12,9f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,stopSong,(void))

void PlaySongDebug_obj::restartSong(){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_253_restartSong)
HXLINE( 254)		this->currentBeat = 0;
HXLINE( 255)		this->isPlaying = true;
HXLINE( 256)		::haxe::Log_obj::trace(HX_W(u"\U0001f504 Reiniciado",5c56,522f),::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),256,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("restartSong",44,ab,b8,45)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,restartSong,(void))

void PlaySongDebug_obj::actualizarDebugInfo(){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_260_actualizarDebugInfo)
HXDLIN( 260)		::String _hx_tmp;
HXDLIN( 260)		if (this->isPlaying) {
HXDLIN( 260)			_hx_tmp = HX_("REPRODUCIENDO",65,78,23,06);
            		}
            		else {
HXDLIN( 260)			_hx_tmp = HX_("PAUSADO",dd,22,05,24);
            		}
HXDLIN( 260)		this->debugInfo->set_text(((((((((((((((HX_("Estado: ",ec,fd,6e,96) + _hx_tmp) + HX_("\nBeat actual: ",34,ae,bf,9b)) + this->currentBeat) + HX_("\nTiempo: ",2c,40,5e,7f)) + ::Math_obj::round((this->songPosition / ( (Float)(1000) )))) + HX_("s",73,00,00,00)) + HX_("\nNotas activas: ",52,39,99,18)) + this->notes->length) + HX_("\nFPS: ",65,76,be,82)) + ::flixel::FlxG_obj::drawFramerate) + HX_("\n\nControles:",af,d1,94,95)) + HX_("\nESPACIO - Simular evento",a9,9e,33,24)) + HX_("\n1,2,3,4 - Simular notas",8d,96,f1,6d)) + HX_("\nESC - Salir",5f,60,72,26)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlaySongDebug_obj,actualizarDebugInfo,(void))

void PlaySongDebug_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_271_update)
HXLINE( 272)		this->super::update(elapsed);
HXLINE( 275)		if (this->isPlaying) {
HXLINE( 276)			 ::states::debug::PlaySongDebug _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 276)			_hx_tmp->songPosition = (_hx_tmp->songPosition + (elapsed * ( (Float)(1000) )));
HXLINE( 277)			this->currentBeat = ::Std_obj::_hx_int(((this->songPosition / ( (Float)(1000) )) * (this->bpm / ( (Float)(60) ))));
HXLINE( 280)			{
HXLINE( 280)				int _g = 0;
HXDLIN( 280)				::Array< ::Dynamic> _g1 = this->notes->members;
HXDLIN( 280)				while((_g < _g1->length)){
HXLINE( 280)					 ::flixel::FlxBasic nota = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 280)					_g = (_g + 1);
HXLINE( 281)					if (::hx::IsNotNull( nota )) {
HXLINE( 282)						 ::flixel::FlxSprite noteSprite = ( ( ::flixel::FlxSprite)(nota) );
HXLINE( 283)						int tiempoNota = noteSprite->ID;
HXLINE( 284)						Float posicionY = ((this->strumLine->y - ( (Float)(40) )) - ((( (Float)(tiempoNota) ) - this->songPosition) * ((Float)0.5)));
HXLINE( 285)						noteSprite->set_y(posicionY);
HXLINE( 288)						if ((noteSprite->y > (::flixel::FlxG_obj::height + 100))) {
HXLINE( 289)							this->notes->remove(noteSprite,null()).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
            				}
            			}
HXLINE( 294)			this->actualizarDebugInfo();
            		}
HXLINE( 298)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 298)		if (_this->keyManager->checkStatusUnsafe(32,_this->status)) {
HXLINE( 299)			::haxe::Log_obj::trace((HX_W(u"\U0001f3af Evento simulado en beat ",4c3a,81b1) + this->currentBeat),::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),299,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("update",09,86,05,87)));
HXLINE( 300)			::flixel::FlxG_obj::camera->flash((int)1157627903,((Float)0.2),null(),null());
            		}
HXLINE( 303)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 303)		if (_this1->keyManager->checkStatusUnsafe(49,_this1->status)) {
HXLINE( 303)			::haxe::Log_obj::trace(HX_W(u"\U0001f3b5 Nota 1",c6a9,4a4d),::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),303,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("update",09,86,05,87)));
            		}
HXLINE( 304)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 304)		if (_this2->keyManager->checkStatusUnsafe(50,_this2->status)) {
HXLINE( 304)			::haxe::Log_obj::trace(HX_W(u"\U0001f3b5 Nota 2",c6aa,4a4d),::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),304,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("update",09,86,05,87)));
            		}
HXLINE( 305)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 305)		if (_this3->keyManager->checkStatusUnsafe(51,_this3->status)) {
HXLINE( 305)			::haxe::Log_obj::trace(HX_W(u"\U0001f3b5 Nota 3",c6ab,4a4d),::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),305,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("update",09,86,05,87)));
            		}
HXLINE( 306)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 306)		if (_this4->keyManager->checkStatusUnsafe(52,_this4->status)) {
HXLINE( 306)			::haxe::Log_obj::trace(HX_W(u"\U0001f3b5 Nota 4",c6ac,4a4d),::hx::SourceInfo(HX_("source/states/debug/PlaySongDebug.hx",e9,70,02,24),306,HX_("states.debug.PlaySongDebug",03,31,b8,bd),HX_("update",09,86,05,87)));
            		}
HXLINE( 308)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 308)		if (_this5->keyManager->checkStatusUnsafe(27,_this5->status)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::menu::MenuDebugState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_20bc201790c2ad86_309_update)
HXLINE( 309)				return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_20bc201790c2ad86_309_update)
HXLINE( 309)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 309)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE( 309)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 309)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 309)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 309)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            	}



::hx::ObjectPtr< PlaySongDebug_obj > PlaySongDebug_obj::__new() {
	::hx::ObjectPtr< PlaySongDebug_obj > __this = new PlaySongDebug_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PlaySongDebug_obj > PlaySongDebug_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PlaySongDebug_obj *__this = (PlaySongDebug_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlaySongDebug_obj), true, "states.debug.PlaySongDebug"));
	*(void **)__this = PlaySongDebug_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PlaySongDebug_obj::PlaySongDebug_obj()
{
}

void PlaySongDebug_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlaySongDebug);
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(availableSongs,"availableSongs");
	HX_MARK_MEMBER_NAME(debugInfo,"debugInfo");
	HX_MARK_MEMBER_NAME(eventsList,"eventsList");
	HX_MARK_MEMBER_NAME(currentBeat,"currentBeat");
	HX_MARK_MEMBER_NAME(isPlaying,"isPlaying");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(chartNotes,"chartNotes");
	HX_MARK_MEMBER_NAME(songPosition,"songPosition");
	HX_MARK_MEMBER_NAME(bpm,"bpm");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlaySongDebug_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(availableSongs,"availableSongs");
	HX_VISIT_MEMBER_NAME(debugInfo,"debugInfo");
	HX_VISIT_MEMBER_NAME(eventsList,"eventsList");
	HX_VISIT_MEMBER_NAME(currentBeat,"currentBeat");
	HX_VISIT_MEMBER_NAME(isPlaying,"isPlaying");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(chartNotes,"chartNotes");
	HX_VISIT_MEMBER_NAME(songPosition,"songPosition");
	HX_VISIT_MEMBER_NAME(bpm,"bpm");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlaySongDebug_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { return ::hx::Val( bpm ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"stopSong") ) { return ::hx::Val( stopSong_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"debugInfo") ) { return ::hx::Val( debugInfo ); }
		if (HX_FIELD_EQ(inName,"isPlaying") ) { return ::hx::Val( isPlaying ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventsList") ) { return ::hx::Val( eventsList ); }
		if (HX_FIELD_EQ(inName,"chartNotes") ) { return ::hx::Val( chartNotes ); }
		if (HX_FIELD_EQ(inName,"togglePlay") ) { return ::hx::Val( togglePlay_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentBeat") ) { return ::hx::Val( currentBeat ); }
		if (HX_FIELD_EQ(inName,"cargarChart") ) { return ::hx::Val( cargarChart_dyn() ); }
		if (HX_FIELD_EQ(inName,"restartSong") ) { return ::hx::Val( restartSong_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { return ::hx::Val( songPosition ); }
		if (HX_FIELD_EQ(inName,"generarNotas") ) { return ::hx::Val( generarNotas_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"availableSongs") ) { return ::hx::Val( availableSongs ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"crearFlechaAbajo") ) { return ::hx::Val( crearFlechaAbajo_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detectarCanciones") ) { return ::hx::Val( detectarCanciones_dyn() ); }
		if (HX_FIELD_EQ(inName,"crearSistemaNotas") ) { return ::hx::Val( crearSistemaNotas_dyn() ); }
		if (HX_FIELD_EQ(inName,"crearFlechaArriba") ) { return ::hx::Val( crearFlechaArriba_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"crearFlechaDerecha") ) { return ::hx::Val( crearFlechaDerecha_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"crearControlesDebug") ) { return ::hx::Val( crearControlesDebug_dyn() ); }
		if (HX_FIELD_EQ(inName,"actualizarDebugInfo") ) { return ::hx::Val( actualizarDebugInfo_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"crearFlechaIzquierda") ) { return ::hx::Val( crearFlechaIzquierda_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlaySongDebug_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { bpm=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"debugInfo") ) { debugInfo=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isPlaying") ) { isPlaying=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventsList") ) { eventsList=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartNotes") ) { chartNotes=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentBeat") ) { currentBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { songPosition=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"availableSongs") ) { availableSongs=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlaySongDebug_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("availableSongs",75,34,6a,a2));
	outFields->push(HX_("debugInfo",61,dc,06,29));
	outFields->push(HX_("eventsList",17,98,ce,52));
	outFields->push(HX_("currentBeat",4f,ba,a5,79));
	outFields->push(HX_("isPlaying",a4,8c,16,8e));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("chartNotes",83,4a,e9,d3));
	outFields->push(HX_("songPosition",9e,dd,3b,8d));
	outFields->push(HX_("bpm",df,be,4a,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlaySongDebug_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(PlaySongDebug_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlaySongDebug_obj,availableSongs),HX_("availableSongs",75,34,6a,a2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlaySongDebug_obj,debugInfo),HX_("debugInfo",61,dc,06,29)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlaySongDebug_obj,eventsList),HX_("eventsList",17,98,ce,52)},
	{::hx::fsInt,(int)offsetof(PlaySongDebug_obj,currentBeat),HX_("currentBeat",4f,ba,a5,79)},
	{::hx::fsBool,(int)offsetof(PlaySongDebug_obj,isPlaying),HX_("isPlaying",a4,8c,16,8e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlaySongDebug_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlaySongDebug_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PlaySongDebug_obj,chartNotes),HX_("chartNotes",83,4a,e9,d3)},
	{::hx::fsFloat,(int)offsetof(PlaySongDebug_obj,songPosition),HX_("songPosition",9e,dd,3b,8d)},
	{::hx::fsFloat,(int)offsetof(PlaySongDebug_obj,bpm),HX_("bpm",df,be,4a,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlaySongDebug_obj_sStaticStorageInfo = 0;
#endif

static ::String PlaySongDebug_obj_sMemberFields[] = {
	HX_("songName",c0,d0,d7,36),
	HX_("availableSongs",75,34,6a,a2),
	HX_("debugInfo",61,dc,06,29),
	HX_("eventsList",17,98,ce,52),
	HX_("currentBeat",4f,ba,a5,79),
	HX_("isPlaying",a4,8c,16,8e),
	HX_("notes",41,dc,ca,9f),
	HX_("strumLine",dd,79,d7,ee),
	HX_("chartNotes",83,4a,e9,d3),
	HX_("songPosition",9e,dd,3b,8d),
	HX_("bpm",df,be,4a,00),
	HX_("create",fc,66,0f,7c),
	HX_("detectarCanciones",4f,a4,e1,5a),
	HX_("cargarChart",ba,c0,39,d4),
	HX_("crearSistemaNotas",aa,dc,a9,56),
	HX_("generarNotas",b7,96,c3,26),
	HX_("crearFlechaIzquierda",7a,d4,41,b6),
	HX_("crearFlechaDerecha",c4,0d,5c,de),
	HX_("crearFlechaArriba",8b,6d,fc,a5),
	HX_("crearFlechaAbajo",c1,96,ac,f2),
	HX_("crearControlesDebug",ef,e0,57,7d),
	HX_("togglePlay",a8,73,10,e2),
	HX_("stopSong",f7,68,12,9f),
	HX_("restartSong",44,ab,b8,45),
	HX_("actualizarDebugInfo",91,2d,06,2c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class PlaySongDebug_obj::__mClass;

void PlaySongDebug_obj::__register()
{
	PlaySongDebug_obj _hx_dummy;
	PlaySongDebug_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.debug.PlaySongDebug",03,31,b8,bd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlaySongDebug_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlaySongDebug_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlaySongDebug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlaySongDebug_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace debug
