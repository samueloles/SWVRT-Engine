// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonState_Impl_
#include <flixel/ui/_FlxButton/FlxButtonState_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_objetos_ImagenMenu
#include <objetos/ImagenMenu.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_states_debug_CodeEditorMenu
#include <states/debug/CodeEditorMenu.h>
#endif
#ifndef INCLUDED_states_debug_EditorMode
#include <states/debug/EditorMode.h>
#endif
#ifndef INCLUDED_states_debug_ImageSelectorState
#include <states/debug/ImageSelectorState.h>
#endif
#ifndef INCLUDED_states_debug_MenuEditorState
#include <states/debug/MenuEditorState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e9341f7f5493d482_25_new,"states.debug.MenuEditorState","new",0xe2982d50,"states.debug.MenuEditorState.new","states/debug/MenuEditorState.hx",25,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_79_create,"states.debug.MenuEditorState","create",0xca8fc00c,"states.debug.MenuEditorState.create","states/debug/MenuEditorState.hx",79,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_89_create,"states.debug.MenuEditorState","create",0xca8fc00c,"states.debug.MenuEditorState.create","states/debug/MenuEditorState.hx",89,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_103_create,"states.debug.MenuEditorState","create",0xca8fc00c,"states.debug.MenuEditorState.create","states/debug/MenuEditorState.hx",103,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_115_create,"states.debug.MenuEditorState","create",0xca8fc00c,"states.debug.MenuEditorState.create","states/debug/MenuEditorState.hx",115,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_45_create,"states.debug.MenuEditorState","create",0xca8fc00c,"states.debug.MenuEditorState.create","states/debug/MenuEditorState.hx",45,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_132_mostrarFuentes,"states.debug.MenuEditorState","mostrarFuentes",0x9960c51a,"states.debug.MenuEditorState.mostrarFuentes","states/debug/MenuEditorState.hx",132,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_158_mostrarFuentes,"states.debug.MenuEditorState","mostrarFuentes",0x9960c51a,"states.debug.MenuEditorState.mostrarFuentes","states/debug/MenuEditorState.hx",158,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_173_update,"states.debug.MenuEditorState","update",0xd585df19,"states.debug.MenuEditorState.update","states/debug/MenuEditorState.hx",173,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_180_update,"states.debug.MenuEditorState","update",0xd585df19,"states.debug.MenuEditorState.update","states/debug/MenuEditorState.hx",180,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_221_update,"states.debug.MenuEditorState","update",0xd585df19,"states.debug.MenuEditorState.update","states/debug/MenuEditorState.hx",221,0x070f3b62)
static const int _hx_array_data_378b855e_23[] = {
	(int)37,(int)39,(int)38,(int)40,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_409_exportarEscena,"states.debug.MenuEditorState","exportarEscena",0x868fed18,"states.debug.MenuEditorState.exportarEscena","states/debug/MenuEditorState.hx",409,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_432_guardarMenu,"states.debug.MenuEditorState","guardarMenu",0x49a94ec5,"states.debug.MenuEditorState.guardarMenu","states/debug/MenuEditorState.hx",432,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_480_mostrarDialogoReemplazo,"states.debug.MenuEditorState","mostrarDialogoReemplazo",0x8b8962c8,"states.debug.MenuEditorState.mostrarDialogoReemplazo","states/debug/MenuEditorState.hx",480,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_468_mostrarDialogoReemplazo,"states.debug.MenuEditorState","mostrarDialogoReemplazo",0x8b8962c8,"states.debug.MenuEditorState.mostrarDialogoReemplazo","states/debug/MenuEditorState.hx",468,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_492_cerrarDialog,"states.debug.MenuEditorState","cerrarDialog",0xaa05f68b,"states.debug.MenuEditorState.cerrarDialog","states/debug/MenuEditorState.hx",492,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_526_mostrarOpcionesEstablecer,"states.debug.MenuEditorState","mostrarOpcionesEstablecer",0x950686f4,"states.debug.MenuEditorState.mostrarOpcionesEstablecer","states/debug/MenuEditorState.hx",526,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_532_mostrarOpcionesEstablecer,"states.debug.MenuEditorState","mostrarOpcionesEstablecer",0x950686f4,"states.debug.MenuEditorState.mostrarOpcionesEstablecer","states/debug/MenuEditorState.hx",532,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_514_mostrarOpcionesEstablecer,"states.debug.MenuEditorState","mostrarOpcionesEstablecer",0x950686f4,"states.debug.MenuEditorState.mostrarOpcionesEstablecer","states/debug/MenuEditorState.hx",514,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_543_establecerComoPause,"states.debug.MenuEditorState","establecerComoPause",0x1c420f28,"states.debug.MenuEditorState.establecerComoPause","states/debug/MenuEditorState.hx",543,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_558_establecerComoOtro,"states.debug.MenuEditorState","establecerComoOtro",0x5a366c30,"states.debug.MenuEditorState.establecerComoOtro","states/debug/MenuEditorState.hx",558,0x070f3b62)
HX_LOCAL_STACK_FRAME(_hx_pos_e9341f7f5493d482_31_boot,"states.debug.MenuEditorState","boot",0x5aa87942,"states.debug.MenuEditorState.boot","states/debug/MenuEditorState.hx",31,0x070f3b62)
namespace states{
namespace debug{

void MenuEditorState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_25_new)
HXLINE(  43)		this->showingDialog = false;
HXLINE(  40)		this->nombreMenu = HX_("MiMenu",3b,23,c0,71);
HXLINE(  39)		this->modoActual = ::states::debug::EditorMode_obj::EDITAR_dyn();
HXLINE(  37)		this->velocidad = 2;
HXLINE(  35)		this->seleccionado = null();
HXLINE(  33)		this->fuenteActiva = null();
HXLINE(  30)		this->textoTemporal = HX_("",00,00,00,00);
HXLINE(  29)		this->editandoTexto = false;
HXLINE(  27)		this->botonesUI = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  26)		this->elementos = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  25)		super::__construct();
            	}

Dynamic MenuEditorState_obj::__CreateEmpty() { return new MenuEditorState_obj; }

void *MenuEditorState_obj::_hx_vtable = 0;

Dynamic MenuEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuEditorState_obj > _hx_result = new MenuEditorState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MenuEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x78972c58) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x563293a6) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x563293a6;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x78972c58;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void MenuEditorState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::debug::MenuEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_79_create)
HXLINE(  80)			 ::flixel::text::FlxText txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,300,150,300,HX_("Nuevo texto",19,d3,1f,9d),null(),null());
HXLINE(  81)			txt->setFormat(_gthis->fuenteActiva,18,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  82)			_gthis->add(txt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  83)			_gthis->elementos->push(txt);
HXLINE(  84)			::states::debug::MenuEditorState_obj::elementosCompartidos = _gthis->elementos->copy();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::debug::MenuEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_89_create)
HXLINE(  90)			 ::flixel::ui::FlxButton btn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,400,200,HX_W(u"Bot\u00f3n nuevo",406e,ef0d),null());
HXLINE(  91)			_gthis->add(btn).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  92)			_gthis->elementos->push(btn);
HXLINE(  93)			::states::debug::MenuEditorState_obj::elementosCompartidos = _gthis->elementos->copy();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            			 ::states::debug::ImageSelectorState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_103_create)
HXLINE( 103)				return  ::states::debug::ImageSelectorState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_103_create)
HXLINE( 103)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 103)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE( 103)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_103_create)
HXLINE( 103)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_2()));
HXDLIN( 103)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 103)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_3(nextState,stateOnCall)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::debug::MenuEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_115_create)
HXLINE( 116)			_gthis->modoActual = ::states::debug::EditorMode_obj::EDITAR_dyn();
HXLINE( 117)			_gthis->info->set_text(HX_W(u"\U0001f5b1\ufe0f Modo: EDICI\u00d3N",64c5,43a7));
HXLINE( 118)			{
HXLINE( 118)				int _g = 0;
HXDLIN( 118)				::Array< ::Dynamic> _g1 = _gthis->botonesUI;
HXDLIN( 118)				while((_g < _g1->length)){
HXLINE( 118)					 ::flixel::ui::FlxButton btn = _g1->__get(_g).StaticCast<  ::flixel::ui::FlxButton >();
HXDLIN( 118)					_g = (_g + 1);
HXDLIN( 118)					btn->set_visible(true);
            				}
            			}
HXLINE( 119)			_gthis->info->set_visible(true);
HXLINE( 120)			_gthis->btnVolver->set_visible(false);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_45_create)
HXDLIN(  45)		 ::states::debug::MenuEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  46)		this->super::create();
HXLINE(  48)		this->info =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,800,HX_W(u"\U0001f5b1\ufe0f Modo: EDICI\u00d3N",64c5,43a7),null(),null());
HXLINE(  49)		this->info->setFormat(null(),16,-1,null(),null(),null(),null());
HXLINE(  50)		this->add(this->info);
HXLINE(  53)		 ::flixel::text::FlxText labelNombre =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,35,0,HX_("Nombre:",f1,38,f2,10),null(),null());
HXLINE(  54)		labelNombre->setFormat(null(),14,-1,null(),null(),null(),null());
HXLINE(  55)		this->add(labelNombre);
HXLINE(  57)		this->inputNombre =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,80,35,200,this->nombreMenu,null(),null());
HXLINE(  58)		this->inputNombre->setFormat(null(),14,-256,null(),null(),null(),null());
HXLINE(  59)		this->add(this->inputNombre);
HXLINE(  62)		if ((::states::debug::MenuEditorState_obj::elementosCompartidos->get_length() > 0)) {
HXLINE(  63)			this->elementos = ::states::debug::MenuEditorState_obj::elementosCompartidos->copy();
HXLINE(  64)			{
HXLINE(  64)				int _g = 0;
HXDLIN(  64)				::cpp::VirtualArray _g1 = this->elementos;
HXDLIN(  64)				while((_g < _g1->get_length())){
HXLINE(  64)					 ::Dynamic elemento = _g1->__get(_g);
HXDLIN(  64)					_g = (_g + 1);
HXLINE(  65)					this->add(elemento);
            				}
            			}
            		}
HXLINE(  70)		if (::hx::IsNotNull( ::states::debug::ImageSelectorState_obj::imagenSeleccionada )) {
HXLINE(  71)			 ::objetos::ImagenMenu imagen =  ::objetos::ImagenMenu_obj::__alloc( HX_CTX ,300,200,::states::debug::ImageSelectorState_obj::imagenSeleccionada);
HXLINE(  72)			this->add(imagen);
HXLINE(  73)			this->elementos->push(imagen);
HXLINE(  74)			::states::debug::MenuEditorState_obj::elementosCompartidos = this->elementos->copy();
HXLINE(  75)			this->info->set_text(HX_W(u"\U0001f5bc\ufe0f Imagen agregada",b94e,6309));
HXLINE(  76)			::states::debug::ImageSelectorState_obj::imagenSeleccionada = null();
            		}
HXLINE(  79)		 ::flixel::ui::FlxButton btnTexto =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,40,HX_("Agregar texto",c1,3c,24,53), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  86)		this->add(btnTexto);
HXLINE(  87)		this->botonesUI->push(btnTexto);
HXLINE(  89)		 ::flixel::ui::FlxButton btnBoton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,40,HX_W(u"Nuevo bot\u00f3n",8460,6be5), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(  95)		this->add(btnBoton);
HXLINE(  96)		this->botonesUI->push(btnBoton);
HXLINE(  98)		 ::flixel::ui::FlxButton btnFuentes =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,290,40,HX_("Mostrar fuentes",6a,6a,f3,77),this->mostrarFuentes_dyn());
HXLINE(  99)		this->add(btnFuentes);
HXLINE( 100)		this->botonesUI->push(btnFuentes);
HXLINE( 102)		 ::flixel::ui::FlxButton btnImagen =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,430,40,HX_("Selector imagen",74,2f,d8,91), ::Dynamic(new _hx_Closure_4()));
HXLINE( 105)		this->add(btnImagen);
HXLINE( 106)		this->botonesUI->push(btnImagen);
HXLINE( 108)		this->seleccionRect =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 109)		this->seleccionRect->makeGraphic(1,1,(int)-1996488705,null(),null());
HXLINE( 110)		this->seleccionRect->set_visible(false);
HXLINE( 111)		{
HXLINE( 111)			 ::flixel::math::FlxBasePoint this1 = this->seleccionRect->scrollFactor;
HXDLIN( 111)			this1->set_x(( (Float)(0) ));
HXDLIN( 111)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 112)		this->add(this->seleccionRect);
HXLINE( 115)		this->btnVolver =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 120),10,HX_W(u"\u2190 Editar",7c8f,fb9b), ::Dynamic(new _hx_Closure_5(_gthis)));
HXLINE( 122)		this->btnVolver->set_visible(false);
HXLINE( 123)		this->add(this->btnVolver);
HXLINE( 125)		 ::flixel::ui::FlxButton btnGuardar =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 240),10,HX_W(u"\U0001f4be Guardar",e731,8347),this->guardarMenu_dyn());
HXLINE( 126)		this->add(btnGuardar);
HXLINE( 128)		 ::flixel::ui::FlxButton btnEstablecer =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 360),10,HX_W(u"\u2699\ufe0f Establecer como",2043,f39f),this->mostrarOpcionesEstablecer_dyn());
HXLINE( 129)		this->add(btnEstablecer);
            	}


void MenuEditorState_obj::mostrarFuentes(){
            	HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_132_mostrarFuentes)
HXDLIN( 132)		 ::states::debug::MenuEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 133)		::String carpeta = HX_("assets/fonts/",37,ff,a5,9c);
HXLINE( 134)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 134)		{
HXLINE( 134)			int _g1 = 0;
HXDLIN( 134)			::Array< ::String > _g2 = ::sys::FileSystem_obj::readDirectory(carpeta);
HXDLIN( 134)			while((_g1 < _g2->length)){
HXLINE( 134)				::String v = _g2->__get(_g1);
HXDLIN( 134)				_g1 = (_g1 + 1);
HXDLIN( 134)				if (::StringTools_obj::endsWith(v.toLowerCase(),HX_(".ttf",78,3b,c0,1e))) {
HXLINE( 134)					_g->push(v);
            				}
            			}
            		}
HXDLIN( 134)		::Array< ::String > fuentes = _g;
HXLINE( 138)		int x = 10;
HXLINE( 139)		int y = (::flixel::FlxG_obj::height - 40);
HXLINE( 142)		::Array< ::Dynamic> fontButtonsToRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 143)		{
HXLINE( 143)			int _g3 = 0;
HXDLIN( 143)			::Array< ::Dynamic> _g4 = this->members;
HXDLIN( 143)			while((_g3 < _g4->length)){
HXLINE( 143)				 ::flixel::FlxBasic member = _g4->__get(_g3).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 143)				_g3 = (_g3 + 1);
HXLINE( 144)				bool _hx_tmp;
HXDLIN( 144)				if (::hx::IsNotNull( member )) {
HXLINE( 144)					_hx_tmp = ::Std_obj::isOfType(member,::hx::ClassOf< ::flixel::ui::FlxButton >());
            				}
            				else {
HXLINE( 144)					_hx_tmp = false;
            				}
HXDLIN( 144)				if (_hx_tmp) {
HXLINE( 145)					 ::flixel::ui::FlxButton button = ::hx::TCast<  ::flixel::ui::FlxButton >::cast(member);
HXLINE( 146)					if ((button->y == y)) {
HXLINE( 147)						fontButtonsToRemove->push(button);
            					}
            				}
            			}
            		}
HXLINE( 152)		{
HXLINE( 152)			int _g5 = 0;
HXDLIN( 152)			while((_g5 < fontButtonsToRemove->length)){
HXLINE( 152)				 ::flixel::ui::FlxButton btn = fontButtonsToRemove->__get(_g5).StaticCast<  ::flixel::ui::FlxButton >();
HXDLIN( 152)				_g5 = (_g5 + 1);
HXLINE( 153)				this->remove(btn,null());
            			}
            		}
HXLINE( 157)		{
HXLINE( 157)			int _g6 = 0;
HXDLIN( 157)			while((_g6 < fuentes->length)){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::debug::MenuEditorState,_gthis,::String,nombre) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_158_mostrarFuentes)
HXLINE( 159)					_gthis->fuenteActiva = (HX_("assets/fonts/",37,ff,a5,9c) + nombre);
HXLINE( 160)					_gthis->info->set_text((HX_W(u"\u270f\ufe0f Fuente seleccionada: ",dc0f,546b) + nombre));
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 157)				::String nombre = fuentes->__get(_g6);
HXDLIN( 157)				_g6 = (_g6 + 1);
HXLINE( 158)				 ::flixel::ui::FlxButton btn1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,x,y,nombre, ::Dynamic(new _hx_Closure_0(_gthis,nombre)));
HXLINE( 162)				btn1->setGraphicSize(140,20);
HXLINE( 163)				btn1->label->setFormat(null(),8,-16777216,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 164)				this->add(btn1);
HXLINE( 165)				x = (x + 150);
            			}
            		}
HXLINE( 168)		if ((fuentes->length == 0)) {
HXLINE( 169)			this->info->set_text((HX_W(u"\u274c No hay fuentes .ttf en ",20d5,f8fa) + carpeta));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuEditorState_obj,mostrarFuentes,(void))

void MenuEditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_173_update)
HXLINE( 174)		this->super::update(elapsed);
HXLINE( 176)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 176)		if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE( 177)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 177)			if (_this1->keyManager->checkStatusUnsafe(80,_this1->status)) {
HXLINE( 178)				this->modoActual = ::states::debug::EditorMode_obj::PROGRAMAR_dyn();
HXLINE( 179)				this->info->set_text(HX_W(u"\U0001f4dc Modo: PROGRAMAR",f27a,714c));
HXLINE( 180)				{
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            					 ::states::debug::CodeEditorMenu _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_180_update)
HXLINE( 180)						return  ::states::debug::CodeEditorMenu_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_180_update)
HXLINE( 180)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 180)							::flixel::FlxG_obj::game->_nextState = nextState;
            						}
            						else {
HXLINE( 180)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 180)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 180)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 180)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            				}
            			}
HXLINE( 182)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 182)			if (_this2->keyManager->checkStatusUnsafe(87,_this2->status)) {
HXLINE( 183)				this->modoActual = ::states::debug::EditorMode_obj::MENU_dyn();
HXLINE( 184)				this->info->set_text(HX_W(u"\U0001f441\ufe0f Modo: PREVIEW",5d9c,252e));
HXLINE( 185)				::states::debug::MenuEditorState_obj::elementosCompartidos = this->elementos->copy();
HXLINE( 187)				{
HXLINE( 187)					int _g = 0;
HXDLIN( 187)					::Array< ::Dynamic> _g1 = this->botonesUI;
HXDLIN( 187)					while((_g < _g1->length)){
HXLINE( 187)						 ::flixel::ui::FlxButton btn = _g1->__get(_g).StaticCast<  ::flixel::ui::FlxButton >();
HXDLIN( 187)						_g = (_g + 1);
HXDLIN( 187)						btn->set_visible(false);
            					}
            				}
HXLINE( 188)				this->info->set_visible(false);
HXLINE( 189)				this->seleccionRect->set_visible(false);
HXLINE( 190)				this->btnVolver->set_visible(true);
            			}
HXLINE( 192)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 192)			if (_this3->keyManager->checkStatusUnsafe(69,_this3->status)) {
HXLINE( 193)				this->modoActual = ::states::debug::EditorMode_obj::EDITAR_dyn();
HXLINE( 194)				this->info->set_text(HX_W(u"\U0001f5b1\ufe0f Modo: EDICI\u00d3N",64c5,43a7));
HXLINE( 196)				{
HXLINE( 196)					int _g2 = 0;
HXDLIN( 196)					::Array< ::Dynamic> _g3 = this->botonesUI;
HXDLIN( 196)					while((_g2 < _g3->length)){
HXLINE( 196)						 ::flixel::ui::FlxButton btn1 = _g3->__get(_g2).StaticCast<  ::flixel::ui::FlxButton >();
HXDLIN( 196)						_g2 = (_g2 + 1);
HXDLIN( 196)						btn1->set_visible(true);
            					}
            				}
HXLINE( 197)				this->info->set_visible(true);
HXLINE( 198)				this->btnVolver->set_visible(false);
            			}
            		}
HXLINE( 202)		bool _hx_tmp;
HXDLIN( 202)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 202)		if (_this4->keyManager->checkStatusUnsafe(17,_this4->status)) {
HXLINE( 202)			 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 202)			_hx_tmp = _this5->keyManager->checkStatusUnsafe(83,_this5->status);
            		}
            		else {
HXLINE( 202)			_hx_tmp = false;
            		}
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 203)			this->exportarEscena(HX_("MiMenuGenerado",aa,63,12,84));
            		}
HXLINE( 206)		bool _hx_tmp1;
HXDLIN( 206)		if (::hx::IsPointerEq( this->modoActual,::states::debug::EditorMode_obj::EDITAR_dyn() )) {
HXLINE( 206)			_hx_tmp1 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE( 206)			_hx_tmp1 = false;
            		}
HXDLIN( 206)		if (_hx_tmp1) {
HXLINE( 207)			::Array< ::Dynamic> candidatos = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 210)			{
HXLINE( 210)				int _g4 = 0;
HXDLIN( 210)				::cpp::VirtualArray _g5 = this->elementos;
HXDLIN( 210)				while((_g4 < _g5->get_length())){
HXLINE( 210)					 ::Dynamic e = _g5->__get(_g4);
HXDLIN( 210)					_g4 = (_g4 + 1);
HXLINE( 211)					if (::Std_obj::isOfType(e,::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE( 212)						 ::flixel::FlxSprite sprite = ( ( ::flixel::FlxSprite)(e) );
HXLINE( 213)						if (sprite->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 214)							candidatos->push(sprite);
            						}
            					}
            				}
            			}
HXLINE( 220)			if ((candidatos->length > 0)) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            				int _hx_run( ::flixel::FlxSprite a, ::flixel::FlxSprite b){
            					HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_221_update)
HXLINE( 222)					Float areaA = a->get_width();
HXDLIN( 222)					Float areaA1 = (areaA * a->get_height());
HXLINE( 223)					Float areaB = b->get_width();
HXDLIN( 223)					Float areaB1 = (areaB * b->get_height());
HXLINE( 224)					return ::Std_obj::_hx_int((areaA1 - areaB1));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE( 221)				candidatos->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE( 227)				this->seleccionado = candidatos->__get(0).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 228)				this->seleccionRect->setPosition((this->seleccionado->x - ( (Float)(2) )),(this->seleccionado->y - ( (Float)(2) )));
HXLINE( 229)				 ::flixel::FlxSprite _hx_tmp2 = this->seleccionRect;
HXDLIN( 229)				int _hx_tmp3 = ::Std_obj::_hx_int((this->seleccionado->get_width() + 4));
HXDLIN( 229)				_hx_tmp2->makeGraphic(_hx_tmp3,::Std_obj::_hx_int((this->seleccionado->get_height() + 4)),(int)-1996488705,null(),null());
HXLINE( 230)				this->seleccionRect->set_visible(true);
            			}
            			else {
HXLINE( 233)				this->seleccionado = null();
HXLINE( 234)				this->seleccionRect->set_visible(false);
HXLINE( 235)				this->info->set_text(HX_W(u"\U0001f5b1\ufe0f Modo: EDICI\u00d3N",64c5,43a7));
            			}
            		}
HXLINE( 239)		bool _hx_tmp4;
HXDLIN( 239)		bool _hx_tmp5;
HXDLIN( 239)		if (::hx::IsPointerEq( this->modoActual,::states::debug::EditorMode_obj::EDITAR_dyn() )) {
HXLINE( 239)			_hx_tmp5 = ::hx::IsNotNull( this->seleccionado );
            		}
            		else {
HXLINE( 239)			_hx_tmp5 = false;
            		}
HXDLIN( 239)		if (_hx_tmp5) {
HXLINE( 239)			_hx_tmp4 = !(this->editandoTexto);
            		}
            		else {
HXLINE( 239)			_hx_tmp4 = false;
            		}
HXDLIN( 239)		if (_hx_tmp4) {
HXLINE( 241)			 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 241)			if (_this6->keyManager->checkStatusUnsafe(37,_this6->status)) {
HXLINE( 241)				 ::flixel::FlxSprite fh = this->seleccionado;
HXDLIN( 241)				fh->set_x((fh->x - ( (Float)(this->velocidad) )));
            			}
HXLINE( 242)			 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 242)			if (_this7->keyManager->checkStatusUnsafe(39,_this7->status)) {
HXLINE( 242)				 ::flixel::FlxSprite fh1 = this->seleccionado;
HXDLIN( 242)				fh1->set_x((fh1->x + this->velocidad));
            			}
HXLINE( 243)			 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 243)			if (_this8->keyManager->checkStatusUnsafe(38,_this8->status)) {
HXLINE( 243)				 ::flixel::FlxSprite fh2 = this->seleccionado;
HXDLIN( 243)				fh2->set_y((fh2->y - ( (Float)(this->velocidad) )));
            			}
HXLINE( 244)			 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 244)			if (_this9->keyManager->checkStatusUnsafe(40,_this9->status)) {
HXLINE( 244)				 ::flixel::FlxSprite fh3 = this->seleccionado;
HXDLIN( 244)				fh3->set_y((fh3->y + this->velocidad));
            			}
HXLINE( 246)			bool actualizarRect = false;
HXLINE( 249)			 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 249)			if (_this10->keyManager->checkStatusUnsafe(90,_this10->status)) {
HXLINE( 250)				 ::flixel::FlxSprite fh4 = this->seleccionado;
HXDLIN( 250)				fh4->scale->set_x((fh4->scale->x * ((Float)1.1)));
HXLINE( 251)				 ::flixel::FlxSprite fh5 = this->seleccionado;
HXDLIN( 251)				fh5->scale->set_y((fh5->scale->y * ((Float)1.1)));
HXLINE( 252)				this->info->set_text(HX_W(u"\U0001f50d Elemento agrandado",bdac,e551));
HXLINE( 253)				actualizarRect = true;
            			}
HXLINE( 255)			 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 255)			if (_this11->keyManager->checkStatusUnsafe(67,_this11->status)) {
HXLINE( 256)				 ::flixel::FlxSprite fh6 = this->seleccionado;
HXDLIN( 256)				fh6->scale->set_x((fh6->scale->x * ((Float)0.9)));
HXLINE( 257)				 ::flixel::FlxSprite fh7 = this->seleccionado;
HXDLIN( 257)				fh7->scale->set_y((fh7->scale->y * ((Float)0.9)));
HXLINE( 258)				this->info->set_text(HX_W(u"\U0001f50d Elemento achicado",09c1,1e1e));
HXLINE( 259)				actualizarRect = true;
            			}
HXLINE( 263)			bool _hx_tmp6;
HXDLIN( 263)			 ::flixel::input::keyboard::FlxKeyList _this12 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 263)			if (_this12->keyManager->checkStatusUnsafe(73,_this12->status)) {
HXLINE( 263)				 ::flixel::input::keyboard::FlxKeyList _this13 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 263)				_hx_tmp6 = !(_this13->keyManager->checkStatusUnsafe(16,_this13->status));
            			}
            			else {
HXLINE( 263)				_hx_tmp6 = false;
            			}
HXDLIN( 263)			if (_hx_tmp6) {
HXLINE( 264)				 ::flixel::FlxSprite fh8 = this->seleccionado;
HXDLIN( 264)				fh8->scale->set_x((fh8->scale->x * ((Float)1.1)));
HXLINE( 265)				this->info->set_text(HX_W(u"\u2194\ufe0f Estirado horizontalmente",320a,3fc3));
HXLINE( 266)				actualizarRect = true;
            			}
HXLINE( 268)			bool _hx_tmp7;
HXDLIN( 268)			 ::flixel::input::keyboard::FlxKeyList _this14 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 268)			if (_this14->keyManager->checkStatusUnsafe(79,_this14->status)) {
HXLINE( 268)				 ::flixel::input::keyboard::FlxKeyList _this15 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 268)				_hx_tmp7 = !(_this15->keyManager->checkStatusUnsafe(16,_this15->status));
            			}
            			else {
HXLINE( 268)				_hx_tmp7 = false;
            			}
HXDLIN( 268)			if (_hx_tmp7) {
HXLINE( 269)				 ::flixel::FlxSprite fh9 = this->seleccionado;
HXDLIN( 269)				fh9->scale->set_x((fh9->scale->x * ((Float)0.9)));
HXLINE( 270)				this->info->set_text(HX_W(u"\u2194\ufe0f Comprimido horizontalmente",281a,1c2d));
HXLINE( 271)				actualizarRect = true;
            			}
HXLINE( 275)			bool _hx_tmp8;
HXDLIN( 275)			 ::flixel::input::keyboard::FlxKeyList _this16 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 275)			if (_this16->keyManager->checkStatusUnsafe(73,_this16->status)) {
HXLINE( 275)				 ::flixel::input::keyboard::FlxKeyList _this17 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 275)				_hx_tmp8 = _this17->keyManager->checkStatusUnsafe(16,_this17->status);
            			}
            			else {
HXLINE( 275)				_hx_tmp8 = false;
            			}
HXDLIN( 275)			if (_hx_tmp8) {
HXLINE( 276)				 ::flixel::FlxSprite fh10 = this->seleccionado;
HXDLIN( 276)				fh10->scale->set_y((fh10->scale->y * ((Float)1.1)));
HXLINE( 277)				this->info->set_text(HX_W(u"\u2195\ufe0f Estirado verticalmente",c6b9,528a));
HXLINE( 278)				actualizarRect = true;
            			}
HXLINE( 280)			bool _hx_tmp9;
HXDLIN( 280)			 ::flixel::input::keyboard::FlxKeyList _this18 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 280)			if (_this18->keyManager->checkStatusUnsafe(79,_this18->status)) {
HXLINE( 280)				 ::flixel::input::keyboard::FlxKeyList _this19 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 280)				_hx_tmp9 = _this19->keyManager->checkStatusUnsafe(16,_this19->status);
            			}
            			else {
HXLINE( 280)				_hx_tmp9 = false;
            			}
HXDLIN( 280)			if (_hx_tmp9) {
HXLINE( 281)				 ::flixel::FlxSprite fh11 = this->seleccionado;
HXDLIN( 281)				fh11->scale->set_y((fh11->scale->y * ((Float)0.9)));
HXLINE( 282)				this->info->set_text(HX_W(u"\u2195\ufe0f Comprimido verticalmente",ab09,b80a));
HXLINE( 283)				actualizarRect = true;
            			}
HXLINE( 287)			 ::flixel::input::keyboard::FlxKeyList _this20 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 287)			if (_this20->keyManager->checkStatusUnsafe(32,_this20->status)) {
HXLINE( 288)				 ::flixel::FlxSprite _hx_tmp10 = this->seleccionado;
HXDLIN( 288)				int _hx_tmp11 = ::flixel::FlxG_obj::width;
HXDLIN( 288)				Float _hx_tmp12 = this->seleccionado->get_width();
HXDLIN( 288)				_hx_tmp10->set_x(((( (Float)(_hx_tmp11) ) - (_hx_tmp12 * this->seleccionado->scale->x)) / ( (Float)(2) )));
HXLINE( 289)				 ::flixel::FlxSprite _hx_tmp13 = this->seleccionado;
HXDLIN( 289)				int _hx_tmp14 = ::flixel::FlxG_obj::height;
HXDLIN( 289)				Float _hx_tmp15 = this->seleccionado->get_height();
HXDLIN( 289)				_hx_tmp13->set_y(((( (Float)(_hx_tmp14) ) - (_hx_tmp15 * this->seleccionado->scale->y)) / ( (Float)(2) )));
HXLINE( 290)				this->info->set_text(HX_W(u"\u2694\ufe0f Elemento centrado",d719,3f1d));
HXLINE( 291)				actualizarRect = true;
            			}
HXLINE( 295)			 ::flixel::input::keyboard::FlxKeyList _this21 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 295)			if (_this21->keyManager->checkStatusUnsafe(84,_this21->status)) {
HXLINE( 296)				bool _hx_tmp16;
HXDLIN( 296)				if (!(::Std_obj::isOfType(this->seleccionado,::hx::ClassOf< ::flixel::text::FlxText >()))) {
HXLINE( 296)					_hx_tmp16 = ::Std_obj::isOfType(this->seleccionado,::hx::ClassOf< ::flixel::ui::FlxButton >());
            				}
            				else {
HXLINE( 296)					_hx_tmp16 = true;
            				}
HXDLIN( 296)				if (_hx_tmp16) {
HXLINE( 297)					this->editandoTexto = true;
HXLINE( 298)					this->textoTemporal = HX_("",00,00,00,00);
HXLINE( 299)					this->info->set_text(HX_W(u"\u270f\ufe0f Escribiendo... (ENTER para confirmar, ESC para cancelar)",64d4,ea5c));
            				}
            			}
HXLINE( 304)			bool _hx_tmp17;
HXDLIN( 304)			 ::flixel::input::keyboard::FlxKeyList _this22 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 304)			if (_this22->keyManager->checkStatusUnsafe(82,_this22->status)) {
HXLINE( 304)				_hx_tmp17 = ::hx::IsNotNull( this->fuenteActiva );
            			}
            			else {
HXLINE( 304)				_hx_tmp17 = false;
            			}
HXDLIN( 304)			if (_hx_tmp17) {
HXLINE( 305)				if (::Std_obj::isOfType(this->seleccionado,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE( 306)					 ::flixel::text::FlxText txt = ( ( ::flixel::text::FlxText)(this->seleccionado) );
HXLINE( 307)					::String _hx_tmp18 = this->fuenteActiva;
HXDLIN( 307)					int _hx_tmp19 = ::Std_obj::_hx_int(( (Float)(txt->_defaultFormat->size) ));
HXDLIN( 307)					txt->setFormat(_hx_tmp18,_hx_tmp19,txt->color,null(),null(),null(),null());
HXLINE( 308)					this->info->set_text(HX_W(u"\U0001f170\ufe0f Fuente aplicada",706a,a922));
            				}
            				else {
HXLINE( 309)					if (::Std_obj::isOfType(this->seleccionado,::hx::ClassOf< ::flixel::ui::FlxButton >())) {
HXLINE( 310)						 ::flixel::ui::FlxButton btn2 = ( ( ::flixel::ui::FlxButton)(this->seleccionado) );
HXLINE( 311)						 ::flixel::text::FlxText btn3 = btn2->label;
HXDLIN( 311)						::String _hx_tmp20 = this->fuenteActiva;
HXDLIN( 311)						int _hx_tmp21 = ::Std_obj::_hx_int(( (Float)(btn2->label->_defaultFormat->size) ));
HXDLIN( 311)						btn3->setFormat(_hx_tmp20,_hx_tmp21,btn2->label->color,null(),null(),null(),null());
HXLINE( 312)						this->info->set_text(HX_W(u"\U0001f170\ufe0f Fuente aplicada al bot\u00f3n",af96,831a));
            					}
            				}
            			}
HXLINE( 317)			bool _hx_tmp22;
HXDLIN( 317)			if (!(::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_378b855e_23,4),1))) {
HXLINE( 317)				_hx_tmp22 = actualizarRect;
            			}
            			else {
HXLINE( 317)				_hx_tmp22 = true;
            			}
HXDLIN( 317)			if (_hx_tmp22) {
HXLINE( 318)				Float anchoReal = this->seleccionado->get_width();
HXDLIN( 318)				Float anchoReal1 = (anchoReal * this->seleccionado->scale->x);
HXLINE( 319)				Float altoReal = this->seleccionado->get_height();
HXDLIN( 319)				Float altoReal1 = (altoReal * this->seleccionado->scale->y);
HXLINE( 320)				this->seleccionRect->setPosition((this->seleccionado->x - ( (Float)(2) )),(this->seleccionado->y - ( (Float)(2) )));
HXLINE( 321)				 ::flixel::FlxSprite _hx_tmp23 = this->seleccionRect;
HXDLIN( 321)				int _hx_tmp24 = ::Std_obj::_hx_int((anchoReal1 + 4));
HXDLIN( 321)				_hx_tmp23->makeGraphic(_hx_tmp24,::Std_obj::_hx_int((altoReal1 + 4)),(int)-1996488705,null(),null());
            			}
            		}
HXLINE( 326)		if (this->editandoTexto) {
HXLINE( 328)			 ::flixel::input::keyboard::FlxKeyList _this23 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 328)			if (_this23->keyManager->checkStatusUnsafe(13,_this23->status)) {
HXLINE( 329)				if ((this->textoTemporal.length > 0)) {
HXLINE( 330)					if (::Std_obj::isOfType(this->seleccionado,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE( 331)						 ::flixel::text::FlxText txt1 = ( ( ::flixel::text::FlxText)(this->seleccionado) );
HXLINE( 332)						txt1->set_text(this->textoTemporal);
            					}
            					else {
HXLINE( 333)						if (::Std_obj::isOfType(this->seleccionado,::hx::ClassOf< ::flixel::ui::FlxButton >())) {
HXLINE( 334)							 ::flixel::ui::FlxButton btn4 = ( ( ::flixel::ui::FlxButton)(this->seleccionado) );
HXLINE( 335)							{
HXLINE( 335)								::String Text = this->textoTemporal;
HXDLIN( 335)								if (::hx::IsNull( btn4->label )) {
HXLINE( 335)									if (::hx::IsNotNull( Text )) {
HXLINE( 335)										Float btn5 = btn4->x;
HXDLIN( 335)										Float _hx_tmp25 = (btn5 + btn4->labelOffsets->__get(::flixel::ui::_FlxButton::FlxButtonState_Impl__obj::toInt(0)).StaticCast<  ::flixel::math::FlxBasePoint >()->x);
HXDLIN( 335)										Float btn6 = btn4->y;
HXDLIN( 335)										btn4->set_label( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp25,(btn6 + btn4->labelOffsets->__get(::flixel::ui::_FlxButton::FlxButtonState_Impl__obj::toInt(0)).StaticCast<  ::flixel::math::FlxBasePoint >()->y),80,Text,null(),null()));
HXDLIN( 335)										btn4->label->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXDLIN( 335)										 ::flixel::text::FlxText btn7 = btn4->label;
HXDLIN( 335)										btn7->set_alpha(btn4->labelAlphas->__get(::flixel::ui::_FlxButton::FlxButtonState_Impl__obj::toInt(btn4->status)));
HXDLIN( 335)										btn4->label->drawFrame(true);
            									}
            								}
            								else {
HXLINE( 335)									btn4->label->set_text(Text);
            								}
            							}
            						}
            					}
HXLINE( 337)					::states::debug::MenuEditorState_obj::elementosCompartidos = this->elementos->copy();
            				}
HXLINE( 339)				this->editandoTexto = false;
HXLINE( 340)				this->info->set_text(HX_W(u"\u2713 Texto actualizado",cb68,2339));
            			}
            			else {
HXLINE( 343)				 ::flixel::input::keyboard::FlxKeyList _this24 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 343)				if (_this24->keyManager->checkStatusUnsafe(27,_this24->status)) {
HXLINE( 344)					this->editandoTexto = false;
HXLINE( 345)					this->info->set_text(HX_W(u"\u274c Edici\u00f3n cancelada",d401,4ec2));
            				}
            				else {
HXLINE( 348)					bool _hx_tmp26;
HXDLIN( 348)					 ::flixel::input::keyboard::FlxKeyList _this25 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 348)					if (_this25->keyManager->checkStatusUnsafe(8,_this25->status)) {
HXLINE( 348)						_hx_tmp26 = (this->textoTemporal.length > 0);
            					}
            					else {
HXLINE( 348)						_hx_tmp26 = false;
            					}
HXDLIN( 348)					if (_hx_tmp26) {
HXLINE( 349)						this->textoTemporal = this->textoTemporal.substr(0,(this->textoTemporal.length - 1));
HXLINE( 350)						this->info->set_text(((HX_W(u"\u270f\ufe0f Escribiendo: ",c85e,f956) + this->textoTemporal) + HX_("_",5f,00,00,00)));
            					}
            					else {
HXLINE( 354)						 ::flixel::input::keyboard::FlxKeyList _this26 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 354)						if (_this26->keyManager->checkStatusUnsafe(65,_this26->status)) {
HXLINE( 354)							 ::states::debug::MenuEditorState _hx_tmp27 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 354)							::String _hx_tmp28 = _hx_tmp27->textoTemporal;
HXDLIN( 354)							::String _hx_tmp29;
HXDLIN( 354)							 ::flixel::input::keyboard::FlxKeyList _this27 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 354)							if (_this27->keyManager->checkStatusUnsafe(16,_this27->status)) {
HXLINE( 354)								_hx_tmp29 = HX_("A",41,00,00,00);
            							}
            							else {
HXLINE( 354)								_hx_tmp29 = HX_("a",61,00,00,00);
            							}
HXDLIN( 354)							_hx_tmp27->textoTemporal = (_hx_tmp28 + _hx_tmp29);
            						}
            						else {
HXLINE( 355)							 ::flixel::input::keyboard::FlxKeyList _this28 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 355)							if (_this28->keyManager->checkStatusUnsafe(66,_this28->status)) {
HXLINE( 355)								 ::states::debug::MenuEditorState _hx_tmp30 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 355)								::String _hx_tmp31 = _hx_tmp30->textoTemporal;
HXDLIN( 355)								::String _hx_tmp32;
HXDLIN( 355)								 ::flixel::input::keyboard::FlxKeyList _this29 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 355)								if (_this29->keyManager->checkStatusUnsafe(16,_this29->status)) {
HXLINE( 355)									_hx_tmp32 = HX_("B",42,00,00,00);
            								}
            								else {
HXLINE( 355)									_hx_tmp32 = HX_("b",62,00,00,00);
            								}
HXDLIN( 355)								_hx_tmp30->textoTemporal = (_hx_tmp31 + _hx_tmp32);
            							}
            							else {
HXLINE( 356)								 ::flixel::input::keyboard::FlxKeyList _this30 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 356)								if (_this30->keyManager->checkStatusUnsafe(67,_this30->status)) {
HXLINE( 356)									 ::states::debug::MenuEditorState _hx_tmp33 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 356)									::String _hx_tmp34 = _hx_tmp33->textoTemporal;
HXDLIN( 356)									::String _hx_tmp35;
HXDLIN( 356)									 ::flixel::input::keyboard::FlxKeyList _this31 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 356)									if (_this31->keyManager->checkStatusUnsafe(16,_this31->status)) {
HXLINE( 356)										_hx_tmp35 = HX_("C",43,00,00,00);
            									}
            									else {
HXLINE( 356)										_hx_tmp35 = HX_("c",63,00,00,00);
            									}
HXDLIN( 356)									_hx_tmp33->textoTemporal = (_hx_tmp34 + _hx_tmp35);
            								}
            								else {
HXLINE( 357)									 ::flixel::input::keyboard::FlxKeyList _this32 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 357)									if (_this32->keyManager->checkStatusUnsafe(68,_this32->status)) {
HXLINE( 357)										 ::states::debug::MenuEditorState _hx_tmp36 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 357)										::String _hx_tmp37 = _hx_tmp36->textoTemporal;
HXDLIN( 357)										::String _hx_tmp38;
HXDLIN( 357)										 ::flixel::input::keyboard::FlxKeyList _this33 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 357)										if (_this33->keyManager->checkStatusUnsafe(16,_this33->status)) {
HXLINE( 357)											_hx_tmp38 = HX_("D",44,00,00,00);
            										}
            										else {
HXLINE( 357)											_hx_tmp38 = HX_("d",64,00,00,00);
            										}
HXDLIN( 357)										_hx_tmp36->textoTemporal = (_hx_tmp37 + _hx_tmp38);
            									}
            									else {
HXLINE( 358)										 ::flixel::input::keyboard::FlxKeyList _this34 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 358)										if (_this34->keyManager->checkStatusUnsafe(69,_this34->status)) {
HXLINE( 358)											 ::states::debug::MenuEditorState _hx_tmp39 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 358)											::String _hx_tmp40 = _hx_tmp39->textoTemporal;
HXDLIN( 358)											::String _hx_tmp41;
HXDLIN( 358)											 ::flixel::input::keyboard::FlxKeyList _this35 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 358)											if (_this35->keyManager->checkStatusUnsafe(16,_this35->status)) {
HXLINE( 358)												_hx_tmp41 = HX_("E",45,00,00,00);
            											}
            											else {
HXLINE( 358)												_hx_tmp41 = HX_("e",65,00,00,00);
            											}
HXDLIN( 358)											_hx_tmp39->textoTemporal = (_hx_tmp40 + _hx_tmp41);
            										}
            										else {
HXLINE( 359)											 ::flixel::input::keyboard::FlxKeyList _this36 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 359)											if (_this36->keyManager->checkStatusUnsafe(70,_this36->status)) {
HXLINE( 359)												 ::states::debug::MenuEditorState _hx_tmp42 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 359)												::String _hx_tmp43 = _hx_tmp42->textoTemporal;
HXDLIN( 359)												::String _hx_tmp44;
HXDLIN( 359)												 ::flixel::input::keyboard::FlxKeyList _this37 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 359)												if (_this37->keyManager->checkStatusUnsafe(16,_this37->status)) {
HXLINE( 359)													_hx_tmp44 = HX_("F",46,00,00,00);
            												}
            												else {
HXLINE( 359)													_hx_tmp44 = HX_("f",66,00,00,00);
            												}
HXDLIN( 359)												_hx_tmp42->textoTemporal = (_hx_tmp43 + _hx_tmp44);
            											}
            											else {
HXLINE( 360)												 ::flixel::input::keyboard::FlxKeyList _this38 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 360)												if (_this38->keyManager->checkStatusUnsafe(71,_this38->status)) {
HXLINE( 360)													 ::states::debug::MenuEditorState _hx_tmp45 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 360)													::String _hx_tmp46 = _hx_tmp45->textoTemporal;
HXDLIN( 360)													::String _hx_tmp47;
HXDLIN( 360)													 ::flixel::input::keyboard::FlxKeyList _this39 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 360)													if (_this39->keyManager->checkStatusUnsafe(16,_this39->status)) {
HXLINE( 360)														_hx_tmp47 = HX_("G",47,00,00,00);
            													}
            													else {
HXLINE( 360)														_hx_tmp47 = HX_("g",67,00,00,00);
            													}
HXDLIN( 360)													_hx_tmp45->textoTemporal = (_hx_tmp46 + _hx_tmp47);
            												}
            												else {
HXLINE( 361)													 ::flixel::input::keyboard::FlxKeyList _this40 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 361)													if (_this40->keyManager->checkStatusUnsafe(72,_this40->status)) {
HXLINE( 361)														 ::states::debug::MenuEditorState _hx_tmp48 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 361)														::String _hx_tmp49 = _hx_tmp48->textoTemporal;
HXDLIN( 361)														::String _hx_tmp50;
HXDLIN( 361)														 ::flixel::input::keyboard::FlxKeyList _this41 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 361)														if (_this41->keyManager->checkStatusUnsafe(16,_this41->status)) {
HXLINE( 361)															_hx_tmp50 = HX_("H",48,00,00,00);
            														}
            														else {
HXLINE( 361)															_hx_tmp50 = HX_("h",68,00,00,00);
            														}
HXDLIN( 361)														_hx_tmp48->textoTemporal = (_hx_tmp49 + _hx_tmp50);
            													}
            													else {
HXLINE( 362)														 ::flixel::input::keyboard::FlxKeyList _this42 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 362)														if (_this42->keyManager->checkStatusUnsafe(73,_this42->status)) {
HXLINE( 362)															 ::states::debug::MenuEditorState _hx_tmp51 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 362)															::String _hx_tmp52 = _hx_tmp51->textoTemporal;
HXDLIN( 362)															::String _hx_tmp53;
HXDLIN( 362)															 ::flixel::input::keyboard::FlxKeyList _this43 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 362)															if (_this43->keyManager->checkStatusUnsafe(16,_this43->status)) {
HXLINE( 362)																_hx_tmp53 = HX_("I",49,00,00,00);
            															}
            															else {
HXLINE( 362)																_hx_tmp53 = HX_("i",69,00,00,00);
            															}
HXDLIN( 362)															_hx_tmp51->textoTemporal = (_hx_tmp52 + _hx_tmp53);
            														}
            														else {
HXLINE( 363)															 ::flixel::input::keyboard::FlxKeyList _this44 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 363)															if (_this44->keyManager->checkStatusUnsafe(74,_this44->status)) {
HXLINE( 363)																 ::states::debug::MenuEditorState _hx_tmp54 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 363)																::String _hx_tmp55 = _hx_tmp54->textoTemporal;
HXDLIN( 363)																::String _hx_tmp56;
HXDLIN( 363)																 ::flixel::input::keyboard::FlxKeyList _this45 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 363)																if (_this45->keyManager->checkStatusUnsafe(16,_this45->status)) {
HXLINE( 363)																	_hx_tmp56 = HX_("J",4a,00,00,00);
            																}
            																else {
HXLINE( 363)																	_hx_tmp56 = HX_("j",6a,00,00,00);
            																}
HXDLIN( 363)																_hx_tmp54->textoTemporal = (_hx_tmp55 + _hx_tmp56);
            															}
            															else {
HXLINE( 364)																 ::flixel::input::keyboard::FlxKeyList _this46 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 364)																if (_this46->keyManager->checkStatusUnsafe(75,_this46->status)) {
HXLINE( 364)																	 ::states::debug::MenuEditorState _hx_tmp57 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 364)																	::String _hx_tmp58 = _hx_tmp57->textoTemporal;
HXDLIN( 364)																	::String _hx_tmp59;
HXDLIN( 364)																	 ::flixel::input::keyboard::FlxKeyList _this47 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 364)																	if (_this47->keyManager->checkStatusUnsafe(16,_this47->status)) {
HXLINE( 364)																		_hx_tmp59 = HX_("K",4b,00,00,00);
            																	}
            																	else {
HXLINE( 364)																		_hx_tmp59 = HX_("k",6b,00,00,00);
            																	}
HXDLIN( 364)																	_hx_tmp57->textoTemporal = (_hx_tmp58 + _hx_tmp59);
            																}
            																else {
HXLINE( 365)																	 ::flixel::input::keyboard::FlxKeyList _this48 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 365)																	if (_this48->keyManager->checkStatusUnsafe(76,_this48->status)) {
HXLINE( 365)																		 ::states::debug::MenuEditorState _hx_tmp60 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 365)																		::String _hx_tmp61 = _hx_tmp60->textoTemporal;
HXDLIN( 365)																		::String _hx_tmp62;
HXDLIN( 365)																		 ::flixel::input::keyboard::FlxKeyList _this49 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 365)																		if (_this49->keyManager->checkStatusUnsafe(16,_this49->status)) {
HXLINE( 365)																			_hx_tmp62 = HX_("L",4c,00,00,00);
            																		}
            																		else {
HXLINE( 365)																			_hx_tmp62 = HX_("l",6c,00,00,00);
            																		}
HXDLIN( 365)																		_hx_tmp60->textoTemporal = (_hx_tmp61 + _hx_tmp62);
            																	}
            																	else {
HXLINE( 366)																		 ::flixel::input::keyboard::FlxKeyList _this50 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 366)																		if (_this50->keyManager->checkStatusUnsafe(77,_this50->status)) {
HXLINE( 366)																			 ::states::debug::MenuEditorState _hx_tmp63 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 366)																			::String _hx_tmp64 = _hx_tmp63->textoTemporal;
HXDLIN( 366)																			::String _hx_tmp65;
HXDLIN( 366)																			 ::flixel::input::keyboard::FlxKeyList _this51 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 366)																			if (_this51->keyManager->checkStatusUnsafe(16,_this51->status)) {
HXLINE( 366)																				_hx_tmp65 = HX_("M",4d,00,00,00);
            																			}
            																			else {
HXLINE( 366)																				_hx_tmp65 = HX_("m",6d,00,00,00);
            																			}
HXDLIN( 366)																			_hx_tmp63->textoTemporal = (_hx_tmp64 + _hx_tmp65);
            																		}
            																		else {
HXLINE( 367)																			 ::flixel::input::keyboard::FlxKeyList _this52 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 367)																			if (_this52->keyManager->checkStatusUnsafe(78,_this52->status)) {
HXLINE( 367)																				 ::states::debug::MenuEditorState _hx_tmp66 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 367)																				::String _hx_tmp67 = _hx_tmp66->textoTemporal;
HXDLIN( 367)																				::String _hx_tmp68;
HXDLIN( 367)																				 ::flixel::input::keyboard::FlxKeyList _this53 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 367)																				if (_this53->keyManager->checkStatusUnsafe(16,_this53->status)) {
HXLINE( 367)																					_hx_tmp68 = HX_("N",4e,00,00,00);
            																				}
            																				else {
HXLINE( 367)																					_hx_tmp68 = HX_("n",6e,00,00,00);
            																				}
HXDLIN( 367)																				_hx_tmp66->textoTemporal = (_hx_tmp67 + _hx_tmp68);
            																			}
            																			else {
HXLINE( 368)																				 ::flixel::input::keyboard::FlxKeyList _this54 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 368)																				if (_this54->keyManager->checkStatusUnsafe(79,_this54->status)) {
HXLINE( 368)																					 ::states::debug::MenuEditorState _hx_tmp69 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 368)																					::String _hx_tmp70 = _hx_tmp69->textoTemporal;
HXDLIN( 368)																					::String _hx_tmp71;
HXDLIN( 368)																					 ::flixel::input::keyboard::FlxKeyList _this55 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 368)																					if (_this55->keyManager->checkStatusUnsafe(16,_this55->status)) {
HXLINE( 368)																						_hx_tmp71 = HX_("O",4f,00,00,00);
            																					}
            																					else {
HXLINE( 368)																						_hx_tmp71 = HX_("o",6f,00,00,00);
            																					}
HXDLIN( 368)																					_hx_tmp69->textoTemporal = (_hx_tmp70 + _hx_tmp71);
            																				}
            																				else {
HXLINE( 369)																					 ::flixel::input::keyboard::FlxKeyList _this56 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 369)																					if (_this56->keyManager->checkStatusUnsafe(80,_this56->status)) {
HXLINE( 369)																						 ::states::debug::MenuEditorState _hx_tmp72 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 369)																						::String _hx_tmp73 = _hx_tmp72->textoTemporal;
HXDLIN( 369)																						::String _hx_tmp74;
HXDLIN( 369)																						 ::flixel::input::keyboard::FlxKeyList _this57 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 369)																						if (_this57->keyManager->checkStatusUnsafe(16,_this57->status)) {
HXLINE( 369)																							_hx_tmp74 = HX_("P",50,00,00,00);
            																						}
            																						else {
HXLINE( 369)																							_hx_tmp74 = HX_("p",70,00,00,00);
            																						}
HXDLIN( 369)																						_hx_tmp72->textoTemporal = (_hx_tmp73 + _hx_tmp74);
            																					}
            																					else {
HXLINE( 370)																						 ::flixel::input::keyboard::FlxKeyList _this58 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 370)																						if (_this58->keyManager->checkStatusUnsafe(81,_this58->status)) {
HXLINE( 370)																							 ::states::debug::MenuEditorState _hx_tmp75 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 370)																							::String _hx_tmp76 = _hx_tmp75->textoTemporal;
HXDLIN( 370)																							::String _hx_tmp77;
HXDLIN( 370)																							 ::flixel::input::keyboard::FlxKeyList _this59 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 370)																							if (_this59->keyManager->checkStatusUnsafe(16,_this59->status)) {
HXLINE( 370)																								_hx_tmp77 = HX_("Q",51,00,00,00);
            																							}
            																							else {
HXLINE( 370)																								_hx_tmp77 = HX_("q",71,00,00,00);
            																							}
HXDLIN( 370)																							_hx_tmp75->textoTemporal = (_hx_tmp76 + _hx_tmp77);
            																						}
            																						else {
HXLINE( 371)																							 ::flixel::input::keyboard::FlxKeyList _this60 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 371)																							if (_this60->keyManager->checkStatusUnsafe(82,_this60->status)) {
HXLINE( 371)																								 ::states::debug::MenuEditorState _hx_tmp78 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 371)																								::String _hx_tmp79 = _hx_tmp78->textoTemporal;
HXDLIN( 371)																								::String _hx_tmp80;
HXDLIN( 371)																								 ::flixel::input::keyboard::FlxKeyList _this61 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 371)																								if (_this61->keyManager->checkStatusUnsafe(16,_this61->status)) {
HXLINE( 371)																									_hx_tmp80 = HX_("R",52,00,00,00);
            																								}
            																								else {
HXLINE( 371)																									_hx_tmp80 = HX_("r",72,00,00,00);
            																								}
HXDLIN( 371)																								_hx_tmp78->textoTemporal = (_hx_tmp79 + _hx_tmp80);
            																							}
            																							else {
HXLINE( 372)																								 ::flixel::input::keyboard::FlxKeyList _this62 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 372)																								if (_this62->keyManager->checkStatusUnsafe(83,_this62->status)) {
HXLINE( 372)																									 ::states::debug::MenuEditorState _hx_tmp81 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 372)																									::String _hx_tmp82 = _hx_tmp81->textoTemporal;
HXDLIN( 372)																									::String _hx_tmp83;
HXDLIN( 372)																									 ::flixel::input::keyboard::FlxKeyList _this63 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 372)																									if (_this63->keyManager->checkStatusUnsafe(16,_this63->status)) {
HXLINE( 372)																										_hx_tmp83 = HX_("S",53,00,00,00);
            																									}
            																									else {
HXLINE( 372)																										_hx_tmp83 = HX_("s",73,00,00,00);
            																									}
HXDLIN( 372)																									_hx_tmp81->textoTemporal = (_hx_tmp82 + _hx_tmp83);
            																								}
            																								else {
HXLINE( 373)																									 ::flixel::input::keyboard::FlxKeyList _this64 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 373)																									if (_this64->keyManager->checkStatusUnsafe(84,_this64->status)) {
HXLINE( 373)																										 ::states::debug::MenuEditorState _hx_tmp84 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 373)																										::String _hx_tmp85 = _hx_tmp84->textoTemporal;
HXDLIN( 373)																										::String _hx_tmp86;
HXDLIN( 373)																										 ::flixel::input::keyboard::FlxKeyList _this65 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 373)																										if (_this65->keyManager->checkStatusUnsafe(16,_this65->status)) {
HXLINE( 373)																											_hx_tmp86 = HX_("T",54,00,00,00);
            																										}
            																										else {
HXLINE( 373)																											_hx_tmp86 = HX_("t",74,00,00,00);
            																										}
HXDLIN( 373)																										_hx_tmp84->textoTemporal = (_hx_tmp85 + _hx_tmp86);
            																									}
            																									else {
HXLINE( 374)																										 ::flixel::input::keyboard::FlxKeyList _this66 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 374)																										if (_this66->keyManager->checkStatusUnsafe(85,_this66->status)) {
HXLINE( 374)																											 ::states::debug::MenuEditorState _hx_tmp87 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 374)																											::String _hx_tmp88 = _hx_tmp87->textoTemporal;
HXDLIN( 374)																											::String _hx_tmp89;
HXDLIN( 374)																											 ::flixel::input::keyboard::FlxKeyList _this67 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 374)																											if (_this67->keyManager->checkStatusUnsafe(16,_this67->status)) {
HXLINE( 374)																												_hx_tmp89 = HX_("U",55,00,00,00);
            																											}
            																											else {
HXLINE( 374)																												_hx_tmp89 = HX_("u",75,00,00,00);
            																											}
HXDLIN( 374)																											_hx_tmp87->textoTemporal = (_hx_tmp88 + _hx_tmp89);
            																										}
            																										else {
HXLINE( 375)																											 ::flixel::input::keyboard::FlxKeyList _this68 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 375)																											if (_this68->keyManager->checkStatusUnsafe(86,_this68->status)) {
HXLINE( 375)																												 ::states::debug::MenuEditorState _hx_tmp90 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 375)																												::String _hx_tmp91 = _hx_tmp90->textoTemporal;
HXDLIN( 375)																												::String _hx_tmp92;
HXDLIN( 375)																												 ::flixel::input::keyboard::FlxKeyList _this69 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 375)																												if (_this69->keyManager->checkStatusUnsafe(16,_this69->status)) {
HXLINE( 375)																													_hx_tmp92 = HX_("V",56,00,00,00);
            																												}
            																												else {
HXLINE( 375)																													_hx_tmp92 = HX_("v",76,00,00,00);
            																												}
HXDLIN( 375)																												_hx_tmp90->textoTemporal = (_hx_tmp91 + _hx_tmp92);
            																											}
            																											else {
HXLINE( 376)																												 ::flixel::input::keyboard::FlxKeyList _this70 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 376)																												if (_this70->keyManager->checkStatusUnsafe(87,_this70->status)) {
HXLINE( 376)																													 ::states::debug::MenuEditorState _hx_tmp93 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 376)																													::String _hx_tmp94 = _hx_tmp93->textoTemporal;
HXDLIN( 376)																													::String _hx_tmp95;
HXDLIN( 376)																													 ::flixel::input::keyboard::FlxKeyList _this71 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 376)																													if (_this71->keyManager->checkStatusUnsafe(16,_this71->status)) {
HXLINE( 376)																														_hx_tmp95 = HX_("W",57,00,00,00);
            																													}
            																													else {
HXLINE( 376)																														_hx_tmp95 = HX_("w",77,00,00,00);
            																													}
HXDLIN( 376)																													_hx_tmp93->textoTemporal = (_hx_tmp94 + _hx_tmp95);
            																												}
            																												else {
HXLINE( 377)																													 ::flixel::input::keyboard::FlxKeyList _this72 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 377)																													if (_this72->keyManager->checkStatusUnsafe(88,_this72->status)) {
HXLINE( 377)																														 ::states::debug::MenuEditorState _hx_tmp96 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 377)																														::String _hx_tmp97 = _hx_tmp96->textoTemporal;
HXDLIN( 377)																														::String _hx_tmp98;
HXDLIN( 377)																														 ::flixel::input::keyboard::FlxKeyList _this73 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 377)																														if (_this73->keyManager->checkStatusUnsafe(16,_this73->status)) {
HXLINE( 377)																															_hx_tmp98 = HX_("X",58,00,00,00);
            																														}
            																														else {
HXLINE( 377)																															_hx_tmp98 = HX_("x",78,00,00,00);
            																														}
HXDLIN( 377)																														_hx_tmp96->textoTemporal = (_hx_tmp97 + _hx_tmp98);
            																													}
            																													else {
HXLINE( 378)																														 ::flixel::input::keyboard::FlxKeyList _this74 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 378)																														if (_this74->keyManager->checkStatusUnsafe(89,_this74->status)) {
HXLINE( 378)																															 ::states::debug::MenuEditorState _hx_tmp99 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 378)																															::String _hx_tmp100 = _hx_tmp99->textoTemporal;
HXDLIN( 378)																															::String _hx_tmp101;
HXDLIN( 378)																															 ::flixel::input::keyboard::FlxKeyList _this75 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 378)																															if (_this75->keyManager->checkStatusUnsafe(16,_this75->status)) {
HXLINE( 378)																																_hx_tmp101 = HX_("Y",59,00,00,00);
            																															}
            																															else {
HXLINE( 378)																																_hx_tmp101 = HX_("y",79,00,00,00);
            																															}
HXDLIN( 378)																															_hx_tmp99->textoTemporal = (_hx_tmp100 + _hx_tmp101);
            																														}
            																														else {
HXLINE( 379)																															 ::flixel::input::keyboard::FlxKeyList _this76 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 379)																															if (_this76->keyManager->checkStatusUnsafe(90,_this76->status)) {
HXLINE( 379)																																 ::states::debug::MenuEditorState _hx_tmp102 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 379)																																::String _hx_tmp103 = _hx_tmp102->textoTemporal;
HXDLIN( 379)																																::String _hx_tmp104;
HXDLIN( 379)																																 ::flixel::input::keyboard::FlxKeyList _this77 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 379)																																if (_this77->keyManager->checkStatusUnsafe(16,_this77->status)) {
HXLINE( 379)																																	_hx_tmp104 = HX_("Z",5a,00,00,00);
            																																}
            																																else {
HXLINE( 379)																																	_hx_tmp104 = HX_("z",7a,00,00,00);
            																																}
HXDLIN( 379)																																_hx_tmp102->textoTemporal = (_hx_tmp103 + _hx_tmp104);
            																															}
            																															else {
HXLINE( 380)																																 ::flixel::input::keyboard::FlxKeyList _this78 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 380)																																if (_this78->keyManager->checkStatusUnsafe(32,_this78->status)) {
HXLINE( 380)																																	 ::states::debug::MenuEditorState _hx_tmp105 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 380)																																	_hx_tmp105->textoTemporal = (_hx_tmp105->textoTemporal + HX_(" ",20,00,00,00));
            																																}
            																																else {
HXLINE( 381)																																	 ::flixel::input::keyboard::FlxKeyList _this79 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 381)																																	if (_this79->keyManager->checkStatusUnsafe(49,_this79->status)) {
HXLINE( 381)																																		 ::states::debug::MenuEditorState _hx_tmp106 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 381)																																		_hx_tmp106->textoTemporal = (_hx_tmp106->textoTemporal + HX_("1",31,00,00,00));
            																																	}
            																																	else {
HXLINE( 382)																																		 ::flixel::input::keyboard::FlxKeyList _this80 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 382)																																		if (_this80->keyManager->checkStatusUnsafe(50,_this80->status)) {
HXLINE( 382)																																			 ::states::debug::MenuEditorState _hx_tmp107 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 382)																																			_hx_tmp107->textoTemporal = (_hx_tmp107->textoTemporal + HX_("2",32,00,00,00));
            																																		}
            																																		else {
HXLINE( 383)																																			 ::flixel::input::keyboard::FlxKeyList _this81 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 383)																																			if (_this81->keyManager->checkStatusUnsafe(51,_this81->status)) {
HXLINE( 383)																																				 ::states::debug::MenuEditorState _hx_tmp108 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 383)																																				_hx_tmp108->textoTemporal = (_hx_tmp108->textoTemporal + HX_("3",33,00,00,00));
            																																			}
            																																			else {
HXLINE( 384)																																				 ::flixel::input::keyboard::FlxKeyList _this82 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 384)																																				if (_this82->keyManager->checkStatusUnsafe(52,_this82->status)) {
HXLINE( 384)																																					 ::states::debug::MenuEditorState _hx_tmp109 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 384)																																					_hx_tmp109->textoTemporal = (_hx_tmp109->textoTemporal + HX_("4",34,00,00,00));
            																																				}
            																																				else {
HXLINE( 385)																																					 ::flixel::input::keyboard::FlxKeyList _this83 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 385)																																					if (_this83->keyManager->checkStatusUnsafe(53,_this83->status)) {
HXLINE( 385)																																						 ::states::debug::MenuEditorState _hx_tmp110 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 385)																																						_hx_tmp110->textoTemporal = (_hx_tmp110->textoTemporal + HX_("5",35,00,00,00));
            																																					}
            																																					else {
HXLINE( 386)																																						 ::flixel::input::keyboard::FlxKeyList _this84 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 386)																																						if (_this84->keyManager->checkStatusUnsafe(54,_this84->status)) {
HXLINE( 386)																																							 ::states::debug::MenuEditorState _hx_tmp111 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 386)																																							_hx_tmp111->textoTemporal = (_hx_tmp111->textoTemporal + HX_("6",36,00,00,00));
            																																						}
            																																						else {
HXLINE( 387)																																							 ::flixel::input::keyboard::FlxKeyList _this85 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 387)																																							if (_this85->keyManager->checkStatusUnsafe(55,_this85->status)) {
HXLINE( 387)																																								 ::states::debug::MenuEditorState _hx_tmp112 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 387)																																								_hx_tmp112->textoTemporal = (_hx_tmp112->textoTemporal + HX_("7",37,00,00,00));
            																																							}
            																																							else {
HXLINE( 388)																																								 ::flixel::input::keyboard::FlxKeyList _this86 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 388)																																								if (_this86->keyManager->checkStatusUnsafe(56,_this86->status)) {
HXLINE( 388)																																									 ::states::debug::MenuEditorState _hx_tmp113 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 388)																																									_hx_tmp113->textoTemporal = (_hx_tmp113->textoTemporal + HX_("8",38,00,00,00));
            																																								}
            																																								else {
HXLINE( 389)																																									 ::flixel::input::keyboard::FlxKeyList _this87 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 389)																																									if (_this87->keyManager->checkStatusUnsafe(57,_this87->status)) {
HXLINE( 389)																																										 ::states::debug::MenuEditorState _hx_tmp114 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 389)																																										_hx_tmp114->textoTemporal = (_hx_tmp114->textoTemporal + HX_("9",39,00,00,00));
            																																									}
            																																									else {
HXLINE( 390)																																										 ::flixel::input::keyboard::FlxKeyList _this88 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 390)																																										if (_this88->keyManager->checkStatusUnsafe(48,_this88->status)) {
HXLINE( 390)																																											 ::states::debug::MenuEditorState _hx_tmp115 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 390)																																											_hx_tmp115->textoTemporal = (_hx_tmp115->textoTemporal + HX_("0",30,00,00,00));
            																																										}
            																																									}
            																																								}
            																																							}
            																																						}
            																																					}
            																																				}
            																																			}
            																																		}
            																																	}
            																																}
            																															}
            																														}
            																													}
            																												}
            																											}
            																										}
            																									}
            																								}
            																							}
            																						}
            																					}
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXLINE( 392)						if ((this->textoTemporal.length > 0)) {
HXLINE( 393)							this->info->set_text(((HX_W(u"\u270f\ufe0f Escribiendo: ",c85e,f956) + this->textoTemporal) + HX_("_",5f,00,00,00)));
            						}
            					}
            				}
            			}
HXLINE( 396)			return;
            		}
HXLINE( 399)		bool _hx_tmp116;
HXDLIN( 399)		 ::flixel::input::keyboard::FlxKeyList _this89 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 399)		if (_this89->keyManager->checkStatusUnsafe(46,_this89->status)) {
HXLINE( 399)			_hx_tmp116 = ::hx::IsNotNull( this->seleccionado );
            		}
            		else {
HXLINE( 399)			_hx_tmp116 = false;
            		}
HXDLIN( 399)		if (_hx_tmp116) {
HXLINE( 400)			this->remove(this->seleccionado,null());
HXLINE( 401)			this->elementos->remove(this->seleccionado);
HXLINE( 402)			::states::debug::MenuEditorState_obj::elementosCompartidos = this->elementos->copy();
HXLINE( 403)			this->seleccionado = null();
HXLINE( 404)			this->seleccionRect->set_visible(false);
HXLINE( 405)			this->info->set_text(HX_W(u"\U0001f5d1\ufe0f Elemento eliminado",ca12,043d));
            		}
            	}


void MenuEditorState_obj::exportarEscena(::String nombre){
            	HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_409_exportarEscena)
HXLINE( 410)		::String ruta = ((HX_("assets/escenas/",2b,7c,99,f2) + nombre) + HX_(".hx",be,42,23,00));
HXLINE( 411)		::String salida = HX_("// Escena generada por SWVRT Engine\n\n",fd,12,bf,7f);
HXLINE( 412)		salida = (salida + HX_("var elementos = [];\n\n",7d,22,35,65));
HXLINE( 414)		{
HXLINE( 414)			int _g = 0;
HXDLIN( 414)			::cpp::VirtualArray _g1 = this->elementos;
HXDLIN( 414)			while((_g < _g1->get_length())){
HXLINE( 414)				 ::Dynamic e = _g1->__get(_g);
HXDLIN( 414)				_g = (_g + 1);
HXLINE( 415)				if (::Std_obj::isOfType(e,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE( 416)					 ::flixel::text::FlxText t = ( ( ::flixel::text::FlxText)(e) );
HXLINE( 417)					::String salida1 = ((HX_("var t = new flixel.text.FlxText(",80,14,8e,e2) + ::Std_obj::_hx_int(t->x)) + HX_(", ",74,26,00,00));
HXDLIN( 417)					::String salida2 = ((salida1 + ::Std_obj::_hx_int(t->y)) + HX_(", ",74,26,00,00));
HXDLIN( 417)					::String salida3 = ((salida2 + ::Std_obj::_hx_int(t->get_fieldWidth())) + HX_(", \"",2e,7f,21,00));
HXDLIN( 417)					salida = (salida + ((salida3 + t->text) + HX_("\");\n",f6,90,98,16)));
HXLINE( 418)					::String salida4 = ((HX_("t.setFormat(\"",b9,88,b9,05) + this->fuenteActiva) + HX_("\", ",16,f3,19,00));
HXDLIN( 418)					salida = (salida + ((salida4 + ::Std_obj::_hx_int(( (Float)(t->_defaultFormat->size) ))) + HX_(", 0xFFFFFFFF, \"left\");\n",6f,80,12,fc)));
HXLINE( 419)					salida = (salida + HX_("elementos.push(t);\n\n",a6,f2,de,4d));
            				}
            				else {
HXLINE( 420)					if (::Std_obj::isOfType(e,::hx::ClassOf< ::objetos::ImagenMenu >())) {
HXLINE( 421)						 ::objetos::ImagenMenu i = ( ( ::objetos::ImagenMenu)(e) );
HXLINE( 422)						::String salida5 = ((HX_("var s = new objetos.ImagenMenu(",e9,ae,6d,ea) + ::Std_obj::_hx_int(i->x)) + HX_(", ",74,26,00,00));
HXDLIN( 422)						::String salida6 = ((salida5 + ::Std_obj::_hx_int(i->y)) + HX_(", \"",2e,7f,21,00));
HXDLIN( 422)						salida = (salida + ((salida6 + i->ruta) + HX_("\");\n",f6,90,98,16)));
HXLINE( 423)						salida = (salida + HX_("elementos.push(s);\n\n",25,5e,78,ba));
            					}
            				}
            			}
            		}
HXLINE( 427)		salida = (salida + HX_("return elementos;\n",df,82,a6,17));
HXLINE( 428)		::sys::io::File_obj::saveContent(ruta,salida);
HXLINE( 429)		this->info->set_text((HX_W(u"\U0001f4be Escena exportada como ",9cc4,13b0) + ruta));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuEditorState_obj,exportarEscena,(void))

void MenuEditorState_obj::guardarMenu(){
            	HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_432_guardarMenu)
HXLINE( 434)		this->nombreMenu = this->inputNombre->text;
HXLINE( 436)		::String scriptsPath = HX_("assets/scripts",3c,f3,3a,0b);
HXLINE( 438)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 439)			if (!(::sys::FileSystem_obj::exists(scriptsPath))) {
HXLINE( 440)				::sys::FileSystem_obj::createDirectory(scriptsPath);
            			}
HXLINE( 443)			::String menuContent = HX_W(u"// Men\u00fa personalizado generado\n",b883,4d25);
HXLINE( 444)			menuContent = (menuContent + HX_("class CustomMenu extends FlxState {\n",e1,0f,30,99));
HXLINE( 445)			menuContent = (menuContent + HX_("    override public function create():Void {\n",83,03,ef,d2));
HXLINE( 446)			menuContent = (menuContent + HX_("        super.create();\n",bf,6d,3d,5a));
HXLINE( 447)			menuContent = (menuContent + HX_W(u"        // Men\u00fa personalizado\n",e042,2f61));
HXLINE( 448)			menuContent = (menuContent + HX_("    }\n",ed,a4,7d,4d));
HXLINE( 449)			menuContent = (menuContent + HX_("}",7d,00,00,00));
HXLINE( 451)			::String fileName = (this->nombreMenu + HX_(".hx",be,42,23,00));
HXLINE( 453)			if (::sys::FileSystem_obj::exists(((scriptsPath + HX_("/",2f,00,00,00)) + fileName))) {
HXLINE( 454)				this->mostrarDialogoReemplazo(((scriptsPath + HX_("/",2f,00,00,00)) + fileName),menuContent);
HXLINE( 455)				return;
            			}
HXLINE( 457)			::sys::io::File_obj::saveContent(((scriptsPath + HX_("/",2f,00,00,00)) + fileName),menuContent);
HXLINE( 459)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Men\u00fa guardado: ",c265,77ff) + fileName),::hx::SourceInfo(HX_("source/states/debug/MenuEditorState.hx",ee,f6,99,fe),459,HX_("states.debug.MenuEditorState",5e,85,8b,37),HX_("guardarMenu",d5,81,56,ff)));
HXLINE( 460)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 462)				{
HXLINE( 462)					null();
            				}
HXDLIN( 462)				 ::Dynamic e = _g;
HXDLIN( 462)				{
HXLINE( 463)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 463)					::String _hx_tmp1 = (HX_W(u"Error guardando men\u00fa: ",1998,170a) + ::Std_obj::string(e));
HXDLIN( 463)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/MenuEditorState.hx",ee,f6,99,fe),463,HX_("states.debug.MenuEditorState",5e,85,8b,37),HX_("guardarMenu",d5,81,56,ff)));
HXLINE( 464)					::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuEditorState_obj,guardarMenu,(void))

void MenuEditorState_obj::mostrarDialogoReemplazo(::String fileName,::String data){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::states::debug::MenuEditorState,_gthis,::String,data,::String,fileName) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_480_mostrarDialogoReemplazo)
HXLINE( 481)			::sys::io::File_obj::saveContent(fileName,data);
HXLINE( 482)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Men\u00fa guardado: ",c265,77ff) + fileName),::hx::SourceInfo(HX_("source/states/debug/MenuEditorState.hx",ee,f6,99,fe),482,HX_("states.debug.MenuEditorState",5e,85,8b,37),HX_("mostrarDialogoReemplazo",d8,ed,be,45)));
HXLINE( 483)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
HXLINE( 484)			_gthis->cerrarDialog();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_468_mostrarDialogoReemplazo)
HXDLIN( 468)		 ::states::debug::MenuEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 469)		this->showingDialog = true;
HXLINE( 471)		this->confirmDialog =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(200) )),((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(100) )),null());
HXLINE( 472)		this->confirmDialog->makeGraphic(400,200,-587202560,null(),null());
HXLINE( 473)		this->add(this->confirmDialog);
HXLINE( 475)		 ::flixel::text::FlxText dialogText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 20),(this->confirmDialog->y + 20),360,((HX_W(u"El men\u00fa \'",8adb,e66d) + this->nombreMenu) + HX_W(u".hx\' ya existe.\n\n\u00bfQuieres reemplazarlo?",163f,a373)),null(),null());
HXLINE( 477)		dialogText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 478)		this->add(dialogText);
HXLINE( 480)		 ::flixel::ui::FlxButton btnSi =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 50),(this->confirmDialog->y + 120),HX_W(u"S\u00cd",a57d,003f), ::Dynamic(new _hx_Closure_0(_gthis,data,fileName)));
HXLINE( 486)		this->add(btnSi);
HXLINE( 488)		 ::flixel::ui::FlxButton btnNo =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 250),(this->confirmDialog->y + 120),HX_("NO",41,44,00,00),this->cerrarDialog_dyn());
HXLINE( 489)		this->add(btnNo);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MenuEditorState_obj,mostrarDialogoReemplazo,(void))

void MenuEditorState_obj::cerrarDialog(){
            	HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_492_cerrarDialog)
HXLINE( 493)		this->showingDialog = false;
HXLINE( 496)		::Array< ::Dynamic> elementsToRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 497)		{
HXLINE( 497)			int _g = 0;
HXDLIN( 497)			::Array< ::Dynamic> _g1 = this->members;
HXDLIN( 497)			while((_g < _g1->length)){
HXLINE( 497)				 ::flixel::FlxBasic member = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 497)				_g = (_g + 1);
HXLINE( 498)				if (::hx::IsNotNull( member )) {
HXLINE( 499)					 ::flixel::FlxSprite sprite = ::hx::TCast<  ::flixel::FlxSprite >::cast(member);
HXLINE( 500)					bool _hx_tmp;
HXDLIN( 500)					bool _hx_tmp1;
HXDLIN( 500)					bool _hx_tmp2;
HXDLIN( 500)					bool _hx_tmp3;
HXDLIN( 500)					if (::hx::IsNotNull( sprite )) {
HXLINE( 500)						_hx_tmp3 = (sprite->x >= ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(200) )));
            					}
            					else {
HXLINE( 500)						_hx_tmp3 = false;
            					}
HXDLIN( 500)					if (_hx_tmp3) {
HXLINE( 500)						_hx_tmp2 = (sprite->x <= ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 200));
            					}
            					else {
HXLINE( 500)						_hx_tmp2 = false;
            					}
HXDLIN( 500)					if (_hx_tmp2) {
HXLINE( 500)						_hx_tmp1 = (sprite->y >= ((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(100) )));
            					}
            					else {
HXLINE( 500)						_hx_tmp1 = false;
            					}
HXDLIN( 500)					if (_hx_tmp1) {
HXLINE( 500)						_hx_tmp = (sprite->y <= ((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) + 100));
            					}
            					else {
HXLINE( 500)						_hx_tmp = false;
            					}
HXDLIN( 500)					if (_hx_tmp) {
HXLINE( 502)						elementsToRemove->push(member);
            					}
            				}
            			}
            		}
HXLINE( 507)		{
HXLINE( 507)			int _g2 = 0;
HXDLIN( 507)			while((_g2 < elementsToRemove->length)){
HXLINE( 507)				 ::flixel::FlxBasic element = elementsToRemove->__get(_g2).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 507)				_g2 = (_g2 + 1);
HXLINE( 508)				this->remove(element,null());
            			}
            		}
HXLINE( 511)		this->confirmDialog = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuEditorState_obj,cerrarDialog,(void))

void MenuEditorState_obj::mostrarOpcionesEstablecer(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::debug::MenuEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_526_mostrarOpcionesEstablecer)
HXLINE( 527)			_gthis->establecerComoPause();
HXLINE( 528)			_gthis->cerrarDialog();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::debug::MenuEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_532_mostrarOpcionesEstablecer)
HXLINE( 533)			_gthis->establecerComoOtro();
HXLINE( 534)			_gthis->cerrarDialog();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_e9341f7f5493d482_514_mostrarOpcionesEstablecer)
HXDLIN( 514)		 ::states::debug::MenuEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 515)		this->showingDialog = true;
HXLINE( 517)		this->confirmDialog =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(200) )),((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(100) )),null());
HXLINE( 518)		this->confirmDialog->makeGraphic(400,200,-587202560,null(),null());
HXLINE( 519)		this->add(this->confirmDialog);
HXLINE( 521)		 ::flixel::text::FlxText dialogText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 20),(this->confirmDialog->y + 20),360,HX_W(u"Establecer este men\u00fa como:",6448,59cf),null(),null());
HXLINE( 523)		dialogText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 524)		this->add(dialogText);
HXLINE( 526)		 ::flixel::ui::FlxButton btnPause =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 50),(this->confirmDialog->y + 80),HX_W(u"\u23f8\ufe0f PAUSE",d6b1,8994), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 530)		this->add(btnPause);
HXLINE( 532)		 ::flixel::ui::FlxButton btnOtro =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 200),(this->confirmDialog->y + 80),HX_W(u"\U0001f4dd OTRO",9989,90cc), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 536)		this->add(btnOtro);
HXLINE( 538)		 ::flixel::ui::FlxButton btnCancelar =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 125),(this->confirmDialog->y + 140),HX_("CANCELAR",eb,a4,ab,78),this->cerrarDialog_dyn());
HXLINE( 539)		this->add(btnCancelar);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuEditorState_obj,mostrarOpcionesEstablecer,(void))

void MenuEditorState_obj::establecerComoPause(){
            	HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_543_establecerComoPause)
HXDLIN( 543)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 544)			::String pauseContent = HX_W(u"// Men\u00fa de pausa generado\n",73c1,2c07);
HXLINE( 545)			pauseContent = (pauseContent + HX_("class PauseMenu extends FlxState {\n",16,39,15,8f));
HXLINE( 546)			pauseContent = (pauseContent + HX_W(u"    // Men\u00fa de pausa personalizado\n",3ee9,c096));
HXLINE( 547)			pauseContent = (pauseContent + HX_("}",7d,00,00,00));
HXLINE( 549)			::sys::io::File_obj::saveContent(HX_("assets/scripts/PauseMenu.hx",3c,d4,a7,0a),pauseContent);
HXLINE( 550)			::haxe::Log_obj::trace(HX_W(u"\u23f8\ufe0f Establecido como men\u00fa de pausa",74a4,3163),::hx::SourceInfo(HX_("source/states/debug/MenuEditorState.hx",ee,f6,99,fe),550,HX_("states.debug.MenuEditorState",5e,85,8b,37),HX_("establecerComoPause",38,d2,f0,0d)));
HXLINE( 551)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 552)				{
HXLINE( 552)					null();
            				}
HXDLIN( 552)				 ::Dynamic e = _g;
HXLINE( 553)				{
HXLINE( 553)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 553)					::String _hx_tmp1 = (HX_("Error: ",4e,a8,5b,b7) + ::Std_obj::string(e));
HXDLIN( 553)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/MenuEditorState.hx",ee,f6,99,fe),553,HX_("states.debug.MenuEditorState",5e,85,8b,37),HX_("establecerComoPause",38,d2,f0,0d)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuEditorState_obj,establecerComoPause,(void))

void MenuEditorState_obj::establecerComoOtro(){
            	HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_558_establecerComoOtro)
HXDLIN( 558)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 559)			::String otroContent = HX_W(u"// Men\u00fa personalizado\n",5042,a48e);
HXLINE( 560)			otroContent = (otroContent + HX_("class CustomMenu extends FlxState {\n",e1,0f,30,99));
HXLINE( 561)			otroContent = (otroContent + HX_W(u"    // Men\u00fa personalizado\n",1842,a836));
HXLINE( 562)			otroContent = (otroContent + HX_("}",7d,00,00,00));
HXLINE( 564)			::sys::io::File_obj::saveContent(HX_("assets/scripts/CustomMenu.hx",5b,b5,64,aa),otroContent);
HXLINE( 565)			::haxe::Log_obj::trace(HX_W(u"\U0001f4dd Establecido como men\u00fa personalizado",52cc,0334),::hx::SourceInfo(HX_("source/states/debug/MenuEditorState.hx",ee,f6,99,fe),565,HX_("states.debug.MenuEditorState",5e,85,8b,37),HX_("establecerComoOtro",20,bb,0c,04)));
HXLINE( 566)			::flixel::FlxG_obj::camera->flash((int)1140916223,((Float)0.3),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 567)				{
HXLINE( 567)					null();
            				}
HXDLIN( 567)				 ::Dynamic e = _g;
HXLINE( 568)				{
HXLINE( 568)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 568)					::String _hx_tmp1 = (HX_("Error: ",4e,a8,5b,b7) + ::Std_obj::string(e));
HXDLIN( 568)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/MenuEditorState.hx",ee,f6,99,fe),568,HX_("states.debug.MenuEditorState",5e,85,8b,37),HX_("establecerComoOtro",20,bb,0c,04)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuEditorState_obj,establecerComoOtro,(void))

::cpp::VirtualArray MenuEditorState_obj::elementosCompartidos;


::hx::ObjectPtr< MenuEditorState_obj > MenuEditorState_obj::__new() {
	::hx::ObjectPtr< MenuEditorState_obj > __this = new MenuEditorState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MenuEditorState_obj > MenuEditorState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MenuEditorState_obj *__this = (MenuEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuEditorState_obj), true, "states.debug.MenuEditorState"));
	*(void **)__this = MenuEditorState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MenuEditorState_obj::MenuEditorState_obj()
{
}

void MenuEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuEditorState);
	HX_MARK_MEMBER_NAME(elementos,"elementos");
	HX_MARK_MEMBER_NAME(botonesUI,"botonesUI");
	HX_MARK_MEMBER_NAME(btnVolver,"btnVolver");
	HX_MARK_MEMBER_NAME(editandoTexto,"editandoTexto");
	HX_MARK_MEMBER_NAME(textoTemporal,"textoTemporal");
	HX_MARK_MEMBER_NAME(info,"info");
	HX_MARK_MEMBER_NAME(fuenteActiva,"fuenteActiva");
	HX_MARK_MEMBER_NAME(seleccionado,"seleccionado");
	HX_MARK_MEMBER_NAME(seleccionRect,"seleccionRect");
	HX_MARK_MEMBER_NAME(velocidad,"velocidad");
	HX_MARK_MEMBER_NAME(modoActual,"modoActual");
	HX_MARK_MEMBER_NAME(nombreMenu,"nombreMenu");
	HX_MARK_MEMBER_NAME(inputNombre,"inputNombre");
	HX_MARK_MEMBER_NAME(confirmDialog,"confirmDialog");
	HX_MARK_MEMBER_NAME(showingDialog,"showingDialog");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(elementos,"elementos");
	HX_VISIT_MEMBER_NAME(botonesUI,"botonesUI");
	HX_VISIT_MEMBER_NAME(btnVolver,"btnVolver");
	HX_VISIT_MEMBER_NAME(editandoTexto,"editandoTexto");
	HX_VISIT_MEMBER_NAME(textoTemporal,"textoTemporal");
	HX_VISIT_MEMBER_NAME(info,"info");
	HX_VISIT_MEMBER_NAME(fuenteActiva,"fuenteActiva");
	HX_VISIT_MEMBER_NAME(seleccionado,"seleccionado");
	HX_VISIT_MEMBER_NAME(seleccionRect,"seleccionRect");
	HX_VISIT_MEMBER_NAME(velocidad,"velocidad");
	HX_VISIT_MEMBER_NAME(modoActual,"modoActual");
	HX_VISIT_MEMBER_NAME(nombreMenu,"nombreMenu");
	HX_VISIT_MEMBER_NAME(inputNombre,"inputNombre");
	HX_VISIT_MEMBER_NAME(confirmDialog,"confirmDialog");
	HX_VISIT_MEMBER_NAME(showingDialog,"showingDialog");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { return ::hx::Val( info ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"elementos") ) { return ::hx::Val( elementos ); }
		if (HX_FIELD_EQ(inName,"botonesUI") ) { return ::hx::Val( botonesUI ); }
		if (HX_FIELD_EQ(inName,"btnVolver") ) { return ::hx::Val( btnVolver ); }
		if (HX_FIELD_EQ(inName,"velocidad") ) { return ::hx::Val( velocidad ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"modoActual") ) { return ::hx::Val( modoActual ); }
		if (HX_FIELD_EQ(inName,"nombreMenu") ) { return ::hx::Val( nombreMenu ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputNombre") ) { return ::hx::Val( inputNombre ); }
		if (HX_FIELD_EQ(inName,"guardarMenu") ) { return ::hx::Val( guardarMenu_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fuenteActiva") ) { return ::hx::Val( fuenteActiva ); }
		if (HX_FIELD_EQ(inName,"seleccionado") ) { return ::hx::Val( seleccionado ); }
		if (HX_FIELD_EQ(inName,"cerrarDialog") ) { return ::hx::Val( cerrarDialog_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"editandoTexto") ) { return ::hx::Val( editandoTexto ); }
		if (HX_FIELD_EQ(inName,"textoTemporal") ) { return ::hx::Val( textoTemporal ); }
		if (HX_FIELD_EQ(inName,"seleccionRect") ) { return ::hx::Val( seleccionRect ); }
		if (HX_FIELD_EQ(inName,"confirmDialog") ) { return ::hx::Val( confirmDialog ); }
		if (HX_FIELD_EQ(inName,"showingDialog") ) { return ::hx::Val( showingDialog ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mostrarFuentes") ) { return ::hx::Val( mostrarFuentes_dyn() ); }
		if (HX_FIELD_EQ(inName,"exportarEscena") ) { return ::hx::Val( exportarEscena_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"establecerComoOtro") ) { return ::hx::Val( establecerComoOtro_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"establecerComoPause") ) { return ::hx::Val( establecerComoPause_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"mostrarDialogoReemplazo") ) { return ::hx::Val( mostrarDialogoReemplazo_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"mostrarOpcionesEstablecer") ) { return ::hx::Val( mostrarOpcionesEstablecer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuEditorState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"elementosCompartidos") ) { outValue = ( elementosCompartidos ); return true; }
	}
	return false;
}

::hx::Val MenuEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"elementos") ) { elementos=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botonesUI") ) { botonesUI=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"btnVolver") ) { btnVolver=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"velocidad") ) { velocidad=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"modoActual") ) { modoActual=inValue.Cast<  ::states::debug::EditorMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nombreMenu") ) { nombreMenu=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputNombre") ) { inputNombre=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fuenteActiva") ) { fuenteActiva=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"seleccionado") ) { seleccionado=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"editandoTexto") ) { editandoTexto=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textoTemporal") ) { textoTemporal=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"seleccionRect") ) { seleccionRect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"confirmDialog") ) { confirmDialog=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showingDialog") ) { showingDialog=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuEditorState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"elementosCompartidos") ) { elementosCompartidos=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
	}
	return false;
}

void MenuEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("elementos",e0,36,eb,c7));
	outFields->push(HX_("botonesUI",28,74,ce,5f));
	outFields->push(HX_("btnVolver",ac,48,67,1d));
	outFields->push(HX_("editandoTexto",00,a3,9c,f2));
	outFields->push(HX_("textoTemporal",24,5b,6e,14));
	outFields->push(HX_("info",6e,38,bb,45));
	outFields->push(HX_("fuenteActiva",8b,61,b7,36));
	outFields->push(HX_("seleccionado",8f,4e,a9,1a));
	outFields->push(HX_("seleccionRect",81,f3,91,2f));
	outFields->push(HX_("velocidad",af,9e,37,ff));
	outFields->push(HX_("modoActual",db,61,c8,00));
	outFields->push(HX_("nombreMenu",48,41,b8,4b));
	outFields->push(HX_("inputNombre",b3,f2,46,22));
	outFields->push(HX_("confirmDialog",e8,d5,94,10));
	outFields->push(HX_("showingDialog",ad,7e,e6,07));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(MenuEditorState_obj,elementos),HX_("elementos",e0,36,eb,c7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuEditorState_obj,botonesUI),HX_("botonesUI",28,74,ce,5f)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(MenuEditorState_obj,btnVolver),HX_("btnVolver",ac,48,67,1d)},
	{::hx::fsBool,(int)offsetof(MenuEditorState_obj,editandoTexto),HX_("editandoTexto",00,a3,9c,f2)},
	{::hx::fsString,(int)offsetof(MenuEditorState_obj,textoTemporal),HX_("textoTemporal",24,5b,6e,14)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuEditorState_obj,info),HX_("info",6e,38,bb,45)},
	{::hx::fsString,(int)offsetof(MenuEditorState_obj,fuenteActiva),HX_("fuenteActiva",8b,61,b7,36)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuEditorState_obj,seleccionado),HX_("seleccionado",8f,4e,a9,1a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuEditorState_obj,seleccionRect),HX_("seleccionRect",81,f3,91,2f)},
	{::hx::fsInt,(int)offsetof(MenuEditorState_obj,velocidad),HX_("velocidad",af,9e,37,ff)},
	{::hx::fsObject /*  ::states::debug::EditorMode */ ,(int)offsetof(MenuEditorState_obj,modoActual),HX_("modoActual",db,61,c8,00)},
	{::hx::fsString,(int)offsetof(MenuEditorState_obj,nombreMenu),HX_("nombreMenu",48,41,b8,4b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuEditorState_obj,inputNombre),HX_("inputNombre",b3,f2,46,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuEditorState_obj,confirmDialog),HX_("confirmDialog",e8,d5,94,10)},
	{::hx::fsBool,(int)offsetof(MenuEditorState_obj,showingDialog),HX_("showingDialog",ad,7e,e6,07)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuEditorState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(void *) &MenuEditorState_obj::elementosCompartidos,HX_("elementosCompartidos",73,39,70,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuEditorState_obj_sMemberFields[] = {
	HX_("elementos",e0,36,eb,c7),
	HX_("botonesUI",28,74,ce,5f),
	HX_("btnVolver",ac,48,67,1d),
	HX_("editandoTexto",00,a3,9c,f2),
	HX_("textoTemporal",24,5b,6e,14),
	HX_("info",6e,38,bb,45),
	HX_("fuenteActiva",8b,61,b7,36),
	HX_("seleccionado",8f,4e,a9,1a),
	HX_("seleccionRect",81,f3,91,2f),
	HX_("velocidad",af,9e,37,ff),
	HX_("modoActual",db,61,c8,00),
	HX_("nombreMenu",48,41,b8,4b),
	HX_("inputNombre",b3,f2,46,22),
	HX_("confirmDialog",e8,d5,94,10),
	HX_("showingDialog",ad,7e,e6,07),
	HX_("create",fc,66,0f,7c),
	HX_("mostrarFuentes",0a,dc,48,ae),
	HX_("update",09,86,05,87),
	HX_("exportarEscena",08,04,78,9b),
	HX_("guardarMenu",d5,81,56,ff),
	HX_("mostrarDialogoReemplazo",d8,ed,be,45),
	HX_("cerrarDialog",7b,71,e5,eb),
	HX_("mostrarOpcionesEstablecer",04,f6,00,70),
	HX_("establecerComoPause",38,d2,f0,0d),
	HX_("establecerComoOtro",20,bb,0c,04),
	::String(null()) };

static void MenuEditorState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuEditorState_obj::elementosCompartidos,"elementosCompartidos");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuEditorState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuEditorState_obj::elementosCompartidos,"elementosCompartidos");
};

#endif

::hx::Class MenuEditorState_obj::__mClass;

static ::String MenuEditorState_obj_sStaticFields[] = {
	HX_("elementosCompartidos",73,39,70,7a),
	::String(null())
};

void MenuEditorState_obj::__register()
{
	MenuEditorState_obj _hx_dummy;
	MenuEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.debug.MenuEditorState",5e,85,8b,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuEditorState_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuEditorState_obj::__SetStatic;
	__mClass->mMarkFunc = MenuEditorState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuEditorState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuEditorState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuEditorState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuEditorState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e9341f7f5493d482_31_boot)
HXDLIN(  31)		elementosCompartidos = ::cpp::VirtualArray_obj::__new(0);
            	}
}

} // end namespace states
} // end namespace debug
