// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_debug_CharacterEditorState
#include <states/debug/CharacterEditorState.h>
#endif
#ifndef INCLUDED_states_menu_MenuDebugState
#include <states/menu/MenuDebugState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_15_new,"states.debug.CharacterEditorState","new",0x3c7adfb4,"states.debug.CharacterEditorState.new","states/debug/CharacterEditorState.hx",15,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_44_create,"states.debug.CharacterEditorState","create",0x3401a428,"states.debug.CharacterEditorState.create","states/debug/CharacterEditorState.hx",44,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_127_createButtons,"states.debug.CharacterEditorState","createButtons",0x96e32af9,"states.debug.CharacterEditorState.createButtons","states/debug/CharacterEditorState.hx",127,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_105_createButtons,"states.debug.CharacterEditorState","createButtons",0x96e32af9,"states.debug.CharacterEditorState.createButtons","states/debug/CharacterEditorState.hx",105,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_132_loadAssets,"states.debug.CharacterEditorState","loadAssets",0x6124ba75,"states.debug.CharacterEditorState.loadAssets","states/debug/CharacterEditorState.hx",132,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_176_addAnimation,"states.debug.CharacterEditorState","addAnimation",0x46f776cf,"states.debug.CharacterEditorState.addAnimation","states/debug/CharacterEditorState.hx",176,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_198_playAnimation,"states.debug.CharacterEditorState","playAnimation",0xc9a542c4,"states.debug.CharacterEditorState.playAnimation","states/debug/CharacterEditorState.hx",198,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_205_saveCharacter,"states.debug.CharacterEditorState","saveCharacter",0x4ab76100,"states.debug.CharacterEditorState.saveCharacter","states/debug/CharacterEditorState.hx",205,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_242_loadCharacterAssets,"states.debug.CharacterEditorState","loadCharacterAssets",0x2978fcda,"states.debug.CharacterEditorState.loadCharacterAssets","states/debug/CharacterEditorState.hx",242,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_265_updateInfo,"states.debug.CharacterEditorState","updateInfo",0x5e666643,"states.debug.CharacterEditorState.updateInfo","states/debug/CharacterEditorState.hx",265,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_280_updateAnimationsList,"states.debug.CharacterEditorState","updateAnimationsList",0xf4ebcb02,"states.debug.CharacterEditorState.updateAnimationsList","states/debug/CharacterEditorState.hx",280,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_289_update,"states.debug.CharacterEditorState","update",0x3ef7c335,"states.debug.CharacterEditorState.update","states/debug/CharacterEditorState.hx",289,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_383_update,"states.debug.CharacterEditorState","update",0x3ef7c335,"states.debug.CharacterEditorState.update","states/debug/CharacterEditorState.hx",383,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_401_mostrarDialogoReemplazo,"states.debug.CharacterEditorState","mostrarDialogoReemplazo",0x76a51f2c,"states.debug.CharacterEditorState.mostrarDialogoReemplazo","states/debug/CharacterEditorState.hx",401,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_389_mostrarDialogoReemplazo,"states.debug.CharacterEditorState","mostrarDialogoReemplazo",0x76a51f2c,"states.debug.CharacterEditorState.mostrarDialogoReemplazo","states/debug/CharacterEditorState.hx",389,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_411_cerrarDialog,"states.debug.CharacterEditorState","cerrarDialog",0xe853d7a7,"states.debug.CharacterEditorState.cerrarDialog","states/debug/CharacterEditorState.hx",411,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_420_guardarArchivo,"states.debug.CharacterEditorState","guardarArchivo",0x2f21e682,"states.debug.CharacterEditorState.guardarArchivo","states/debug/CharacterEditorState.hx",420,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_432_createAnimationInputs,"states.debug.CharacterEditorState","createAnimationInputs",0x7a739405,"states.debug.CharacterEditorState.createAnimationInputs","states/debug/CharacterEditorState.hx",432,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_471_toggleLoop,"states.debug.CharacterEditorState","toggleLoop",0x3f642f44,"states.debug.CharacterEditorState.toggleLoop","states/debug/CharacterEditorState.hx",471,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_476_handleTextInput,"states.debug.CharacterEditorState","handleTextInput",0xaaa1b8a9,"states.debug.CharacterEditorState.handleTextInput","states/debug/CharacterEditorState.hx",476,0xae64b3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4b7144a7b661a6_558_loadCharacterJSON,"states.debug.CharacterEditorState","loadCharacterJSON",0xd64afe9f,"states.debug.CharacterEditorState.loadCharacterJSON","states/debug/CharacterEditorState.hx",558,0xae64b3ba)
namespace states{
namespace debug{

void CharacterEditorState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_15_new)
HXLINE(  42)		this->editingField = HX_("none",b8,12,0a,49);
HXLINE(  36)		this->animLooped = true;
HXLINE(  35)		this->animFPS = 24;
HXLINE(  34)		this->animPrefix = HX_("BFidledance",5b,21,0a,6c);
HXLINE(  33)		this->animName = HX_("idle",14,a7,b3,45);
HXLINE(  24)		this->showingDialog = false;
HXLINE(  20)		this->currentAnimation = 0;
HXLINE(  19)		this->animations = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  18)		this->characterName = HX_("MiPersonaje",cb,77,dc,cf);
HXLINE(  15)		super::__construct();
            	}

Dynamic CharacterEditorState_obj::__CreateEmpty() { return new CharacterEditorState_obj; }

void *CharacterEditorState_obj::_hx_vtable = 0;

Dynamic CharacterEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterEditorState_obj > _hx_result = new CharacterEditorState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CharacterEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x226109a4) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x226109a4;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void CharacterEditorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_44_create)
HXLINE(  45)		this->super::create();
HXLINE(  48)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  49)		bg->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-14013910,null(),null());
HXLINE(  50)		this->add(bg);
HXLINE(  53)		 ::flixel::text::FlxText titulo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_W(u"\U0001f464 CHARACTER EDITOR",04e2,ccad),null(),null());
HXLINE(  54)		titulo->setFormat(null(),24,-1,null(),null(),null(),null());
HXLINE(  55)		this->add(titulo);
HXLINE(  58)		 ::flixel::text::FlxText nameLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,50,0,HX_("Nombre:",f1,38,f2,10),null(),null());
HXLINE(  59)		nameLabel->setFormat(null(),16,-1,null(),null(),null(),null());
HXLINE(  60)		this->add(nameLabel);
HXLINE(  62)		this->nameInput =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,80,50,200,this->characterName,null(),null());
HXLINE(  63)		this->nameInput->setFormat(null(),16,-256,null(),null(),null(),null());
HXLINE(  64)		this->add(this->nameInput);
HXLINE(  67)		this->previewArea =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,100,null());
HXLINE(  68)		this->previewArea->makeGraphic(400,400,-12566464,null(),null());
HXLINE(  69)		this->add(this->previewArea);
HXLINE(  71)		 ::flixel::text::FlxText previewLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,300,80,0,HX_W(u"\U0001f441\ufe0f PREVIEW",c96f,750c),null(),null());
HXLINE(  72)		previewLabel->setFormat(null(),16,-1,null(),null(),null(),null());
HXLINE(  73)		this->add(previewLabel);
HXLINE(  76)		this->characterSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,450,250,null());
HXLINE(  77)		this->characterSprite->makeGraphic(100,100,-16711681,null(),null());
HXLINE(  78)		this->add(this->characterSprite);
HXLINE(  81)		this->infoText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,100,280,HX_("",00,00,00,00),null(),null());
HXLINE(  82)		this->infoText->setFormat(null(),12,-1,null(),null(),null(),null());
HXLINE(  83)		this->add(this->infoText);
HXLINE(  86)		this->animationsList =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,300,280,HX_("",00,00,00,00),null(),null());
HXLINE(  87)		this->animationsList->setFormat(null(),12,-16711681,null(),null(),null(),null());
HXLINE(  88)		this->add(this->animationsList);
HXLINE(  91)		this->createAnimationInputs();
HXLINE(  94)		this->createButtons();
HXLINE(  97)		this->loadCharacterAssets();
HXLINE( 100)		this->loadCharacterJSON();
HXLINE( 102)		this->updateInfo();
            	}


void CharacterEditorState_obj::createButtons(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::menu::MenuDebugState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_127_createButtons)
HXLINE( 127)				return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_127_createButtons)
HXLINE( 127)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 127)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE( 127)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_127_createButtons)
HXLINE( 127)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 127)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 127)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_105_createButtons)
HXLINE( 106)		int y = (::flixel::FlxG_obj::height - 120);
HXLINE( 108)		 ::flixel::ui::FlxButton btnLoad =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,y,HX_W(u"\U0001f4c1 Cargar PNG/XML",ec38,fc6f),this->loadAssets_dyn());
HXLINE( 109)		this->add(btnLoad);
HXLINE( 111)		 ::flixel::ui::FlxButton btnLoadJSON =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,(y + 30),HX_W(u"\U0001f4c4 Cargar JSON",f604,bbaa),this->loadCharacterJSON_dyn());
HXLINE( 112)		this->add(btnLoadJSON);
HXLINE( 114)		 ::flixel::ui::FlxButton btnAddAnim =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,y,HX_W(u"\u2795 Agregar Custom",d9f9,a55f),this->addAnimation_dyn());
HXLINE( 115)		this->add(btnAddAnim);
HXLINE( 117)		::String btnToggleLoop;
HXDLIN( 117)		if (this->animLooped) {
HXLINE( 117)			btnToggleLoop = HX_W(u"\U0001f501 Loop: S\u00ed",316f,8810);
            		}
            		else {
HXLINE( 117)			btnToggleLoop = HX_W(u"\U0001f501 Loop: No",98cf,0659);
            		}
HXDLIN( 117)		 ::flixel::ui::FlxButton btnToggleLoop1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,270,y,btnToggleLoop,this->toggleLoop_dyn());
HXLINE( 118)		this->add(btnToggleLoop1);
HXLINE( 120)		 ::flixel::ui::FlxButton btnPlayAnim =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,270,y,HX_W(u"\u25b6\ufe0f Reproducir",e23d,934b),this->playAnimation_dyn());
HXLINE( 121)		this->add(btnPlayAnim);
HXLINE( 123)		 ::flixel::ui::FlxButton btnSave =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),y,HX_W(u"\U0001f4be Guardar",e731,8347),this->saveCharacter_dyn());
HXLINE( 124)		this->add(btnSave);
HXLINE( 126)		 ::flixel::ui::FlxButton btnBack =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 100),10,HX_W(u"\u2190 Volver",2c44,1f12), ::Dynamic(new _hx_Closure_2()));
HXLINE( 129)		this->add(btnBack);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,createButtons,(void))

void CharacterEditorState_obj::loadAssets(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_132_loadAssets)
HXLINE( 133)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 134)			::String assetsPath = HX_("assets/imagen/charater",46,a5,b3,ac);
HXLINE( 135)			if (::sys::FileSystem_obj::exists(assetsPath)) {
HXLINE( 136)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(assetsPath);
HXLINE( 137)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 137)				{
HXLINE( 137)					int _g1 = 0;
HXDLIN( 137)					::Array< ::String > _g2 = files;
HXDLIN( 137)					while((_g1 < _g2->length)){
HXLINE( 137)						::String v = _g2->__get(_g1);
HXDLIN( 137)						_g1 = (_g1 + 1);
HXDLIN( 137)						if ((v.indexOf(HX_(".png",3b,2d,bd,1e),null()) != -1)) {
HXLINE( 137)							_g->push(v);
            						}
            					}
            				}
HXDLIN( 137)				::Array< ::String > pngFiles = _g;
HXLINE( 138)				::Array< ::String > _g3 = ::Array_obj< ::String >::__new(0);
HXDLIN( 138)				{
HXLINE( 138)					int _g4 = 0;
HXDLIN( 138)					::Array< ::String > _g5 = files;
HXDLIN( 138)					while((_g4 < _g5->length)){
HXLINE( 138)						::String v1 = _g5->__get(_g4);
HXDLIN( 138)						_g4 = (_g4 + 1);
HXDLIN( 138)						if ((v1.indexOf(HX_(".xml",69,3e,c3,1e),null()) != -1)) {
HXLINE( 138)							_g3->push(v1);
            						}
            					}
            				}
HXDLIN( 138)				::Array< ::String > xmlFiles = _g3;
HXLINE( 140)				bool _hx_tmp;
HXDLIN( 140)				if ((pngFiles->length > 0)) {
HXLINE( 140)					_hx_tmp = (xmlFiles->length > 0);
            				}
            				else {
HXLINE( 140)					_hx_tmp = false;
            				}
HXDLIN( 140)				if (_hx_tmp) {
HXLINE( 141)					::String pngFile = pngFiles->__get(0);
HXLINE( 142)					::String xmlFile = xmlFiles->__get(0);
HXLINE( 145)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 146)						 ::flixel::FlxSprite _hx_tmp1 = this->characterSprite;
HXDLIN( 146)						_hx_tmp1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(((assetsPath + HX_("/",2f,00,00,00)) + pngFile),((assetsPath + HX_("/",2f,00,00,00)) + xmlFile)));
HXLINE( 151)						::haxe::Log_obj::trace((((HX_W(u"\u2705 Assets cargados: ",0e08,052d) + pngFile) + HX_(", ",74,26,00,00)) + xmlFile),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),151,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadAssets",49,77,2e,01)));
HXLINE( 152)						::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
HXLINE( 155)						::haxe::Log_obj::trace(HX_W(u"\U0001f4dd Usa los campos para crear animaciones manualmente",37b2,e53d),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),155,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadAssets",49,77,2e,01)));
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g6 = _hx_e;
HXLINE( 157)							{
HXLINE( 157)								null();
            							}
HXDLIN( 157)							 ::Dynamic e = _g6;
HXDLIN( 157)							{
HXLINE( 158)								 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 158)								::String _hx_tmp3 = (HX_W(u"\u274c Error cargando atlas: ",23a3,d0f3) + ::Std_obj::string(e));
HXDLIN( 158)								_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),158,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadAssets",49,77,2e,01)));
HXLINE( 159)								::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            				else {
HXLINE( 162)					::haxe::Log_obj::trace((HX_W(u"\u26a0\ufe0f Necesitas PNG y XML en ",8e45,4463) + assetsPath),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),162,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadAssets",49,77,2e,01)));
HXLINE( 163)					::flixel::FlxG_obj::camera->flash((int)1157627648,((Float)0.3),null(),null());
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g7 = _hx_e;
HXLINE( 166)				{
HXLINE( 166)					null();
            				}
HXDLIN( 166)				 ::Dynamic e1 = _g7;
HXLINE( 167)				{
HXLINE( 167)					 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 167)					::String _hx_tmp5 = (HX_("Error: ",4e,a8,5b,b7) + ::Std_obj::string(e1));
HXDLIN( 167)					_hx_tmp4(_hx_tmp5,::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),167,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadAssets",49,77,2e,01)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 170)		this->updateInfo();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,loadAssets,(void))

void CharacterEditorState_obj::addAnimation(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_176_addAnimation)
HXDLIN( 176)		if (::hx::IsNotNull( this->characterSprite->frames )) {
HXLINE( 177)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 178)				this->characterSprite->animation->addByPrefix(this->animName,this->animPrefix,this->animFPS,this->animLooped,null(),null());
HXLINE( 179)				this->animations->push( ::Dynamic(::hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("prefix",92,d9,b6,ae),this->animPrefix)
            					->setFixed(1,HX_("fps",e9,c7,4d,00),this->animFPS)
            					->setFixed(2,HX_("name",4b,72,ff,48),this->animName)
            					->setFixed(3,HX_("looped",c3,5f,b9,61),this->animLooped)));
HXLINE( 186)				::haxe::Log_obj::trace((HX_W(u"\u2795 Animaci\u00f3n agregada: ",02c7,03a9) + this->animName),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),186,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("addAnimation",a3,10,89,4a)));
HXLINE( 187)				this->updateAnimationsList();
HXLINE( 188)				::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 190)					{
HXLINE( 190)						null();
            					}
HXDLIN( 190)					 ::Dynamic e = _g;
HXDLIN( 190)					{
HXLINE( 191)						 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 191)						::String _hx_tmp1 = (HX_W(u"\u274c Error agregando animaci\u00f3n: ",842f,13cd) + ::Std_obj::string(e));
HXDLIN( 191)						_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),191,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("addAnimation",a3,10,89,4a)));
HXLINE( 192)						::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,addAnimation,(void))

void CharacterEditorState_obj::playAnimation(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_198_playAnimation)
HXDLIN( 198)		bool _hx_tmp;
HXDLIN( 198)		if ((this->animations->length > 0)) {
HXDLIN( 198)			_hx_tmp = ::hx::IsNotNull( this->characterSprite->animation );
            		}
            		else {
HXDLIN( 198)			_hx_tmp = false;
            		}
HXDLIN( 198)		if (_hx_tmp) {
HXLINE( 199)			 ::Dynamic anim = this->animations->__get(this->currentAnimation);
HXLINE( 200)			this->characterSprite->animation->play(( (::String)(anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),null(),null(),null());
HXLINE( 201)			::haxe::Log_obj::trace( ::Dynamic((HX_W(u"\u25b6\ufe0f Reproduciendo: ",c22f,0e03) + anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic))),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),201,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("playAnimation",70,42,7a,e5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,playAnimation,(void))

void CharacterEditorState_obj::saveCharacter(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_205_saveCharacter)
HXLINE( 207)		this->characterName = this->nameInput->text;
HXLINE( 209)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 210)			::String exportPath = HX_("exports/windows/bin/assets/charater",1e,6e,38,8a);
HXLINE( 211)			if (!(::sys::FileSystem_obj::exists(exportPath))) {
HXLINE( 212)				::sys::FileSystem_obj::createDirectory(exportPath);
            			}
HXLINE( 215)			 ::Dynamic characterData =  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("animations",ef,34,1c,83),this->animations)
            				->setFixed(1,HX_("position",a9,a0,fa,ca),::Array_obj< Float >::__new(2)->init(0,this->characterSprite->x)->init(1,this->characterSprite->y))
            				->setFixed(2,HX_("name",4b,72,ff,48),this->characterName)
            				->setFixed(3,HX_("scale",8a,ce,ce,78),::Array_obj< Float >::__new(2)->init(0,this->characterSprite->scale->x)->init(1,this->characterSprite->scale->y)));
HXLINE( 222)			 ::Dynamic replacer = null();
HXDLIN( 222)			::String jsonString = ::haxe::format::JsonPrinter_obj::print(characterData,replacer,HX_("  ",00,1c,00,00));
HXLINE( 223)			::String fileName = (((exportPath + HX_("/",2f,00,00,00)) + this->characterName) + HX_(".json",56,f1,d6,c2));
HXLINE( 225)			if (::sys::FileSystem_obj::exists(fileName)) {
HXLINE( 226)				this->mostrarDialogoReemplazo(fileName,characterData);
HXLINE( 227)				return;
            			}
HXLINE( 229)			::sys::io::File_obj::saveContent(fileName,jsonString);
HXLINE( 231)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Personaje guardado: ",4e6b,9961) + fileName),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),231,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("saveCharacter",ac,60,8c,66)));
HXLINE( 232)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 234)				{
HXLINE( 234)					null();
            				}
HXDLIN( 234)				 ::Dynamic e = _g;
HXDLIN( 234)				{
HXLINE( 235)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 235)					::String _hx_tmp1 = (HX_W(u"\u274c Error guardando: ",af5c,7da9) + ::Std_obj::string(e));
HXDLIN( 235)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),235,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("saveCharacter",ac,60,8c,66)));
HXLINE( 236)					::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,saveCharacter,(void))

void CharacterEditorState_obj::loadCharacterAssets(){
            	HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_242_loadCharacterAssets)
HXDLIN( 242)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 243)			::String exportPath = HX_("exports/windows/bin/assets/charater",1e,6e,38,8a);
HXLINE( 244)			if (::sys::FileSystem_obj::exists(exportPath)) {
HXLINE( 245)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(exportPath);
HXLINE( 246)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 246)				{
HXLINE( 246)					int _g1 = 0;
HXDLIN( 246)					::Array< ::String > _g2 = files;
HXDLIN( 246)					while((_g1 < _g2->length)){
HXLINE( 246)						::String v = _g2->__get(_g1);
HXDLIN( 246)						_g1 = (_g1 + 1);
HXDLIN( 246)						if ((v.indexOf(HX_(".json",56,f1,d6,c2),null()) != -1)) {
HXLINE( 246)							_g->push(v);
            						}
            					}
            				}
HXDLIN( 246)				::Array< ::String > jsonFiles = _g;
HXLINE( 248)				if ((jsonFiles->length > 0)) {
HXLINE( 249)					::String latestFile = jsonFiles->__get((jsonFiles->length - 1));
HXLINE( 250)					::String content = ::sys::io::File_obj::getContent(((exportPath + HX_("/",2f,00,00,00)) + latestFile));
HXLINE( 251)					 ::Dynamic data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,content)->doParse();
HXLINE( 253)					this->characterName = ( (::String)(data->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE( 254)					this->animations = ( (::Array< ::Dynamic>)(data->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) );
HXLINE( 256)					::haxe::Log_obj::trace((HX_W(u"\U0001f4c1 Personaje cargado: ",8ee3,9d2a) + latestFile),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),256,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadCharacterAssets",86,05,03,ae)));
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g3 = _hx_e;
HXLINE( 259)				{
HXLINE( 259)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,loadCharacterAssets,(void))

void CharacterEditorState_obj::updateInfo(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_265_updateInfo)
HXLINE( 277)		::String _hx_tmp;
HXDLIN( 277)		if (this->animLooped) {
HXLINE( 277)			_hx_tmp = HX_W(u"S\u00ed",a59d,003f);
            		}
            		else {
HXLINE( 277)			_hx_tmp = HX_("No",61,44,00,00);
            		}
HXLINE( 265)		this->infoText->set_text((((((((((((((((((((((((HX_W(u"\U0001f464 INFORMACI\u00d3N\n",fc4c,5437) + HX_("Nombre: ",0f,9a,ff,c2)) + this->characterName) + HX_("\n",0a,00,00,00)) + HX_("Animaciones: ",69,7f,23,c6)) + this->animations->length) + HX_("\n",0a,00,00,00)) + HX_W(u"\n\U0001f4dd CONTROLES:\n",8dbe,1f23)) + HX_("1,2,3,4 - Cambiar anim\n",d3,5f,4b,0e)) + HX_("SPACE - Reproducir\n",dc,93,10,46)) + HX_W(u"\u2191\u2193 - Cambiar FPS\n",d90b,17b8)) + HX_W(u"\u2190\u2192 - Cambiar escala\n",e39f,3052)) + HX_W(u"\n\u2699\ufe0f NUEVA ANIMACI\u00d3N:\n",2020,9a32)) + HX_("Nombre: ",0f,9a,ff,c2)) + this->animName) + HX_("\n",0a,00,00,00)) + HX_("Prefix: ",d8,d0,ff,c6)) + this->animPrefix) + HX_("\n",0a,00,00,00)) + HX_("FPS: ",af,da,2c,83)) + this->animFPS) + HX_("\n",0a,00,00,00)) + HX_("Loop: ",2a,ae,4d,96)) + _hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,updateInfo,(void))

void CharacterEditorState_obj::updateAnimationsList(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_280_updateAnimationsList)
HXLINE( 281)		this->animationsList->set_text(HX_W(u"\U0001f3ad ANIMACIONES:\n",8381,77fd));
HXLINE( 282)		{
HXLINE( 282)			int _g = 0;
HXDLIN( 282)			int _g1 = this->animations->length;
HXDLIN( 282)			while((_g < _g1)){
HXLINE( 282)				_g = (_g + 1);
HXDLIN( 282)				int i = (_g - 1);
HXLINE( 283)				 ::Dynamic anim = this->animations->__get(i);
HXLINE( 284)				::String marker;
HXDLIN( 284)				if ((i == this->currentAnimation)) {
HXLINE( 284)					marker = HX_W(u"\u25ba ",ac9a,95d4);
            				}
            				else {
HXLINE( 284)					marker = HX_("  ",00,1c,00,00);
            				}
HXLINE( 285)				 ::flixel::text::FlxText fh = this->animationsList;
HXDLIN( 285)				fh->set_text(( (::String)((fh->text + ((((marker + anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + anim->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) + HX_(" fps)\n",ca,03,aa,d0)))) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,updateAnimationsList,(void))

void CharacterEditorState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_289_update)
HXLINE( 290)		this->super::update(elapsed);
HXLINE( 293)		bool _hx_tmp;
HXDLIN( 293)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 293)		if (_this->keyManager->checkStatusUnsafe(49,_this->status)) {
HXLINE( 293)			_hx_tmp = (this->animations->length > 0);
            		}
            		else {
HXLINE( 293)			_hx_tmp = false;
            		}
HXDLIN( 293)		if (_hx_tmp) {
HXLINE( 294)			this->currentAnimation = 0;
HXLINE( 295)			this->playAnimation();
            		}
HXLINE( 297)		bool _hx_tmp1;
HXDLIN( 297)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 297)		if (_this1->keyManager->checkStatusUnsafe(50,_this1->status)) {
HXLINE( 297)			_hx_tmp1 = (this->animations->length > 1);
            		}
            		else {
HXLINE( 297)			_hx_tmp1 = false;
            		}
HXDLIN( 297)		if (_hx_tmp1) {
HXLINE( 298)			this->currentAnimation = 1;
HXLINE( 299)			this->playAnimation();
            		}
HXLINE( 301)		bool _hx_tmp2;
HXDLIN( 301)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 301)		if (_this2->keyManager->checkStatusUnsafe(51,_this2->status)) {
HXLINE( 301)			_hx_tmp2 = (this->animations->length > 2);
            		}
            		else {
HXLINE( 301)			_hx_tmp2 = false;
            		}
HXDLIN( 301)		if (_hx_tmp2) {
HXLINE( 302)			this->currentAnimation = 2;
HXLINE( 303)			this->playAnimation();
            		}
HXLINE( 305)		bool _hx_tmp3;
HXDLIN( 305)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 305)		if (_this3->keyManager->checkStatusUnsafe(52,_this3->status)) {
HXLINE( 305)			_hx_tmp3 = (this->animations->length > 3);
            		}
            		else {
HXLINE( 305)			_hx_tmp3 = false;
            		}
HXDLIN( 305)		if (_hx_tmp3) {
HXLINE( 306)			this->currentAnimation = 3;
HXLINE( 307)			this->playAnimation();
            		}
HXLINE( 311)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 311)		if (_this4->keyManager->checkStatusUnsafe(32,_this4->status)) {
HXLINE( 312)			this->playAnimation();
            		}
HXLINE( 316)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 316)		if (_this5->keyManager->checkStatusUnsafe(38,_this5->status)) {
HXLINE( 317)			 ::states::debug::CharacterEditorState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 317)			_hx_tmp4->animFPS = (_hx_tmp4->animFPS + 6);
HXLINE( 318)			if ((this->animFPS > 60)) {
HXLINE( 318)				this->animFPS = 60;
            			}
HXLINE( 319)			this->updateInfo();
            		}
HXLINE( 321)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 321)		if (_this6->keyManager->checkStatusUnsafe(40,_this6->status)) {
HXLINE( 322)			 ::states::debug::CharacterEditorState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 322)			_hx_tmp5->animFPS = (_hx_tmp5->animFPS - 6);
HXLINE( 323)			if ((this->animFPS < 6)) {
HXLINE( 323)				this->animFPS = 6;
            			}
HXLINE( 324)			this->updateInfo();
            		}
HXLINE( 328)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 328)		if (_this7->keyManager->checkStatusUnsafe(37,_this7->status)) {
HXLINE( 329)			 ::flixel::FlxSprite fh = this->characterSprite;
HXDLIN( 329)			fh->scale->set_x((fh->scale->x - ((Float)0.1)));
HXLINE( 330)			 ::flixel::FlxSprite fh1 = this->characterSprite;
HXDLIN( 330)			fh1->scale->set_y((fh1->scale->y - ((Float)0.1)));
HXLINE( 331)			if ((this->characterSprite->scale->x < ((Float)0.1))) {
HXLINE( 332)				this->characterSprite->scale->set_x(((Float)0.1));
HXLINE( 333)				this->characterSprite->scale->set_y(((Float)0.1));
            			}
            		}
HXLINE( 336)		 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 336)		if (_this8->keyManager->checkStatusUnsafe(39,_this8->status)) {
HXLINE( 337)			 ::flixel::FlxSprite fh2 = this->characterSprite;
HXDLIN( 337)			fh2->scale->set_x((fh2->scale->x + ((Float)0.1)));
HXLINE( 338)			 ::flixel::FlxSprite fh3 = this->characterSprite;
HXDLIN( 338)			fh3->scale->set_y((fh3->scale->y + ((Float)0.1)));
HXLINE( 339)			if ((this->characterSprite->scale->x > ((Float)3.0))) {
HXLINE( 340)				this->characterSprite->scale->set_x(((Float)3.0));
HXLINE( 341)				this->characterSprite->scale->set_y(((Float)3.0));
            			}
            		}
HXLINE( 346)		this->updateAnimationsList();
HXLINE( 349)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 350)			 ::flixel::text::FlxText _hx_tmp6 = this->nameField;
HXDLIN( 350)			if (_hx_tmp6->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 351)				this->editingField = HX_("name",4b,72,ff,48);
HXLINE( 352)				::haxe::Log_obj::trace(HX_W(u"\u270f\ufe0f Editando nombre de animaci\u00f3n",971f,437d),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),352,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("update",09,86,05,87)));
            			}
            			else {
HXLINE( 353)				 ::flixel::text::FlxText _hx_tmp7 = this->prefixField;
HXDLIN( 353)				if (_hx_tmp7->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 354)					this->editingField = HX_("prefix",92,d9,b6,ae);
HXLINE( 355)					::haxe::Log_obj::trace(HX_W(u"\u270f\ufe0f Editando prefix de animaci\u00f3n",5768,a619),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),355,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("update",09,86,05,87)));
            				}
            				else {
HXLINE( 356)					 ::flixel::text::FlxText _hx_tmp8 = this->fpsField;
HXDLIN( 356)					if (_hx_tmp8->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 357)						this->editingField = HX_("fps",e9,c7,4d,00);
HXLINE( 358)						::haxe::Log_obj::trace(HX_W(u"\u270f\ufe0f Editando FPS",5e3a,5a9c),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),358,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("update",09,86,05,87)));
            					}
            				}
            			}
            		}
HXLINE( 363)		 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 363)		if (_this9->keyManager->checkStatusUnsafe(78,_this9->status)) {
HXLINE( 364)			this->editingField = HX_("name",4b,72,ff,48);
HXLINE( 365)			::haxe::Log_obj::trace(HX_W(u"\u270f\ufe0f Editando nombre de animaci\u00f3n",971f,437d),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),365,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("update",09,86,05,87)));
            		}
HXLINE( 367)		 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 367)		if (_this10->keyManager->checkStatusUnsafe(80,_this10->status)) {
HXLINE( 368)			this->editingField = HX_("prefix",92,d9,b6,ae);
HXLINE( 369)			::haxe::Log_obj::trace(HX_W(u"\u270f\ufe0f Editando prefix de animaci\u00f3n",5768,a619),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),369,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("update",09,86,05,87)));
            		}
HXLINE( 373)		this->handleTextInput();
HXLINE( 375)		 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 375)		if (_this11->keyManager->checkStatusUnsafe(27,_this11->status)) {
HXLINE( 376)			if ((this->editingField != HX_("none",b8,12,0a,49))) {
HXLINE( 377)				this->editingField = HX_("none",b8,12,0a,49);
HXLINE( 378)				::haxe::Log_obj::trace(HX_W(u"\u274c Edici\u00f3n cancelada",d401,4ec2),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),378,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("update",09,86,05,87)));
            			}
            			else {
HXLINE( 380)				if (this->showingDialog) {
HXLINE( 381)					this->cerrarDialog();
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            					 ::states::menu::MenuDebugState _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_383_update)
HXLINE( 383)						return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            					}
            					HX_END_LOCAL_FUNC0(return)

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_383_update)
HXLINE( 383)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 383)							::flixel::FlxG_obj::game->_nextState = nextState;
            						}
            						else {
HXLINE( 383)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 383)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 383)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 383)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            				}
            			}
            		}
            	}


void CharacterEditorState_obj::mostrarDialogoReemplazo(::String fileName, ::Dynamic data){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::states::debug::CharacterEditorState,_gthis, ::Dynamic,data,::String,fileName) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_401_mostrarDialogoReemplazo)
HXLINE( 402)			_gthis->guardarArchivo(fileName,data);
HXLINE( 403)			_gthis->cerrarDialog();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_389_mostrarDialogoReemplazo)
HXDLIN( 389)		 ::states::debug::CharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 390)		this->showingDialog = true;
HXLINE( 392)		this->confirmDialog =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(200) )),((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(100) )),null());
HXLINE( 393)		this->confirmDialog->makeGraphic(400,200,-587202560,null(),null());
HXLINE( 394)		this->add(this->confirmDialog);
HXLINE( 396)		 ::flixel::text::FlxText dialogText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 20),(this->confirmDialog->y + 20),360,((HX_("El personaje '",95,2d,00,21) + this->characterName) + HX_W(u".json\' ya existe.\n\n\u00bfQuieres reemplazarlo?",20a7,ba8a)),null(),null());
HXLINE( 398)		dialogText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 399)		this->add(dialogText);
HXLINE( 401)		 ::flixel::ui::FlxButton btnSi =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 50),(this->confirmDialog->y + 120),HX_W(u"S\u00cd",a57d,003f), ::Dynamic(new _hx_Closure_0(_gthis,data,fileName)));
HXLINE( 405)		this->add(btnSi);
HXLINE( 407)		 ::flixel::ui::FlxButton btnNo =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 250),(this->confirmDialog->y + 120),HX_("NO",41,44,00,00),this->cerrarDialog_dyn());
HXLINE( 408)		this->add(btnNo);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CharacterEditorState_obj,mostrarDialogoReemplazo,(void))

void CharacterEditorState_obj::cerrarDialog(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_411_cerrarDialog)
HXLINE( 412)		this->showingDialog = false;
HXLINE( 413)		if (::hx::IsNotNull( this->confirmDialog )) {
HXLINE( 414)			this->remove(this->confirmDialog,null());
HXLINE( 415)			this->confirmDialog = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,cerrarDialog,(void))

void CharacterEditorState_obj::guardarArchivo(::String fileName, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_420_guardarArchivo)
HXDLIN( 420)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 421)			 ::Dynamic replacer = null();
HXDLIN( 421)			::String jsonString = ::haxe::format::JsonPrinter_obj::print(data,replacer,HX_("  ",00,1c,00,00));
HXLINE( 422)			::sys::io::File_obj::saveContent(fileName,jsonString);
HXLINE( 424)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Personaje guardado: ",4e6b,9961) + fileName),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),424,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("guardarArchivo",56,9d,ac,6d)));
HXLINE( 425)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 426)				{
HXLINE( 426)					null();
            				}
HXDLIN( 426)				 ::Dynamic e = _g;
HXDLIN( 426)				{
HXLINE( 427)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 427)					::String _hx_tmp1 = (HX_W(u"\u274c Error guardando: ",af5c,7da9) + ::Std_obj::string(e));
HXDLIN( 427)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),427,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("guardarArchivo",56,9d,ac,6d)));
HXLINE( 428)					::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(CharacterEditorState_obj,guardarArchivo,(void))

void CharacterEditorState_obj::createAnimationInputs(){
            	HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_432_createAnimationInputs)
HXLINE( 433)		int startY = 450;
HXLINE( 436)		 ::flixel::text::FlxText nameLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,startY,0,HX_("Nombre:",f1,38,f2,10),null(),null());
HXLINE( 437)		nameLabel->setFormat(null(),14,-1,null(),null(),null(),null());
HXLINE( 438)		this->add(nameLabel);
HXLINE( 440)		this->nameField =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,80,startY,200,this->animName,null(),null());
HXLINE( 441)		this->nameField->setFormat(null(),14,-256,null(),null(),null(),null());
HXLINE( 442)		{
HXLINE( 442)			 ::flixel::text::FlxText _this = this->nameField;
HXDLIN( 442)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 442)			_this->set_borderColor(-16777216);
HXDLIN( 442)			_this->set_borderSize(( (Float)(1) ));
HXDLIN( 442)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 443)		this->add(this->nameField);
HXLINE( 446)		 ::flixel::text::FlxText prefixLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(startY + 25),0,HX_("Prefix:",48,ae,98,fe),null(),null());
HXLINE( 447)		prefixLabel->setFormat(null(),14,-1,null(),null(),null(),null());
HXLINE( 448)		this->add(prefixLabel);
HXLINE( 450)		this->prefixField =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,80,(startY + 25),200,this->animPrefix,null(),null());
HXLINE( 451)		this->prefixField->setFormat(null(),14,-256,null(),null(),null(),null());
HXLINE( 452)		{
HXLINE( 452)			 ::flixel::text::FlxText _this1 = this->prefixField;
HXDLIN( 452)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 452)			_this1->set_borderColor(-16777216);
HXDLIN( 452)			_this1->set_borderSize(( (Float)(1) ));
HXDLIN( 452)			_this1->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 453)		this->add(this->prefixField);
HXLINE( 456)		 ::flixel::text::FlxText fpsLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(startY + 50),0,HX_("FPS:",51,ec,81,2e),null(),null());
HXLINE( 457)		fpsLabel->setFormat(null(),14,-1,null(),null(),null(),null());
HXLINE( 458)		this->add(fpsLabel);
HXLINE( 460)		this->fpsField =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,80,(startY + 50),200,::Std_obj::string(this->animFPS),null(),null());
HXLINE( 461)		this->fpsField->setFormat(null(),14,-256,null(),null(),null(),null());
HXLINE( 462)		{
HXLINE( 462)			 ::flixel::text::FlxText _this2 = this->fpsField;
HXDLIN( 462)			_this2->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 462)			_this2->set_borderColor(-16777216);
HXDLIN( 462)			_this2->set_borderSize(( (Float)(1) ));
HXDLIN( 462)			_this2->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 463)		this->add(this->fpsField);
HXLINE( 466)		 ::flixel::text::FlxText instrucciones =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(startY + 80),280,HX_("Ejemplos de prefix:\n- BFidledance\n- BFNOTELEFT\n- BFNOTERIGHT\n\nClick en campos para editar",b6,5b,f4,6f),null(),null());
HXLINE( 467)		instrucciones->setFormat(null(),10,-8355712,null(),null(),null(),null());
HXLINE( 468)		this->add(instrucciones);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,createAnimationInputs,(void))

void CharacterEditorState_obj::toggleLoop(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_471_toggleLoop)
HXLINE( 472)		this->animLooped = !(this->animLooped);
HXLINE( 473)		::String _hx_tmp;
HXDLIN( 473)		if (this->animLooped) {
HXLINE( 473)			_hx_tmp = HX_("Activado",ed,c9,5d,bf);
            		}
            		else {
HXLINE( 473)			_hx_tmp = HX_("Desactivado",7f,01,94,c0);
            		}
HXDLIN( 473)		::haxe::Log_obj::trace((HX_W(u"\U0001f501 Loop: ",bcee,cdbd) + _hx_tmp),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),473,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("toggleLoop",18,ec,6d,df)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,toggleLoop,(void))

void CharacterEditorState_obj::handleTextInput(){
            	HX_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_476_handleTextInput)
HXLINE( 477)		if ((this->editingField == HX_("none",b8,12,0a,49))) {
HXLINE( 477)			return;
            		}
HXLINE( 480)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 480)		if (_this->keyManager->checkStatusUnsafe(13,_this->status)) {
HXLINE( 481)			::String _hx_switch_0 = this->editingField;
            			if (  (_hx_switch_0==HX_("name",4b,72,ff,48)) ){
HXLINE( 483)				this->animName = this->nameField->text;
HXLINE( 484)				::haxe::Log_obj::trace((HX_W(u"\u2713 Nombre actualizado: ",87e3,e75a) + this->animName),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),484,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("handleTextInput",55,fb,76,25)));
HXLINE( 482)				goto _hx_goto_26;
            			}
            			if (  (_hx_switch_0==HX_("prefix",92,d9,b6,ae)) ){
HXLINE( 486)				this->animPrefix = this->prefixField->text;
HXLINE( 487)				::haxe::Log_obj::trace((HX_W(u"\u2713 Prefix actualizado: ",482c,49f6) + this->animPrefix),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),487,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("handleTextInput",55,fb,76,25)));
HXLINE( 485)				goto _hx_goto_26;
            			}
            			_hx_goto_26:;
HXLINE( 489)			this->editingField = HX_("none",b8,12,0a,49);
HXLINE( 490)			return;
            		}
HXLINE( 494)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 494)		if (_this1->keyManager->checkStatusUnsafe(8,_this1->status)) {
HXLINE( 495)			::String _hx_switch_1 = this->editingField;
            			if (  (_hx_switch_1==HX_("name",4b,72,ff,48)) ){
HXLINE( 497)				if ((this->nameField->text.length > 0)) {
HXLINE( 498)					 ::flixel::text::FlxText _hx_tmp = this->nameField;
HXDLIN( 498)					_hx_tmp->set_text(this->nameField->text.substr(0,(this->nameField->text.length - 1)));
            				}
HXLINE( 497)				goto _hx_goto_27;
            			}
            			if (  (_hx_switch_1==HX_("prefix",92,d9,b6,ae)) ){
HXLINE( 501)				if ((this->prefixField->text.length > 0)) {
HXLINE( 502)					 ::flixel::text::FlxText _hx_tmp1 = this->prefixField;
HXDLIN( 502)					_hx_tmp1->set_text(this->prefixField->text.substr(0,(this->prefixField->text.length - 1)));
            				}
HXLINE( 501)				goto _hx_goto_27;
            			}
            			_hx_goto_27:;
            		}
HXLINE( 508)		::String input = HX_("",00,00,00,00);
HXLINE( 509)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 509)		if (_this2->keyManager->checkStatusUnsafe(65,_this2->status)) {
HXLINE( 509)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 509)			if (_this3->keyManager->checkStatusUnsafe(16,_this3->status)) {
HXLINE( 509)				input = HX_("A",41,00,00,00);
            			}
            			else {
HXLINE( 509)				input = HX_("a",61,00,00,00);
            			}
            		}
            		else {
HXLINE( 510)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 510)			if (_this4->keyManager->checkStatusUnsafe(66,_this4->status)) {
HXLINE( 510)				 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 510)				if (_this5->keyManager->checkStatusUnsafe(16,_this5->status)) {
HXLINE( 510)					input = HX_("B",42,00,00,00);
            				}
            				else {
HXLINE( 510)					input = HX_("b",62,00,00,00);
            				}
            			}
            			else {
HXLINE( 511)				 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 511)				if (_this6->keyManager->checkStatusUnsafe(67,_this6->status)) {
HXLINE( 511)					 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 511)					if (_this7->keyManager->checkStatusUnsafe(16,_this7->status)) {
HXLINE( 511)						input = HX_("C",43,00,00,00);
            					}
            					else {
HXLINE( 511)						input = HX_("c",63,00,00,00);
            					}
            				}
            				else {
HXLINE( 512)					 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 512)					if (_this8->keyManager->checkStatusUnsafe(68,_this8->status)) {
HXLINE( 512)						 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 512)						if (_this9->keyManager->checkStatusUnsafe(16,_this9->status)) {
HXLINE( 512)							input = HX_("D",44,00,00,00);
            						}
            						else {
HXLINE( 512)							input = HX_("d",64,00,00,00);
            						}
            					}
            					else {
HXLINE( 513)						 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 513)						if (_this10->keyManager->checkStatusUnsafe(69,_this10->status)) {
HXLINE( 513)							 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 513)							if (_this11->keyManager->checkStatusUnsafe(16,_this11->status)) {
HXLINE( 513)								input = HX_("E",45,00,00,00);
            							}
            							else {
HXLINE( 513)								input = HX_("e",65,00,00,00);
            							}
            						}
            						else {
HXLINE( 514)							 ::flixel::input::keyboard::FlxKeyList _this12 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 514)							if (_this12->keyManager->checkStatusUnsafe(70,_this12->status)) {
HXLINE( 514)								 ::flixel::input::keyboard::FlxKeyList _this13 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 514)								if (_this13->keyManager->checkStatusUnsafe(16,_this13->status)) {
HXLINE( 514)									input = HX_("F",46,00,00,00);
            								}
            								else {
HXLINE( 514)									input = HX_("f",66,00,00,00);
            								}
            							}
            							else {
HXLINE( 515)								 ::flixel::input::keyboard::FlxKeyList _this14 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 515)								if (_this14->keyManager->checkStatusUnsafe(71,_this14->status)) {
HXLINE( 515)									 ::flixel::input::keyboard::FlxKeyList _this15 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 515)									if (_this15->keyManager->checkStatusUnsafe(16,_this15->status)) {
HXLINE( 515)										input = HX_("G",47,00,00,00);
            									}
            									else {
HXLINE( 515)										input = HX_("g",67,00,00,00);
            									}
            								}
            								else {
HXLINE( 516)									 ::flixel::input::keyboard::FlxKeyList _this16 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 516)									if (_this16->keyManager->checkStatusUnsafe(72,_this16->status)) {
HXLINE( 516)										 ::flixel::input::keyboard::FlxKeyList _this17 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 516)										if (_this17->keyManager->checkStatusUnsafe(16,_this17->status)) {
HXLINE( 516)											input = HX_("H",48,00,00,00);
            										}
            										else {
HXLINE( 516)											input = HX_("h",68,00,00,00);
            										}
            									}
            									else {
HXLINE( 517)										 ::flixel::input::keyboard::FlxKeyList _this18 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 517)										if (_this18->keyManager->checkStatusUnsafe(73,_this18->status)) {
HXLINE( 517)											 ::flixel::input::keyboard::FlxKeyList _this19 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 517)											if (_this19->keyManager->checkStatusUnsafe(16,_this19->status)) {
HXLINE( 517)												input = HX_("I",49,00,00,00);
            											}
            											else {
HXLINE( 517)												input = HX_("i",69,00,00,00);
            											}
            										}
            										else {
HXLINE( 518)											 ::flixel::input::keyboard::FlxKeyList _this20 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 518)											if (_this20->keyManager->checkStatusUnsafe(74,_this20->status)) {
HXLINE( 518)												 ::flixel::input::keyboard::FlxKeyList _this21 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 518)												if (_this21->keyManager->checkStatusUnsafe(16,_this21->status)) {
HXLINE( 518)													input = HX_("J",4a,00,00,00);
            												}
            												else {
HXLINE( 518)													input = HX_("j",6a,00,00,00);
            												}
            											}
            											else {
HXLINE( 519)												 ::flixel::input::keyboard::FlxKeyList _this22 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 519)												if (_this22->keyManager->checkStatusUnsafe(75,_this22->status)) {
HXLINE( 519)													 ::flixel::input::keyboard::FlxKeyList _this23 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 519)													if (_this23->keyManager->checkStatusUnsafe(16,_this23->status)) {
HXLINE( 519)														input = HX_("K",4b,00,00,00);
            													}
            													else {
HXLINE( 519)														input = HX_("k",6b,00,00,00);
            													}
            												}
            												else {
HXLINE( 520)													 ::flixel::input::keyboard::FlxKeyList _this24 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 520)													if (_this24->keyManager->checkStatusUnsafe(76,_this24->status)) {
HXLINE( 520)														 ::flixel::input::keyboard::FlxKeyList _this25 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 520)														if (_this25->keyManager->checkStatusUnsafe(16,_this25->status)) {
HXLINE( 520)															input = HX_("L",4c,00,00,00);
            														}
            														else {
HXLINE( 520)															input = HX_("l",6c,00,00,00);
            														}
            													}
            													else {
HXLINE( 521)														 ::flixel::input::keyboard::FlxKeyList _this26 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 521)														if (_this26->keyManager->checkStatusUnsafe(77,_this26->status)) {
HXLINE( 521)															 ::flixel::input::keyboard::FlxKeyList _this27 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 521)															if (_this27->keyManager->checkStatusUnsafe(16,_this27->status)) {
HXLINE( 521)																input = HX_("M",4d,00,00,00);
            															}
            															else {
HXLINE( 521)																input = HX_("m",6d,00,00,00);
            															}
            														}
            														else {
HXLINE( 522)															 ::flixel::input::keyboard::FlxKeyList _this28 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 522)															if (_this28->keyManager->checkStatusUnsafe(78,_this28->status)) {
HXLINE( 522)																 ::flixel::input::keyboard::FlxKeyList _this29 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 522)																if (_this29->keyManager->checkStatusUnsafe(16,_this29->status)) {
HXLINE( 522)																	input = HX_("N",4e,00,00,00);
            																}
            																else {
HXLINE( 522)																	input = HX_("n",6e,00,00,00);
            																}
            															}
            															else {
HXLINE( 523)																 ::flixel::input::keyboard::FlxKeyList _this30 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 523)																if (_this30->keyManager->checkStatusUnsafe(79,_this30->status)) {
HXLINE( 523)																	 ::flixel::input::keyboard::FlxKeyList _this31 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 523)																	if (_this31->keyManager->checkStatusUnsafe(16,_this31->status)) {
HXLINE( 523)																		input = HX_("O",4f,00,00,00);
            																	}
            																	else {
HXLINE( 523)																		input = HX_("o",6f,00,00,00);
            																	}
            																}
            																else {
HXLINE( 524)																	 ::flixel::input::keyboard::FlxKeyList _this32 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 524)																	if (_this32->keyManager->checkStatusUnsafe(80,_this32->status)) {
HXLINE( 524)																		 ::flixel::input::keyboard::FlxKeyList _this33 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 524)																		if (_this33->keyManager->checkStatusUnsafe(16,_this33->status)) {
HXLINE( 524)																			input = HX_("P",50,00,00,00);
            																		}
            																		else {
HXLINE( 524)																			input = HX_("p",70,00,00,00);
            																		}
            																	}
            																	else {
HXLINE( 525)																		 ::flixel::input::keyboard::FlxKeyList _this34 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 525)																		if (_this34->keyManager->checkStatusUnsafe(81,_this34->status)) {
HXLINE( 525)																			 ::flixel::input::keyboard::FlxKeyList _this35 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 525)																			if (_this35->keyManager->checkStatusUnsafe(16,_this35->status)) {
HXLINE( 525)																				input = HX_("Q",51,00,00,00);
            																			}
            																			else {
HXLINE( 525)																				input = HX_("q",71,00,00,00);
            																			}
            																		}
            																		else {
HXLINE( 526)																			 ::flixel::input::keyboard::FlxKeyList _this36 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 526)																			if (_this36->keyManager->checkStatusUnsafe(82,_this36->status)) {
HXLINE( 526)																				 ::flixel::input::keyboard::FlxKeyList _this37 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 526)																				if (_this37->keyManager->checkStatusUnsafe(16,_this37->status)) {
HXLINE( 526)																					input = HX_("R",52,00,00,00);
            																				}
            																				else {
HXLINE( 526)																					input = HX_("r",72,00,00,00);
            																				}
            																			}
            																			else {
HXLINE( 527)																				 ::flixel::input::keyboard::FlxKeyList _this38 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 527)																				if (_this38->keyManager->checkStatusUnsafe(83,_this38->status)) {
HXLINE( 527)																					 ::flixel::input::keyboard::FlxKeyList _this39 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 527)																					if (_this39->keyManager->checkStatusUnsafe(16,_this39->status)) {
HXLINE( 527)																						input = HX_("S",53,00,00,00);
            																					}
            																					else {
HXLINE( 527)																						input = HX_("s",73,00,00,00);
            																					}
            																				}
            																				else {
HXLINE( 528)																					 ::flixel::input::keyboard::FlxKeyList _this40 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 528)																					if (_this40->keyManager->checkStatusUnsafe(84,_this40->status)) {
HXLINE( 528)																						 ::flixel::input::keyboard::FlxKeyList _this41 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 528)																						if (_this41->keyManager->checkStatusUnsafe(16,_this41->status)) {
HXLINE( 528)																							input = HX_("T",54,00,00,00);
            																						}
            																						else {
HXLINE( 528)																							input = HX_("t",74,00,00,00);
            																						}
            																					}
            																					else {
HXLINE( 529)																						 ::flixel::input::keyboard::FlxKeyList _this42 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 529)																						if (_this42->keyManager->checkStatusUnsafe(85,_this42->status)) {
HXLINE( 529)																							 ::flixel::input::keyboard::FlxKeyList _this43 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 529)																							if (_this43->keyManager->checkStatusUnsafe(16,_this43->status)) {
HXLINE( 529)																								input = HX_("U",55,00,00,00);
            																							}
            																							else {
HXLINE( 529)																								input = HX_("u",75,00,00,00);
            																							}
            																						}
            																						else {
HXLINE( 530)																							 ::flixel::input::keyboard::FlxKeyList _this44 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 530)																							if (_this44->keyManager->checkStatusUnsafe(86,_this44->status)) {
HXLINE( 530)																								 ::flixel::input::keyboard::FlxKeyList _this45 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 530)																								if (_this45->keyManager->checkStatusUnsafe(16,_this45->status)) {
HXLINE( 530)																									input = HX_("V",56,00,00,00);
            																								}
            																								else {
HXLINE( 530)																									input = HX_("v",76,00,00,00);
            																								}
            																							}
            																							else {
HXLINE( 531)																								 ::flixel::input::keyboard::FlxKeyList _this46 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 531)																								if (_this46->keyManager->checkStatusUnsafe(87,_this46->status)) {
HXLINE( 531)																									 ::flixel::input::keyboard::FlxKeyList _this47 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 531)																									if (_this47->keyManager->checkStatusUnsafe(16,_this47->status)) {
HXLINE( 531)																										input = HX_("W",57,00,00,00);
            																									}
            																									else {
HXLINE( 531)																										input = HX_("w",77,00,00,00);
            																									}
            																								}
            																								else {
HXLINE( 532)																									 ::flixel::input::keyboard::FlxKeyList _this48 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 532)																									if (_this48->keyManager->checkStatusUnsafe(88,_this48->status)) {
HXLINE( 532)																										 ::flixel::input::keyboard::FlxKeyList _this49 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 532)																										if (_this49->keyManager->checkStatusUnsafe(16,_this49->status)) {
HXLINE( 532)																											input = HX_("X",58,00,00,00);
            																										}
            																										else {
HXLINE( 532)																											input = HX_("x",78,00,00,00);
            																										}
            																									}
            																									else {
HXLINE( 533)																										 ::flixel::input::keyboard::FlxKeyList _this50 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 533)																										if (_this50->keyManager->checkStatusUnsafe(89,_this50->status)) {
HXLINE( 533)																											 ::flixel::input::keyboard::FlxKeyList _this51 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 533)																											if (_this51->keyManager->checkStatusUnsafe(16,_this51->status)) {
HXLINE( 533)																												input = HX_("Y",59,00,00,00);
            																											}
            																											else {
HXLINE( 533)																												input = HX_("y",79,00,00,00);
            																											}
            																										}
            																										else {
HXLINE( 534)																											 ::flixel::input::keyboard::FlxKeyList _this52 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 534)																											if (_this52->keyManager->checkStatusUnsafe(90,_this52->status)) {
HXLINE( 534)																												 ::flixel::input::keyboard::FlxKeyList _this53 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 534)																												if (_this53->keyManager->checkStatusUnsafe(16,_this53->status)) {
HXLINE( 534)																													input = HX_("Z",5a,00,00,00);
            																												}
            																												else {
HXLINE( 534)																													input = HX_("z",7a,00,00,00);
            																												}
            																											}
            																											else {
HXLINE( 535)																												 ::flixel::input::keyboard::FlxKeyList _this54 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 535)																												if (_this54->keyManager->checkStatusUnsafe(32,_this54->status)) {
HXLINE( 535)																													input = HX_(" ",20,00,00,00);
            																												}
            																												else {
HXLINE( 536)																													 ::flixel::input::keyboard::FlxKeyList _this55 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 536)																													if (_this55->keyManager->checkStatusUnsafe(49,_this55->status)) {
HXLINE( 536)																														input = HX_("1",31,00,00,00);
            																													}
            																													else {
HXLINE( 537)																														 ::flixel::input::keyboard::FlxKeyList _this56 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 537)																														if (_this56->keyManager->checkStatusUnsafe(50,_this56->status)) {
HXLINE( 537)																															input = HX_("2",32,00,00,00);
            																														}
            																														else {
HXLINE( 538)																															 ::flixel::input::keyboard::FlxKeyList _this57 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 538)																															if (_this57->keyManager->checkStatusUnsafe(51,_this57->status)) {
HXLINE( 538)																																input = HX_("3",33,00,00,00);
            																															}
            																															else {
HXLINE( 539)																																 ::flixel::input::keyboard::FlxKeyList _this58 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 539)																																if (_this58->keyManager->checkStatusUnsafe(52,_this58->status)) {
HXLINE( 539)																																	input = HX_("4",34,00,00,00);
            																																}
            																																else {
HXLINE( 540)																																	 ::flixel::input::keyboard::FlxKeyList _this59 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 540)																																	if (_this59->keyManager->checkStatusUnsafe(53,_this59->status)) {
HXLINE( 540)																																		input = HX_("5",35,00,00,00);
            																																	}
            																																	else {
HXLINE( 541)																																		 ::flixel::input::keyboard::FlxKeyList _this60 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 541)																																		if (_this60->keyManager->checkStatusUnsafe(54,_this60->status)) {
HXLINE( 541)																																			input = HX_("6",36,00,00,00);
            																																		}
            																																		else {
HXLINE( 542)																																			 ::flixel::input::keyboard::FlxKeyList _this61 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 542)																																			if (_this61->keyManager->checkStatusUnsafe(55,_this61->status)) {
HXLINE( 542)																																				input = HX_("7",37,00,00,00);
            																																			}
            																																			else {
HXLINE( 543)																																				 ::flixel::input::keyboard::FlxKeyList _this62 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 543)																																				if (_this62->keyManager->checkStatusUnsafe(56,_this62->status)) {
HXLINE( 543)																																					input = HX_("8",38,00,00,00);
            																																				}
            																																				else {
HXLINE( 544)																																					 ::flixel::input::keyboard::FlxKeyList _this63 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 544)																																					if (_this63->keyManager->checkStatusUnsafe(57,_this63->status)) {
HXLINE( 544)																																						input = HX_("9",39,00,00,00);
            																																					}
            																																					else {
HXLINE( 545)																																						 ::flixel::input::keyboard::FlxKeyList _this64 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 545)																																						if (_this64->keyManager->checkStatusUnsafe(48,_this64->status)) {
HXLINE( 545)																																							input = HX_("0",30,00,00,00);
            																																						}
            																																					}
            																																				}
            																																			}
            																																		}
            																																	}
            																																}
            																															}
            																														}
            																													}
            																												}
            																											}
            																										}
            																									}
            																								}
            																							}
            																						}
            																					}
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 547)		if ((input != HX_("",00,00,00,00))) {
HXLINE( 548)			::String _hx_switch_2 = this->editingField;
            			if (  (_hx_switch_2==HX_("name",4b,72,ff,48)) ){
HXLINE( 550)				 ::flixel::text::FlxText fh = this->nameField;
HXDLIN( 550)				fh->set_text((fh->text + input));
HXLINE( 549)				goto _hx_goto_28;
            			}
            			if (  (_hx_switch_2==HX_("prefix",92,d9,b6,ae)) ){
HXLINE( 552)				 ::flixel::text::FlxText fh1 = this->prefixField;
HXDLIN( 552)				fh1->set_text((fh1->text + input));
HXLINE( 551)				goto _hx_goto_28;
            			}
            			_hx_goto_28:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,handleTextInput,(void))

void CharacterEditorState_obj::loadCharacterJSON(){
            	HX_GC_STACKFRAME(&_hx_pos_ff4b7144a7b661a6_558_loadCharacterJSON)
HXDLIN( 558)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 559)			::String jsonPath = HX_("assets/charater/BOYFRIEND.json",39,72,28,90);
HXLINE( 560)			if (::sys::FileSystem_obj::exists(jsonPath)) {
HXLINE( 561)				::String content = ::sys::io::File_obj::getContent(jsonPath);
HXLINE( 562)				 ::Dynamic data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,content)->doParse();
HXLINE( 564)				this->characterName = ( (::String)(data->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE( 565)				this->animations = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 568)				{
HXLINE( 568)					int _g = 0;
HXDLIN( 568)					::cpp::VirtualArray _g1 = ::hx::TCast< ::cpp::VirtualArray >::cast( ::Dynamic(data->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)));
HXDLIN( 568)					while((_g < _g1->get_length())){
HXLINE( 568)						 ::Dynamic animData = _g1->__get(_g);
HXDLIN( 568)						_g = (_g + 1);
HXLINE( 569)						this->animations->push( ::Dynamic(::hx::Anon_obj::Create(4)
            							->setFixed(0,HX_("prefix",92,d9,b6,ae),( (::String)(animData->__Field(HX_("prefix",92,d9,b6,ae),::hx::paccDynamic)) ))
            							->setFixed(1,HX_("fps",e9,c7,4d,00),( (int)(animData->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) ))
            							->setFixed(2,HX_("name",4b,72,ff,48),( (::String)(animData->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ))
            							->setFixed(3,HX_("looped",c3,5f,b9,61),( (bool)(animData->__Field(HX_("looped",c3,5f,b9,61),::hx::paccDynamic)) ))));
HXLINE( 577)						if (::hx::IsNotNull( this->characterSprite->frames )) {
HXLINE( 578)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 579)								this->characterSprite->animation->addByPrefix(( (::String)(animData->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),( (::String)(animData->__Field(HX_("prefix",92,d9,b6,ae),::hx::paccDynamic)) ),animData->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic),animData->__Field(HX_("looped",c3,5f,b9,61),::hx::paccDynamic),null(),null());
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _g2 = _hx_e;
HXLINE( 580)									{
HXLINE( 580)										null();
            									}
HXLINE( 581)									 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 581)									::String _hx_tmp1 = (HX_W(u"\u26a0\ufe0f No se pudo crear: ",f16e,316d) + ::Std_obj::string( ::Dynamic(animData->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic))));
HXDLIN( 581)									_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),581,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadCharacterJSON",4b,44,f7,a2)));
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            					}
            				}
HXLINE( 587)				if (::hx::IsNotNull( this->nameInput )) {
HXLINE( 588)					this->nameInput->set_text(this->characterName);
HXLINE( 589)					this->characterName = this->nameInput->text;
            				}
HXLINE( 592)				::haxe::Log_obj::trace(((HX_W(u"\U0001f4c4 JSON cargado: ",5147,385e) + this->animations->length) + HX_(" animaciones",03,a2,6e,a1)),::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),592,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadCharacterJSON",4b,44,f7,a2)));
HXLINE( 593)				this->updateAnimationsList();
HXLINE( 594)				::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g3 = _hx_e;
HXLINE( 596)				{
HXLINE( 596)					null();
            				}
HXDLIN( 596)				 ::Dynamic e = _g3;
HXLINE( 597)				{
HXLINE( 597)					 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 597)					::String _hx_tmp3 = (HX_("Error cargando JSON: ",cb,20,bc,bf) + ::Std_obj::string(e));
HXDLIN( 597)					_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source/states/debug/CharacterEditorState.hx",ae,9c,0a,d9),597,HX_("states.debug.CharacterEditorState",c2,35,44,3b),HX_("loadCharacterJSON",4b,44,f7,a2)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,loadCharacterJSON,(void))


::hx::ObjectPtr< CharacterEditorState_obj > CharacterEditorState_obj::__new() {
	::hx::ObjectPtr< CharacterEditorState_obj > __this = new CharacterEditorState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CharacterEditorState_obj > CharacterEditorState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CharacterEditorState_obj *__this = (CharacterEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterEditorState_obj), true, "states.debug.CharacterEditorState"));
	*(void **)__this = CharacterEditorState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CharacterEditorState_obj::CharacterEditorState_obj()
{
}

void CharacterEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterEditorState);
	HX_MARK_MEMBER_NAME(characterSprite,"characterSprite");
	HX_MARK_MEMBER_NAME(characterName,"characterName");
	HX_MARK_MEMBER_NAME(animations,"animations");
	HX_MARK_MEMBER_NAME(currentAnimation,"currentAnimation");
	HX_MARK_MEMBER_NAME(confirmDialog,"confirmDialog");
	HX_MARK_MEMBER_NAME(showingDialog,"showingDialog");
	HX_MARK_MEMBER_NAME(infoText,"infoText");
	HX_MARK_MEMBER_NAME(nameInput,"nameInput");
	HX_MARK_MEMBER_NAME(animationsList,"animationsList");
	HX_MARK_MEMBER_NAME(previewArea,"previewArea");
	HX_MARK_MEMBER_NAME(animName,"animName");
	HX_MARK_MEMBER_NAME(animPrefix,"animPrefix");
	HX_MARK_MEMBER_NAME(animFPS,"animFPS");
	HX_MARK_MEMBER_NAME(animLooped,"animLooped");
	HX_MARK_MEMBER_NAME(nameField,"nameField");
	HX_MARK_MEMBER_NAME(prefixField,"prefixField");
	HX_MARK_MEMBER_NAME(fpsField,"fpsField");
	HX_MARK_MEMBER_NAME(editingField,"editingField");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(characterSprite,"characterSprite");
	HX_VISIT_MEMBER_NAME(characterName,"characterName");
	HX_VISIT_MEMBER_NAME(animations,"animations");
	HX_VISIT_MEMBER_NAME(currentAnimation,"currentAnimation");
	HX_VISIT_MEMBER_NAME(confirmDialog,"confirmDialog");
	HX_VISIT_MEMBER_NAME(showingDialog,"showingDialog");
	HX_VISIT_MEMBER_NAME(infoText,"infoText");
	HX_VISIT_MEMBER_NAME(nameInput,"nameInput");
	HX_VISIT_MEMBER_NAME(animationsList,"animationsList");
	HX_VISIT_MEMBER_NAME(previewArea,"previewArea");
	HX_VISIT_MEMBER_NAME(animName,"animName");
	HX_VISIT_MEMBER_NAME(animPrefix,"animPrefix");
	HX_VISIT_MEMBER_NAME(animFPS,"animFPS");
	HX_VISIT_MEMBER_NAME(animLooped,"animLooped");
	HX_VISIT_MEMBER_NAME(nameField,"nameField");
	HX_VISIT_MEMBER_NAME(prefixField,"prefixField");
	HX_VISIT_MEMBER_NAME(fpsField,"fpsField");
	HX_VISIT_MEMBER_NAME(editingField,"editingField");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"animFPS") ) { return ::hx::Val( animFPS ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoText") ) { return ::hx::Val( infoText ); }
		if (HX_FIELD_EQ(inName,"animName") ) { return ::hx::Val( animName ); }
		if (HX_FIELD_EQ(inName,"fpsField") ) { return ::hx::Val( fpsField ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nameInput") ) { return ::hx::Val( nameInput ); }
		if (HX_FIELD_EQ(inName,"nameField") ) { return ::hx::Val( nameField ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"animations") ) { return ::hx::Val( animations ); }
		if (HX_FIELD_EQ(inName,"animPrefix") ) { return ::hx::Val( animPrefix ); }
		if (HX_FIELD_EQ(inName,"animLooped") ) { return ::hx::Val( animLooped ); }
		if (HX_FIELD_EQ(inName,"loadAssets") ) { return ::hx::Val( loadAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateInfo") ) { return ::hx::Val( updateInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"toggleLoop") ) { return ::hx::Val( toggleLoop_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"previewArea") ) { return ::hx::Val( previewArea ); }
		if (HX_FIELD_EQ(inName,"prefixField") ) { return ::hx::Val( prefixField ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"editingField") ) { return ::hx::Val( editingField ); }
		if (HX_FIELD_EQ(inName,"addAnimation") ) { return ::hx::Val( addAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"cerrarDialog") ) { return ::hx::Val( cerrarDialog_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"characterName") ) { return ::hx::Val( characterName ); }
		if (HX_FIELD_EQ(inName,"confirmDialog") ) { return ::hx::Val( confirmDialog ); }
		if (HX_FIELD_EQ(inName,"showingDialog") ) { return ::hx::Val( showingDialog ); }
		if (HX_FIELD_EQ(inName,"createButtons") ) { return ::hx::Val( createButtons_dyn() ); }
		if (HX_FIELD_EQ(inName,"playAnimation") ) { return ::hx::Val( playAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveCharacter") ) { return ::hx::Val( saveCharacter_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"animationsList") ) { return ::hx::Val( animationsList ); }
		if (HX_FIELD_EQ(inName,"guardarArchivo") ) { return ::hx::Val( guardarArchivo_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"characterSprite") ) { return ::hx::Val( characterSprite ); }
		if (HX_FIELD_EQ(inName,"handleTextInput") ) { return ::hx::Val( handleTextInput_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentAnimation") ) { return ::hx::Val( currentAnimation ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"loadCharacterJSON") ) { return ::hx::Val( loadCharacterJSON_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"loadCharacterAssets") ) { return ::hx::Val( loadCharacterAssets_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateAnimationsList") ) { return ::hx::Val( updateAnimationsList_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createAnimationInputs") ) { return ::hx::Val( createAnimationInputs_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"mostrarDialogoReemplazo") ) { return ::hx::Val( mostrarDialogoReemplazo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CharacterEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"animFPS") ) { animFPS=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoText") ) { infoText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animName") ) { animName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fpsField") ) { fpsField=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nameInput") ) { nameInput=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameField") ) { nameField=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"animations") ) { animations=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animPrefix") ) { animPrefix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animLooped") ) { animLooped=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"previewArea") ) { previewArea=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prefixField") ) { prefixField=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"editingField") ) { editingField=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"characterName") ) { characterName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"confirmDialog") ) { confirmDialog=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showingDialog") ) { showingDialog=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"animationsList") ) { animationsList=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"characterSprite") ) { characterSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentAnimation") ) { currentAnimation=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CharacterEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("characterSprite",8e,d0,fd,3c));
	outFields->push(HX_("characterName",94,02,ec,41));
	outFields->push(HX_("animations",ef,34,1c,83));
	outFields->push(HX_("currentAnimation",8b,63,65,3e));
	outFields->push(HX_("confirmDialog",e8,d5,94,10));
	outFields->push(HX_("showingDialog",ad,7e,e6,07));
	outFields->push(HX_("infoText",3b,00,9e,3d));
	outFields->push(HX_("nameInput",bf,91,d2,b7));
	outFields->push(HX_("animationsList",ed,20,97,e6));
	outFields->push(HX_("previewArea",b5,3b,4d,b9));
	outFields->push(HX_("animName",fc,00,55,7c));
	outFields->push(HX_("animPrefix",83,36,92,8d));
	outFields->push(HX_("animFPS",58,3e,38,7a));
	outFields->push(HX_("animLooped",b4,bc,94,40));
	outFields->push(HX_("nameField",6f,62,48,fa));
	outFields->push(HX_("prefixField",c8,39,b2,a2));
	outFields->push(HX_("fpsField",11,f0,48,8a));
	outFields->push(HX_("editingField",82,e8,c3,d1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterEditorState_obj,characterSprite),HX_("characterSprite",8e,d0,fd,3c)},
	{::hx::fsString,(int)offsetof(CharacterEditorState_obj,characterName),HX_("characterName",94,02,ec,41)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CharacterEditorState_obj,animations),HX_("animations",ef,34,1c,83)},
	{::hx::fsInt,(int)offsetof(CharacterEditorState_obj,currentAnimation),HX_("currentAnimation",8b,63,65,3e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterEditorState_obj,confirmDialog),HX_("confirmDialog",e8,d5,94,10)},
	{::hx::fsBool,(int)offsetof(CharacterEditorState_obj,showingDialog),HX_("showingDialog",ad,7e,e6,07)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditorState_obj,infoText),HX_("infoText",3b,00,9e,3d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditorState_obj,nameInput),HX_("nameInput",bf,91,d2,b7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditorState_obj,animationsList),HX_("animationsList",ed,20,97,e6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterEditorState_obj,previewArea),HX_("previewArea",b5,3b,4d,b9)},
	{::hx::fsString,(int)offsetof(CharacterEditorState_obj,animName),HX_("animName",fc,00,55,7c)},
	{::hx::fsString,(int)offsetof(CharacterEditorState_obj,animPrefix),HX_("animPrefix",83,36,92,8d)},
	{::hx::fsInt,(int)offsetof(CharacterEditorState_obj,animFPS),HX_("animFPS",58,3e,38,7a)},
	{::hx::fsBool,(int)offsetof(CharacterEditorState_obj,animLooped),HX_("animLooped",b4,bc,94,40)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditorState_obj,nameField),HX_("nameField",6f,62,48,fa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditorState_obj,prefixField),HX_("prefixField",c8,39,b2,a2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditorState_obj,fpsField),HX_("fpsField",11,f0,48,8a)},
	{::hx::fsString,(int)offsetof(CharacterEditorState_obj,editingField),HX_("editingField",82,e8,c3,d1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CharacterEditorState_obj_sStaticStorageInfo = 0;
#endif

static ::String CharacterEditorState_obj_sMemberFields[] = {
	HX_("characterSprite",8e,d0,fd,3c),
	HX_("characterName",94,02,ec,41),
	HX_("animations",ef,34,1c,83),
	HX_("currentAnimation",8b,63,65,3e),
	HX_("confirmDialog",e8,d5,94,10),
	HX_("showingDialog",ad,7e,e6,07),
	HX_("infoText",3b,00,9e,3d),
	HX_("nameInput",bf,91,d2,b7),
	HX_("animationsList",ed,20,97,e6),
	HX_("previewArea",b5,3b,4d,b9),
	HX_("animName",fc,00,55,7c),
	HX_("animPrefix",83,36,92,8d),
	HX_("animFPS",58,3e,38,7a),
	HX_("animLooped",b4,bc,94,40),
	HX_("nameField",6f,62,48,fa),
	HX_("prefixField",c8,39,b2,a2),
	HX_("fpsField",11,f0,48,8a),
	HX_("editingField",82,e8,c3,d1),
	HX_("create",fc,66,0f,7c),
	HX_("createButtons",a5,2a,b8,b2),
	HX_("loadAssets",49,77,2e,01),
	HX_("addAnimation",a3,10,89,4a),
	HX_("playAnimation",70,42,7a,e5),
	HX_("saveCharacter",ac,60,8c,66),
	HX_("loadCharacterAssets",86,05,03,ae),
	HX_("updateInfo",17,23,70,fe),
	HX_("updateAnimationsList",d6,58,29,69),
	HX_("update",09,86,05,87),
	HX_("mostrarDialogoReemplazo",d8,ed,be,45),
	HX_("cerrarDialog",7b,71,e5,eb),
	HX_("guardarArchivo",56,9d,ac,6d),
	HX_("createAnimationInputs",b1,1f,12,bc),
	HX_("toggleLoop",18,ec,6d,df),
	HX_("handleTextInput",55,fb,76,25),
	HX_("loadCharacterJSON",4b,44,f7,a2),
	::String(null()) };

::hx::Class CharacterEditorState_obj::__mClass;

void CharacterEditorState_obj::__register()
{
	CharacterEditorState_obj _hx_dummy;
	CharacterEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.debug.CharacterEditorState",c2,35,44,3b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterEditorState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace debug
