// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_debug_ChartMenuState
#include <states/debug/ChartMenuState.h>
#endif
#ifndef INCLUDED_states_debug_PlaySongDebug
#include <states/debug/PlaySongDebug.h>
#endif
#ifndef INCLUDED_states_menu_MenuDebugState
#include <states/menu/MenuDebugState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_27361e37a5c1df2d_18_new,"states.debug.ChartMenuState","new",0x6c63dc2d,"states.debug.ChartMenuState.new","states/debug/ChartMenuState.hx",18,0x02d856e1)
static const Float _hx_array_data_ef8541bb_1[] = {
	(Float)400,(Float)130,
};
static const Float _hx_array_data_ef8541bb_2[] = {
	(Float)100,(Float)100,
};
static const Float _hx_array_data_ef8541bb_3[] = {
	(Float)770,(Float)450,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_65_create,"states.debug.ChartMenuState","create",0xc6d8f94f,"states.debug.ChartMenuState.create","states/debug/ChartMenuState.hx",65,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_103_crearGrid,"states.debug.ChartMenuState","crearGrid",0xa035cf3a,"states.debug.ChartMenuState.crearGrid","states/debug/ChartMenuState.hx",103,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_186_crearUI,"states.debug.ChartMenuState","crearUI",0x36ff99a8,"states.debug.ChartMenuState.crearUI","states/debug/ChartMenuState.hx",186,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_121_crearUI,"states.debug.ChartMenuState","crearUI",0x36ff99a8,"states.debug.ChartMenuState.crearUI","states/debug/ChartMenuState.hx",121,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_195_togglePlay,"states.debug.ChartMenuState","togglePlay",0x104d2b7b,"states.debug.ChartMenuState.togglePlay","states/debug/ChartMenuState.hx",195,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_200_togglePlay,"states.debug.ChartMenuState","togglePlay",0x104d2b7b,"states.debug.ChartMenuState.togglePlay","states/debug/ChartMenuState.hx",200,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_207_saveChart,"states.debug.ChartMenuState","saveChart",0x653b07ee,"states.debug.ChartMenuState.saveChart","states/debug/ChartMenuState.hx",207,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_250_loadChart,"states.debug.ChartMenuState","loadChart",0xf1c54c65,"states.debug.ChartMenuState.loadChart","states/debug/ChartMenuState.hx",250,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_307_actualizarInfo,"states.debug.ChartMenuState","actualizarInfo",0xf94e1291,"states.debug.ChartMenuState.actualizarInfo","states/debug/ChartMenuState.hx",307,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_321_crearPanelEventos,"states.debug.ChartMenuState","crearPanelEventos",0xa65e458e,"states.debug.ChartMenuState.crearPanelEventos","states/debug/ChartMenuState.hx",321,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_344_toggleModoEvento,"states.debug.ChartMenuState","toggleModoEvento",0xec83c329,"states.debug.ChartMenuState.toggleModoEvento","states/debug/ChartMenuState.hx",344,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_350_colocarNota,"states.debug.ChartMenuState","colocarNota",0xfce5aea0,"states.debug.ChartMenuState.colocarNota","states/debug/ChartMenuState.hx",350,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_397_guardarEventos,"states.debug.ChartMenuState","guardarEventos",0xa62d4a9b,"states.debug.ChartMenuState.guardarEventos","states/debug/ChartMenuState.hx",397,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_417_crearFlechaIzquierda,"states.debug.ChartMenuState","crearFlechaIzquierda",0xbd7bb20d,"states.debug.ChartMenuState.crearFlechaIzquierda","states/debug/ChartMenuState.hx",417,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_433_crearFlechaDerecha,"states.debug.ChartMenuState","crearFlechaDerecha",0x17a15097,"states.debug.ChartMenuState.crearFlechaDerecha","states/debug/ChartMenuState.hx",433,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_449_crearFlechaArriba,"states.debug.ChartMenuState","crearFlechaArriba",0x2b68a618,"states.debug.ChartMenuState.crearFlechaArriba","states/debug/ChartMenuState.hx",449,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_465_crearFlechaAbajo,"states.debug.ChartMenuState","crearFlechaAbajo",0x93fd6ed4,"states.debug.ChartMenuState.crearFlechaAbajo","states/debug/ChartMenuState.hx",465,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_481_update,"states.debug.ChartMenuState","update",0xd1cf185c,"states.debug.ChartMenuState.update","states/debug/ChartMenuState.hx",481,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_558_update,"states.debug.ChartMenuState","update",0xd1cf185c,"states.debug.ChartMenuState.update","states/debug/ChartMenuState.hx",558,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_564_actualizarNotaLarga,"states.debug.ChartMenuState","actualizarNotaLarga",0xfa2f93e6,"states.debug.ChartMenuState.actualizarNotaLarga","states/debug/ChartMenuState.hx",564,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_586_seleccionarCancion,"states.debug.ChartMenuState","seleccionarCancion",0x58de37da,"states.debug.ChartMenuState.seleccionarCancion","states/debug/ChartMenuState.hx",586,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_613_crearFlechaEvento,"states.debug.ChartMenuState","crearFlechaEvento",0x09dc7e86,"states.debug.ChartMenuState.crearFlechaEvento","states/debug/ChartMenuState.hx",613,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_629_detectarPersonajes,"states.debug.ChartMenuState","detectarPersonajes",0xbbabe1b3,"states.debug.ChartMenuState.detectarPersonajes","states/debug/ChartMenuState.hx",629,0x02d856e1)
static const ::String _hx_array_data_ef8541bb_51[] = {
	HX_("BOYFRIEND",4a,99,10,e2),HX_("DAD",27,d2,33,00),
};
static const ::String _hx_array_data_ef8541bb_52[] = {
	HX_("BOYFRIEND",4a,99,10,e2),HX_("DAD",27,d2,33,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_652_cambiarPlayer,"states.debug.ChartMenuState","cambiarPlayer",0x60f3ded5,"states.debug.ChartMenuState.cambiarPlayer","states/debug/ChartMenuState.hx",652,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_661_cambiarOpponent,"states.debug.ChartMenuState","cambiarOpponent",0x1d2e7211,"states.debug.ChartMenuState.cambiarOpponent","states/debug/ChartMenuState.hx",661,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_670_cambiarGF,"states.debug.ChartMenuState","cambiarGF",0x69778373,"states.debug.ChartMenuState.cambiarGF","states/debug/ChartMenuState.hx",670,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_679_editarPosiciones,"states.debug.ChartMenuState","editarPosiciones",0xcc82ec76,"states.debug.ChartMenuState.editarPosiciones","states/debug/ChartMenuState.hx",679,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_691_editarNombre,"states.debug.ChartMenuState","editarNombre",0x0e632177,"states.debug.ChartMenuState.editarNombre","states/debug/ChartMenuState.hx",691,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_708_mostrarDialogoReemplazo,"states.debug.ChartMenuState","mostrarDialogoReemplazo",0x3d778e25,"states.debug.ChartMenuState.mostrarDialogoReemplazo","states/debug/ChartMenuState.hx",708,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_716_mostrarDialogoReemplazo,"states.debug.ChartMenuState","mostrarDialogoReemplazo",0x3d778e25,"states.debug.ChartMenuState.mostrarDialogoReemplazo","states/debug/ChartMenuState.hx",716,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_694_mostrarDialogoReemplazo,"states.debug.ChartMenuState","mostrarDialogoReemplazo",0x3d778e25,"states.debug.ChartMenuState.mostrarDialogoReemplazo","states/debug/ChartMenuState.hx",694,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_722_cerrarDialog,"states.debug.ChartMenuState","cerrarDialog",0xac9e040e,"states.debug.ChartMenuState.cerrarDialog","states/debug/ChartMenuState.hx",722,0x02d856e1)
HX_LOCAL_STACK_FRAME(_hx_pos_27361e37a5c1df2d_731_guardarArchivo,"states.debug.ChartMenuState","guardarArchivo",0x3b9d3aa9,"states.debug.ChartMenuState.guardarArchivo","states/debug/ChartMenuState.hx",731,0x02d856e1)
namespace states{
namespace debug{

void ChartMenuState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_18_new)
HXLINE(  61)		this->showingDialog = false;
HXLINE(  58)		this->chartName = HX_("MiChart",c2,a7,4e,56);
HXLINE(  55)		this->gfPos = ::Array_obj< Float >::fromData( _hx_array_data_ef8541bb_1,2);
HXLINE(  54)		this->opponentPos = ::Array_obj< Float >::fromData( _hx_array_data_ef8541bb_2,2);
HXLINE(  53)		this->playerPos = ::Array_obj< Float >::fromData( _hx_array_data_ef8541bb_3,2);
HXLINE(  50)		this->availableCharacters = ::Array_obj< ::String >::__new(0);
HXLINE(  49)		this->gfCharacter = HX_("GF",1f,3e,00,00);
HXLINE(  48)		this->opponentCharacter = HX_("DAD",27,d2,33,00);
HXLINE(  47)		this->playerCharacter = HX_("BOYFRIEND",4a,99,10,e2);
HXLINE(  44)		this->notaSeleccionada = null();
HXLINE(  43)		this->chartEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  42)		this->chartNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  39)		this->modoEvento = false;
HXLINE(  38)		this->scrollY = ((Float)0);
HXLINE(  37)		this->isPlaying = false;
HXLINE(  36)		this->gridSize = 40;
HXLINE(  35)		this->currentSection = 0;
HXLINE(  26)		this->bpm = ((Float)120);
HXLINE(  25)		this->songPosition = ((Float)0);
HXLINE(  24)		this->currentBeat = ((Float)0);
HXLINE(  18)		super::__construct();
            	}

Dynamic ChartMenuState_obj::__CreateEmpty() { return new ChartMenuState_obj; }

void *ChartMenuState_obj::_hx_vtable = 0;

Dynamic ChartMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartMenuState_obj > _hx_result = new ChartMenuState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ChartMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c795c9f) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x563293a6) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x563293a6;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x7c795c9f;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7fef5fe1;
	}
}

void ChartMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_65_create)
HXLINE(  66)		this->super::create();
HXLINE(  69)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  70)		bg->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-15066598,null(),null());
HXLINE(  71)		this->add(bg);
HXLINE(  76)		this->crearGrid();
HXLINE(  79)		this->crearUI();
HXLINE(  82)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  83)		this->add(this->notes);
HXLINE(  86)		this->events =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  87)		this->add(this->events);
HXLINE(  90)		this->crearPanelEventos();
HXLINE(  93)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )),null());
HXLINE(  94)		this->strumLine->makeGraphic(::flixel::FlxG_obj::width,4,-65536,null(),null());
HXLINE(  95)		this->add(this->strumLine);
HXLINE(  98)		this->detectarPersonajes();
HXLINE( 100)		::haxe::Log_obj::trace(HX_W(u"\U0001f3bc Chart Editor iniciado - Modo Simple",16a2,da92),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),100,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("create",fc,66,0f,7c)));
            	}


void ChartMenuState_obj::crearGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_103_crearGrid)
HXLINE( 104)		this->gridBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(160) )),0,null());
HXLINE( 105)		this->gridBG->makeGraphic(320,(::flixel::FlxG_obj::height * 3),(int)1157627903,null(),null());
HXLINE( 106)		this->add(this->gridBG);
HXLINE( 108)		{
HXLINE( 108)			int _g = 0;
HXDLIN( 108)			while((_g < 9)){
HXLINE( 108)				_g = (_g + 1);
HXDLIN( 108)				int i = (_g - 1);
HXLINE( 109)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->x + (i * 40)),0,null());
HXLINE( 110)				int _hx_tmp;
HXDLIN( 110)				if ((i == 4)) {
HXLINE( 110)					_hx_tmp = -256;
            				}
            				else {
HXLINE( 110)					_hx_tmp = -1;
            				}
HXDLIN( 110)				line->makeGraphic(2,(::flixel::FlxG_obj::height * 3),_hx_tmp,null(),null());
HXLINE( 111)				this->add(line);
            			}
            		}
HXLINE( 114)		{
HXLINE( 114)			int _g1 = 0;
HXDLIN( 114)			while((_g1 < 200)){
HXLINE( 114)				_g1 = (_g1 + 1);
HXDLIN( 114)				int i1 = (_g1 - 1);
HXLINE( 115)				 ::flixel::FlxSprite line1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->gridBG->x,(i1 * 40),null());
HXLINE( 116)				int _hx_tmp1;
HXDLIN( 116)				if ((::hx::Mod(i1,4) == 0)) {
HXLINE( 116)					_hx_tmp1 = -16711681;
            				}
            				else {
HXLINE( 116)					_hx_tmp1 = (int)1157627903;
            				}
HXDLIN( 116)				line1->makeGraphic(320,2,_hx_tmp1,null(),null());
HXLINE( 117)				this->add(line1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,crearGrid,(void))

void ChartMenuState_obj::crearUI(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::menu::MenuDebugState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_186_crearUI)
HXLINE( 186)				return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_186_crearUI)
HXLINE( 186)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 186)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE( 186)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_186_crearUI)
HXLINE( 186)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 186)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 186)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_121_crearUI)
HXLINE( 122)		this->infoText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,300,HX_("",00,00,00,00),null(),null());
HXLINE( 123)		this->infoText->setFormat(null(),14,-1,null(),null(),null(),null());
HXLINE( 124)		{
HXLINE( 124)			 ::flixel::math::FlxBasePoint this1 = this->infoText->scrollFactor;
HXDLIN( 124)			this1->set_x(( (Float)(0) ));
HXDLIN( 124)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 125)		this->add(this->infoText);
HXLINE( 128)		 ::flixel::text::FlxText nameLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,200,0,HX_("Nombre:",f1,38,f2,10),null(),null());
HXLINE( 129)		nameLabel->setFormat(null(),16,-1,null(),null(),null(),null());
HXLINE( 130)		{
HXLINE( 130)			 ::flixel::math::FlxBasePoint this2 = nameLabel->scrollFactor;
HXDLIN( 130)			this2->set_x(( (Float)(0) ));
HXDLIN( 130)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 131)		this->add(nameLabel);
HXLINE( 133)		this->nameInput =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,80,200,200,this->chartName,null(),null());
HXLINE( 134)		this->nameInput->setFormat(null(),16,-256,null(),null(),null(),null());
HXLINE( 135)		{
HXLINE( 135)			 ::flixel::text::FlxText _this = this->nameInput;
HXDLIN( 135)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 135)			_this->set_borderColor(-16777216);
HXDLIN( 135)			_this->set_borderSize(( (Float)(1) ));
HXDLIN( 135)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 136)		{
HXLINE( 136)			 ::flixel::math::FlxBasePoint this3 = this->nameInput->scrollFactor;
HXDLIN( 136)			this3->set_x(( (Float)(0) ));
HXDLIN( 136)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 137)		this->add(this->nameInput);
HXLINE( 139)		this->beatText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(::flixel::FlxG_obj::height - 100),200,HX_("Beat: 0",f4,32,4b,41),null(),null());
HXLINE( 140)		this->beatText->setFormat(null(),16,-16711681,null(),null(),null(),null());
HXLINE( 141)		{
HXLINE( 141)			 ::flixel::math::FlxBasePoint this4 = this->beatText->scrollFactor;
HXDLIN( 141)			this4->set_x(( (Float)(0) ));
HXDLIN( 141)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 142)		this->add(this->beatText);
HXLINE( 144)		this->sectionText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(::flixel::FlxG_obj::height - 80),200,HX_("Section: 0",25,1a,74,b5),null(),null());
HXLINE( 145)		this->sectionText->setFormat(null(),16,-256,null(),null(),null(),null());
HXLINE( 146)		{
HXLINE( 146)			 ::flixel::math::FlxBasePoint this5 = this->sectionText->scrollFactor;
HXDLIN( 146)			this5->set_x(( (Float)(0) ));
HXDLIN( 146)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 147)		this->add(this->sectionText);
HXLINE( 149)		::String btnPlay;
HXDLIN( 149)		if (this->isPlaying) {
HXLINE( 149)			btnPlay = HX_W(u"\u23f8\ufe0f Pause",0eb1,9ed4);
            		}
            		else {
HXLINE( 149)			btnPlay = HX_W(u"\u25b6\ufe0f Play",fbb0,8031);
            		}
HXDLIN( 149)		 ::flixel::ui::FlxButton btnPlay1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),10,btnPlay,this->togglePlay_dyn());
HXLINE( 150)		{
HXLINE( 150)			 ::flixel::math::FlxBasePoint this6 = btnPlay1->scrollFactor;
HXDLIN( 150)			this6->set_x(( (Float)(0) ));
HXDLIN( 150)			this6->set_y(( (Float)(0) ));
            		}
HXLINE( 151)		this->add(btnPlay1);
HXLINE( 153)		 ::flixel::ui::FlxButton btnSave =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),50,HX_W(u"\U0001f4be Save",e242,9bac),this->saveChart_dyn());
HXLINE( 154)		{
HXLINE( 154)			 ::flixel::math::FlxBasePoint this7 = btnSave->scrollFactor;
HXDLIN( 154)			this7->set_x(( (Float)(0) ));
HXDLIN( 154)			this7->set_y(( (Float)(0) ));
            		}
HXLINE( 155)		this->add(btnSave);
HXLINE( 157)		 ::flixel::ui::FlxButton btnLoad =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),90,HX_W(u"\U0001f4c1 Load",6549,5ce7),this->loadChart_dyn());
HXLINE( 158)		{
HXLINE( 158)			 ::flixel::math::FlxBasePoint this8 = btnLoad->scrollFactor;
HXDLIN( 158)			this8->set_x(( (Float)(0) ));
HXDLIN( 158)			this8->set_y(( (Float)(0) ));
            		}
HXLINE( 159)		this->add(btnLoad);
HXLINE( 161)		::String btnEventos;
HXDLIN( 161)		if (this->modoEvento) {
HXLINE( 161)			btnEventos = HX_W(u"\U0001f3b5 Notas",b0db,68cc);
            		}
            		else {
HXLINE( 161)			btnEventos = HX_W(u"\u26a1 Eventos",24a7,1534);
            		}
HXDLIN( 161)		 ::flixel::ui::FlxButton btnEventos1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),130,btnEventos,this->toggleModoEvento_dyn());
HXLINE( 162)		{
HXLINE( 162)			 ::flixel::math::FlxBasePoint this9 = btnEventos1->scrollFactor;
HXDLIN( 162)			this9->set_x(( (Float)(0) ));
HXDLIN( 162)			this9->set_y(( (Float)(0) ));
            		}
HXLINE( 163)		this->add(btnEventos1);
HXLINE( 165)		 ::flixel::ui::FlxButton btnSongSelect =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),170,HX_W(u"\U0001f3b5 Seleccionar Canci\u00f3n",c424,76c7),this->seleccionarCancion_dyn());
HXLINE( 166)		{
HXLINE( 166)			 ::flixel::math::FlxBasePoint this10 = btnSongSelect->scrollFactor;
HXDLIN( 166)			this10->set_x(( (Float)(0) ));
HXDLIN( 166)			this10->set_y(( (Float)(0) ));
            		}
HXLINE( 167)		this->add(btnSongSelect);
HXLINE( 169)		 ::flixel::ui::FlxButton btnPlayer =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),210,(HX_W(u"\U0001f464 Player: ",9de5,e83c) + this->playerCharacter),this->cambiarPlayer_dyn());
HXLINE( 170)		{
HXLINE( 170)			 ::flixel::math::FlxBasePoint this11 = btnPlayer->scrollFactor;
HXDLIN( 170)			this11->set_x(( (Float)(0) ));
HXDLIN( 170)			this11->set_y(( (Float)(0) ));
            		}
HXLINE( 171)		this->add(btnPlayer);
HXLINE( 173)		 ::flixel::ui::FlxButton btnOpponent =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),250,(HX_W(u"\U0001f47f Opponent: ",2666,5b75) + this->opponentCharacter),this->cambiarOpponent_dyn());
HXLINE( 174)		{
HXLINE( 174)			 ::flixel::math::FlxBasePoint this12 = btnOpponent->scrollFactor;
HXDLIN( 174)			this12->set_x(( (Float)(0) ));
HXDLIN( 174)			this12->set_y(( (Float)(0) ));
            		}
HXLINE( 175)		this->add(btnOpponent);
HXLINE( 177)		 ::flixel::ui::FlxButton btnGF =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),290,(HX_W(u"\U0001f483 GF: ",5785,fc9b) + this->gfCharacter),this->cambiarGF_dyn());
HXLINE( 178)		{
HXLINE( 178)			 ::flixel::math::FlxBasePoint this13 = btnGF->scrollFactor;
HXDLIN( 178)			this13->set_x(( (Float)(0) ));
HXDLIN( 178)			this13->set_y(( (Float)(0) ));
            		}
HXLINE( 179)		this->add(btnGF);
HXLINE( 181)		 ::flixel::ui::FlxButton btnPositions =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 200),330,HX_W(u"\U0001f4cd Posiciones",7ddf,9754),this->editarPosiciones_dyn());
HXLINE( 182)		{
HXLINE( 182)			 ::flixel::math::FlxBasePoint this14 = btnPositions->scrollFactor;
HXDLIN( 182)			this14->set_x(( (Float)(0) ));
HXDLIN( 182)			this14->set_y(( (Float)(0) ));
            		}
HXLINE( 183)		this->add(btnPositions);
HXLINE( 185)		 ::flixel::ui::FlxButton btnVolver =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 120),(::flixel::FlxG_obj::height - 40),HX_W(u"\u2190 Back",743b,6ee5), ::Dynamic(new _hx_Closure_2()));
HXLINE( 188)		{
HXLINE( 188)			 ::flixel::math::FlxBasePoint this15 = btnVolver->scrollFactor;
HXDLIN( 188)			this15->set_x(( (Float)(0) ));
HXDLIN( 188)			this15->set_y(( (Float)(0) ));
            		}
HXLINE( 189)		this->add(btnVolver);
HXLINE( 191)		this->actualizarInfo();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,crearUI,(void))

void ChartMenuState_obj::togglePlay(){
            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_195_togglePlay)
HXDLIN( 195)		if (!(this->isPlaying)) {
HXLINE( 197)			this->saveChart();
HXLINE( 200)			{
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_200_togglePlay)
HXLINE( 200)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 200)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE( 200)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 200)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::debug::PlaySongDebug_obj::__alloc( HX_CTX ));
HXDLIN( 200)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 200)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            			}
            		}
            		else {
HXLINE( 202)			this->isPlaying = false;
HXLINE( 203)			::haxe::Log_obj::trace(HX_W(u"\u23f8\ufe0f Pausado",2b78,06f7),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),203,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("togglePlay",a8,73,10,e2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,togglePlay,(void))

void ChartMenuState_obj::saveChart(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_207_saveChart)
HXLINE( 209)		this->chartName = this->nameInput->text;
HXLINE( 211)		 ::Dynamic chartData =  ::Dynamic(::hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            			->setFixed(1,HX_("player1",b0,09,15,8a),this->playerCharacter)
            			->setFixed(2,HX_("player2",b1,09,15,8a),this->opponentCharacter)
            			->setFixed(3,HX_("gfPos",b5,98,ee,91),this->gfPos)
            			->setFixed(4,HX_("events",19,4f,6a,96),this->chartEvents)
            			->setFixed(5,HX_("notes",41,dc,ca,9f),this->chartNotes)
            			->setFixed(6,HX_("gfVersion",b9,c6,7d,f3),this->gfCharacter)
            			->setFixed(7,HX_("opponentPos",f7,7b,c4,fa),this->opponentPos)
            			->setFixed(8,HX_("bpm",df,be,4a,00),this->bpm)
            			->setFixed(9,HX_("playerPos",b3,bc,c6,00),this->playerPos)
            			->setFixed(10,HX_("song",d5,23,58,4c),HX_("Test Song",63,8e,ab,7b)));
HXLINE( 225)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 226)			::String chartsPath = HX_("assets/charts",21,91,2c,59);
HXLINE( 227)			if (!(::sys::FileSystem_obj::exists(chartsPath))) {
HXLINE( 228)				::sys::FileSystem_obj::createDirectory(chartsPath);
            			}
HXLINE( 231)			 ::Dynamic replacer = null();
HXDLIN( 231)			::String jsonString = ::haxe::format::JsonPrinter_obj::print(chartData,replacer,HX_("  ",00,1c,00,00));
HXLINE( 232)			::String fileName = (((chartsPath + HX_("/",2f,00,00,00)) + this->chartName) + HX_(".json",56,f1,d6,c2));
HXLINE( 235)			if (::sys::FileSystem_obj::exists(fileName)) {
HXLINE( 236)				this->mostrarDialogoReemplazo(fileName,chartData);
HXLINE( 237)				return;
            			}
HXLINE( 239)			::sys::io::File_obj::saveContent(fileName,jsonString);
HXLINE( 241)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Chart guardado: ",1b54,8004) + fileName),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),241,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("saveChart",61,a4,60,d4)));
HXLINE( 242)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 243)				{
HXLINE( 243)					null();
            				}
HXDLIN( 243)				 ::Dynamic e = _g;
HXDLIN( 243)				{
HXLINE( 244)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 244)					::String _hx_tmp1 = (HX_("Error guardando chart: ",89,9a,50,f8) + ::Std_obj::string(e));
HXDLIN( 244)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),244,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("saveChart",61,a4,60,d4)));
HXLINE( 245)					::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,saveChart,(void))

void ChartMenuState_obj::loadChart(){
            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_250_loadChart)
HXDLIN( 250)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 251)			::String chartsPath = HX_("assets/charts",21,91,2c,59);
HXLINE( 252)			if (::sys::FileSystem_obj::exists(chartsPath)) {
HXLINE( 253)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(chartsPath);
HXLINE( 254)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 254)				{
HXLINE( 254)					int _g1 = 0;
HXDLIN( 254)					::Array< ::String > _g2 = files;
HXDLIN( 254)					while((_g1 < _g2->length)){
HXLINE( 254)						::String v = _g2->__get(_g1);
HXDLIN( 254)						_g1 = (_g1 + 1);
HXDLIN( 254)						if ((v.indexOf(HX_(".json",56,f1,d6,c2),null()) != -1)) {
HXLINE( 254)							_g->push(v);
            						}
            					}
            				}
HXDLIN( 254)				::Array< ::String > jsonFiles = _g;
HXLINE( 256)				if ((jsonFiles->length > 0)) {
HXLINE( 257)					::String latestFile = jsonFiles->__get((jsonFiles->length - 1));
HXLINE( 258)					::String content = ::sys::io::File_obj::getContent(((chartsPath + HX_("/",2f,00,00,00)) + latestFile));
HXLINE( 259)					 ::Dynamic chartData =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,content)->doParse();
HXLINE( 262)					this->bpm = ( (Float)(chartData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 263)					this->chartNotes = ( (::Array< ::Dynamic>)(chartData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE( 264)					::Array< ::Dynamic> _hx_tmp;
HXDLIN( 264)					if (::hx::IsNotNull( chartData->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic) )) {
HXLINE( 264)						_hx_tmp = ( (::Array< ::Dynamic>)(chartData->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
            					}
            					else {
HXLINE( 264)						_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            					}
HXDLIN( 264)					this->chartEvents = _hx_tmp;
HXLINE( 267)					if (::hx::IsNotNull( chartData->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic) )) {
HXLINE( 267)						this->playerCharacter = ( (::String)(chartData->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) );
            					}
HXLINE( 268)					if (::hx::IsNotNull( chartData->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic) )) {
HXLINE( 268)						this->opponentCharacter = ( (::String)(chartData->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            					}
HXLINE( 269)					if (::hx::IsNotNull( chartData->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 269)						this->gfCharacter = ( (::String)(chartData->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            					}
HXLINE( 270)					if (::hx::IsNotNull( chartData->__Field(HX_("playerPos",b3,bc,c6,00),::hx::paccDynamic) )) {
HXLINE( 270)						this->playerPos = ( (::Array< Float >)(chartData->__Field(HX_("playerPos",b3,bc,c6,00),::hx::paccDynamic)) );
            					}
HXLINE( 271)					if (::hx::IsNotNull( chartData->__Field(HX_("opponentPos",f7,7b,c4,fa),::hx::paccDynamic) )) {
HXLINE( 271)						this->opponentPos = ( (::Array< Float >)(chartData->__Field(HX_("opponentPos",f7,7b,c4,fa),::hx::paccDynamic)) );
            					}
HXLINE( 272)					if (::hx::IsNotNull( chartData->__Field(HX_("gfPos",b5,98,ee,91),::hx::paccDynamic) )) {
HXLINE( 272)						this->gfPos = ( (::Array< Float >)(chartData->__Field(HX_("gfPos",b5,98,ee,91),::hx::paccDynamic)) );
            					}
HXLINE( 275)					this->notes->clear();
HXLINE( 276)					this->events->clear();
HXLINE( 278)					{
HXLINE( 278)						int _g3 = 0;
HXDLIN( 278)						::Array< ::Dynamic> _g4 = this->chartNotes;
HXDLIN( 278)						while((_g3 < _g4->length)){
HXLINE( 278)							 ::Dynamic note = _g4->__get(_g3);
HXDLIN( 278)							_g3 = (_g3 + 1);
HXLINE( 279)							 ::flixel::FlxSprite nota =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((this->gridBG->x + (( (int)(note->__Field(HX_("lane",ec,05,ad,47),::hx::paccDynamic)) ) * this->gridSize)) + 5),(((( (Float)(note->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic)) ) / (( (Float)(60) ) / this->bpm)) * ( (Float)(this->gridSize) )) + 5),null());
HXLINE( 280)							switch((int)(::hx::Mod(note->__Field(HX_("lane",ec,05,ad,47),::hx::paccDynamic),4))){
            								case (int)0: {
HXLINE( 281)									this->crearFlechaIzquierda(nota,-8388480);
            								}
            								break;
            								case (int)1: {
HXLINE( 282)									this->crearFlechaAbajo(nota,-16776961);
            								}
            								break;
            								case (int)2: {
HXLINE( 283)									this->crearFlechaArriba(nota,-16744448);
            								}
            								break;
            								case (int)3: {
HXLINE( 284)									this->crearFlechaDerecha(nota,-65536);
            								}
            								break;
            							}
HXLINE( 286)							this->notes->add(nota).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
HXLINE( 289)					{
HXLINE( 289)						int _g5 = 0;
HXDLIN( 289)						::Array< ::Dynamic> _g6 = this->chartEvents;
HXDLIN( 289)						while((_g5 < _g6->length)){
HXLINE( 289)							 ::Dynamic event = _g6->__get(_g5);
HXDLIN( 289)							_g5 = (_g5 + 1);
HXLINE( 290)							 ::flixel::FlxSprite evento =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->x - ( (Float)(40) )),(((( (Float)(event->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic)) ) / (( (Float)(60) ) / this->bpm)) * ( (Float)(this->gridSize) )) + 5),null());
HXLINE( 291)							evento->makeGraphic(30,30,-23296,null(),null());
HXLINE( 292)							this->events->add(evento).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
HXLINE( 295)					this->actualizarInfo();
HXLINE( 296)					::haxe::Log_obj::trace((HX_W(u"\U0001f4c1 Chart cargado: ",991a,da5e) + latestFile),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),296,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("loadChart",d8,e8,ea,60)));
HXLINE( 297)					::flixel::FlxG_obj::camera->flash((int)1140850943,((Float)0.3),null(),null());
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g7 = _hx_e;
HXLINE( 300)				{
HXLINE( 300)					null();
            				}
HXDLIN( 300)				 ::Dynamic e = _g7;
HXDLIN( 300)				{
HXLINE( 301)					 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 301)					::String _hx_tmp2 = (HX_("Error cargando chart: ",67,f6,25,ef) + ::Std_obj::string(e));
HXDLIN( 301)					_hx_tmp1(_hx_tmp2,::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),301,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("loadChart",d8,e8,ea,60)));
HXLINE( 302)					::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,loadChart,(void))

void ChartMenuState_obj::actualizarInfo(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_307_actualizarInfo)
HXLINE( 313)		::String _hx_tmp;
HXDLIN( 313)		if (this->modoEvento) {
HXLINE( 313)			_hx_tmp = HX_("evento",15,4f,6a,96);
            		}
            		else {
HXLINE( 313)			_hx_tmp = HX_("nota",ee,17,0a,49);
            		}
HXLINE( 307)		this->infoText->set_text((((((((((((((((((HX_W(u"\U0001f3bc CHART EDITOR\n",fcd8,e0e9) + HX_("BPM: ",25,fb,8d,35)) + this->bpm) + HX_("\n",0a,00,00,00)) + HX_("Notas: ",8b,ae,17,18)) + this->chartNotes->length) + HX_("\n",0a,00,00,00)) + HX_("\nControles:\n",71,c0,1d,93)) + HX_("WASD/Flechas - Navegar\n",85,e0,b4,ba)) + HX_("SPACE - Play/Pause\n",e2,dc,01,de)) + HX_("Click - Colocar/Seleccionar ",c7,86,9a,df)) + _hx_tmp) + HX_("\n",0a,00,00,00)) + HX_("E - Alargar nota (+1)\n",ef,9a,49,d3)) + HX_("Q - Acortar nota (-1)\n",1d,9e,24,35)) + HX_("R - Borrar\n",eb,2c,c3,94)) + HX_("Mouse Wheel - Scroll\n",4a,00,b7,45)) + HX_("ESC - Salir",29,18,f8,94)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,actualizarInfo,(void))

void ChartMenuState_obj::crearPanelEventos(){
            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_321_crearPanelEventos)
HXLINE( 322)		this->eventsPanel =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 350),200,null());
HXLINE( 323)		this->eventsPanel->makeGraphic(330,300,(int)-2013265920,null(),null());
HXLINE( 324)		{
HXLINE( 324)			 ::flixel::math::FlxBasePoint this1 = this->eventsPanel->scrollFactor;
HXDLIN( 324)			this1->set_x(( (Float)(0) ));
HXDLIN( 324)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 325)		this->add(this->eventsPanel);
HXLINE( 327)		 ::flixel::text::FlxText titulo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->eventsPanel->x + 10),(this->eventsPanel->y + 10),0,HX_W(u"\u26a1 EVENTOS",d0a7,c7b6),null(),null());
HXLINE( 328)		titulo->setFormat(null(),16,-256,null(),null(),null(),null());
HXLINE( 329)		{
HXLINE( 329)			 ::flixel::math::FlxBasePoint this2 = titulo->scrollFactor;
HXDLIN( 329)			this2->set_x(( (Float)(0) ));
HXDLIN( 329)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 330)		this->add(titulo);
HXLINE( 332)		 ::flixel::text::FlxText info =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->eventsPanel->x + 10),(this->eventsPanel->y + 40),300,(((((HX_("Eventos disponibles:\n",8e,37,f5,66) + HX_("- Flash Screen\n",3b,65,ed,5a)) + HX_("- Zoom Camera\n",8b,07,29,f6)) + HX_("- Shake Window\n",4d,2f,cc,21)) + HX_("- Change BPM\n",88,30,3e,8a)) + HX_("\nClick en el grid para\ncolocar eventos",6f,7b,97,93)),null(),null());
HXLINE( 339)		info->setFormat(null(),12,-1,null(),null(),null(),null());
HXLINE( 340)		{
HXLINE( 340)			 ::flixel::math::FlxBasePoint this3 = info->scrollFactor;
HXDLIN( 340)			this3->set_x(( (Float)(0) ));
HXDLIN( 340)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 341)		this->add(info);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,crearPanelEventos,(void))

void ChartMenuState_obj::toggleModoEvento(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_344_toggleModoEvento)
HXLINE( 345)		this->modoEvento = !(this->modoEvento);
HXLINE( 346)		this->actualizarInfo();
HXLINE( 347)		 ::Dynamic _hx_tmp;
HXDLIN( 347)		if (this->modoEvento) {
HXLINE( 347)			_hx_tmp = HX_W(u"\u26a1 Modo Eventos",aa62,d3f5);
            		}
            		else {
HXLINE( 347)			_hx_tmp = HX_W(u"\U0001f3b5 Modo Notas",8fdc,8971);
            		}
HXDLIN( 347)		::haxe::Log_obj::trace(_hx_tmp,::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),347,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("toggleModoEvento",16,eb,32,4b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,toggleModoEvento,(void))

void ChartMenuState_obj::colocarNota(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_350_colocarNota)
HXLINE( 351)		int gridX = ::Math_obj::floor(((x - this->gridBG->x) / ( (Float)(this->gridSize) )));
HXLINE( 352)		int gridY = ::Math_obj::floor(((y + ::flixel::FlxG_obj::camera->scroll->y) / ( (Float)(this->gridSize) )));
HXLINE( 354)		bool _hx_tmp;
HXDLIN( 354)		bool _hx_tmp1;
HXDLIN( 354)		if ((gridX >= 0)) {
HXLINE( 354)			_hx_tmp1 = (gridX < 8);
            		}
            		else {
HXLINE( 354)			_hx_tmp1 = false;
            		}
HXDLIN( 354)		if (_hx_tmp1) {
HXLINE( 354)			_hx_tmp = (gridY >= 0);
            		}
            		else {
HXLINE( 354)			_hx_tmp = false;
            		}
HXDLIN( 354)		if (_hx_tmp) {
HXLINE( 355)			if (this->modoEvento) {
HXLINE( 356)				 ::flixel::FlxSprite evento =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->x - ( (Float)(40) )),((gridY * this->gridSize) + 5),null());
HXLINE( 357)				this->crearFlechaEvento(evento,-23296);
HXLINE( 358)				this->events->add(evento).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 360)				this->chartEvents->push( ::Dynamic(::hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("name",4b,72,ff,48),HX_("Flash Screen",1c,b4,f5,e1))
            					->setFixed(1,HX_("time",0d,cc,fc,4c),(( (Float)(gridY) ) * (( (Float)(60) ) / this->bpm)))
            					->setFixed(2,HX_("value1",a0,03,b7,4f),HX_("1.0",b3,56,25,00))
            					->setFixed(3,HX_("value2",a1,03,b7,4f),HX_("white",a9,4a,bd,c9))));
HXLINE( 367)				this->guardarEventos();
            			}
            			else {
HXLINE( 369)				 ::flixel::FlxSprite nota =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((this->gridBG->x + (gridX * this->gridSize)) + 5),((gridY * this->gridSize) + 5),null());
HXLINE( 372)				switch((int)(::hx::Mod(gridX,4))){
            					case (int)0: {
HXLINE( 374)						this->crearFlechaIzquierda(nota,-8388480);
            					}
            					break;
            					case (int)1: {
HXLINE( 376)						this->crearFlechaAbajo(nota,-16776961);
            					}
            					break;
            					case (int)2: {
HXLINE( 378)						this->crearFlechaArriba(nota,-16744448);
            					}
            					break;
            					case (int)3: {
HXLINE( 380)						this->crearFlechaDerecha(nota,-65536);
            					}
            					break;
            				}
HXLINE( 383)				this->notes->add(nota).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 385)				this->chartNotes->push( ::Dynamic(::hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("length",e6,94,07,9f),( (Float)(0) ))
            					->setFixed(1,HX_("lane",ec,05,ad,47),gridX)
            					->setFixed(2,HX_("time",0d,cc,fc,4c),(( (Float)(gridY) ) * (( (Float)(60) ) / this->bpm)))
            					->setFixed(3,HX_("type",ba,f2,08,4d),0)));
            			}
HXLINE( 393)			this->actualizarInfo();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,colocarNota,(void))

void ChartMenuState_obj::guardarEventos(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_397_guardarEventos)
HXLINE( 398)		::String eventsPath = HX_("assets/events",65,3a,21,38);
HXLINE( 400)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 401)			if (!(::sys::FileSystem_obj::exists(eventsPath))) {
HXLINE( 402)				::sys::FileSystem_obj::createDirectory(eventsPath);
            			}
HXLINE( 405)			::String eventData = HX_("",00,00,00,00);
HXLINE( 406)			{
HXLINE( 406)				int _g = 0;
HXDLIN( 406)				::Array< ::Dynamic> _g1 = this->chartEvents;
HXDLIN( 406)				while((_g < _g1->length)){
HXLINE( 406)					 ::Dynamic event = _g1->__get(_g);
HXDLIN( 406)					_g = (_g + 1);
HXLINE( 407)					eventData = ( (::String)((eventData + (((((((event->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic) + HX_(",",2c,00,00,00)) + event->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) + HX_(",",2c,00,00,00)) + event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) + HX_(",",2c,00,00,00)) + event->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)) + HX_("\n",0a,00,00,00)))) );
            				}
            			}
HXLINE( 410)			::sys::io::File_obj::saveContent((eventsPath + HX_("/chart_events.txt",cb,dd,4a,48)),eventData);
HXLINE( 411)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Eventos guardados: ",a90b,4d57) + this->chartEvents->length),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),411,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("guardarEventos",48,ad,3c,d8)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g2 = _hx_e;
HXLINE( 412)				{
HXLINE( 412)					null();
            				}
HXDLIN( 412)				 ::Dynamic e = _g2;
HXLINE( 413)				{
HXLINE( 413)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 413)					::String _hx_tmp1 = (HX_("Error guardando eventos: ",a9,04,68,18) + ::Std_obj::string(e));
HXDLIN( 413)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),413,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("guardarEventos",48,ad,3c,d8)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,guardarEventos,(void))

void ChartMenuState_obj::crearFlechaIzquierda( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_417_crearFlechaIzquierda)
HXLINE( 418)		sprite->makeGraphic(30,30,0,true,null());
HXLINE( 419)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 422)		{
HXLINE( 422)			int _g = 0;
HXDLIN( 422)			while((_g < 30)){
HXLINE( 422)				_g = (_g + 1);
HXDLIN( 422)				int y = (_g - 1);
HXLINE( 423)				{
HXLINE( 423)					int _g1 = 0;
HXDLIN( 423)					while((_g1 < 30)){
HXLINE( 423)						_g1 = (_g1 + 1);
HXDLIN( 423)						int x = (_g1 - 1);
HXLINE( 424)						bool _hx_tmp;
HXDLIN( 424)						bool _hx_tmp1;
HXDLIN( 424)						bool _hx_tmp2;
HXDLIN( 424)						bool _hx_tmp3;
HXDLIN( 424)						bool _hx_tmp4;
HXDLIN( 424)						if ((x >= 5)) {
HXLINE( 424)							_hx_tmp4 = (x <= 10);
            						}
            						else {
HXLINE( 424)							_hx_tmp4 = false;
            						}
HXDLIN( 424)						if (_hx_tmp4) {
HXLINE( 424)							_hx_tmp3 = (y >= 12);
            						}
            						else {
HXLINE( 424)							_hx_tmp3 = false;
            						}
HXDLIN( 424)						if (_hx_tmp3) {
HXLINE( 424)							_hx_tmp2 = (y <= 17);
            						}
            						else {
HXLINE( 424)							_hx_tmp2 = false;
            						}
HXDLIN( 424)						if (!(_hx_tmp2)) {
HXLINE( 425)							bool _hx_tmp5;
HXDLIN( 425)							bool _hx_tmp6;
HXDLIN( 425)							if ((x >= 0)) {
HXLINE( 425)								_hx_tmp6 = (x <= 15);
            							}
            							else {
HXLINE( 425)								_hx_tmp6 = false;
            							}
HXDLIN( 425)							if (_hx_tmp6) {
HXLINE( 425)								_hx_tmp5 = (y >= 14);
            							}
            							else {
HXLINE( 425)								_hx_tmp5 = false;
            							}
HXDLIN( 425)							if (_hx_tmp5) {
HXLINE( 424)								_hx_tmp1 = (y <= 15);
            							}
            							else {
HXLINE( 424)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 424)							_hx_tmp1 = true;
            						}
HXDLIN( 424)						if (!(_hx_tmp1)) {
HXLINE( 426)							bool _hx_tmp7;
HXDLIN( 426)							if ((x >= 2)) {
HXLINE( 426)								_hx_tmp7 = (x <= 12);
            							}
            							else {
HXLINE( 426)								_hx_tmp7 = false;
            							}
HXDLIN( 426)							if (_hx_tmp7) {
HXLINE( 424)								_hx_tmp = (::Math_obj::abs(( (Float)((y - 14)) )) <= (12 - x));
            							}
            							else {
HXLINE( 424)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 424)							_hx_tmp = true;
            						}
HXDLIN( 424)						if (_hx_tmp) {
HXLINE( 427)							pixels->setPixel32(x,y,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,crearFlechaIzquierda,(void))

void ChartMenuState_obj::crearFlechaDerecha( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_433_crearFlechaDerecha)
HXLINE( 434)		sprite->makeGraphic(30,30,0,true,null());
HXLINE( 435)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 438)		{
HXLINE( 438)			int _g = 0;
HXDLIN( 438)			while((_g < 30)){
HXLINE( 438)				_g = (_g + 1);
HXDLIN( 438)				int y = (_g - 1);
HXLINE( 439)				{
HXLINE( 439)					int _g1 = 0;
HXDLIN( 439)					while((_g1 < 30)){
HXLINE( 439)						_g1 = (_g1 + 1);
HXDLIN( 439)						int x = (_g1 - 1);
HXLINE( 440)						bool _hx_tmp;
HXDLIN( 440)						bool _hx_tmp1;
HXDLIN( 440)						bool _hx_tmp2;
HXDLIN( 440)						bool _hx_tmp3;
HXDLIN( 440)						bool _hx_tmp4;
HXDLIN( 440)						if ((x >= 19)) {
HXLINE( 440)							_hx_tmp4 = (x <= 24);
            						}
            						else {
HXLINE( 440)							_hx_tmp4 = false;
            						}
HXDLIN( 440)						if (_hx_tmp4) {
HXLINE( 440)							_hx_tmp3 = (y >= 12);
            						}
            						else {
HXLINE( 440)							_hx_tmp3 = false;
            						}
HXDLIN( 440)						if (_hx_tmp3) {
HXLINE( 440)							_hx_tmp2 = (y <= 17);
            						}
            						else {
HXLINE( 440)							_hx_tmp2 = false;
            						}
HXDLIN( 440)						if (!(_hx_tmp2)) {
HXLINE( 441)							bool _hx_tmp5;
HXDLIN( 441)							bool _hx_tmp6;
HXDLIN( 441)							if ((x >= 14)) {
HXLINE( 441)								_hx_tmp6 = (x <= 29);
            							}
            							else {
HXLINE( 441)								_hx_tmp6 = false;
            							}
HXDLIN( 441)							if (_hx_tmp6) {
HXLINE( 441)								_hx_tmp5 = (y >= 14);
            							}
            							else {
HXLINE( 441)								_hx_tmp5 = false;
            							}
HXDLIN( 441)							if (_hx_tmp5) {
HXLINE( 440)								_hx_tmp1 = (y <= 15);
            							}
            							else {
HXLINE( 440)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 440)							_hx_tmp1 = true;
            						}
HXDLIN( 440)						if (!(_hx_tmp1)) {
HXLINE( 442)							bool _hx_tmp7;
HXDLIN( 442)							if ((x >= 17)) {
HXLINE( 442)								_hx_tmp7 = (x <= 27);
            							}
            							else {
HXLINE( 442)								_hx_tmp7 = false;
            							}
HXDLIN( 442)							if (_hx_tmp7) {
HXLINE( 440)								_hx_tmp = (::Math_obj::abs(( (Float)((y - 14)) )) <= (x - 17));
            							}
            							else {
HXLINE( 440)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 440)							_hx_tmp = true;
            						}
HXDLIN( 440)						if (_hx_tmp) {
HXLINE( 443)							pixels->setPixel32(x,y,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,crearFlechaDerecha,(void))

void ChartMenuState_obj::crearFlechaArriba( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_449_crearFlechaArriba)
HXLINE( 450)		sprite->makeGraphic(30,30,0,true,null());
HXLINE( 451)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 454)		{
HXLINE( 454)			int _g = 0;
HXDLIN( 454)			while((_g < 30)){
HXLINE( 454)				_g = (_g + 1);
HXDLIN( 454)				int y = (_g - 1);
HXLINE( 455)				{
HXLINE( 455)					int _g1 = 0;
HXDLIN( 455)					while((_g1 < 30)){
HXLINE( 455)						_g1 = (_g1 + 1);
HXDLIN( 455)						int x = (_g1 - 1);
HXLINE( 456)						bool _hx_tmp;
HXDLIN( 456)						bool _hx_tmp1;
HXDLIN( 456)						bool _hx_tmp2;
HXDLIN( 456)						bool _hx_tmp3;
HXDLIN( 456)						bool _hx_tmp4;
HXDLIN( 456)						if ((x >= 12)) {
HXLINE( 456)							_hx_tmp4 = (x <= 17);
            						}
            						else {
HXLINE( 456)							_hx_tmp4 = false;
            						}
HXDLIN( 456)						if (_hx_tmp4) {
HXLINE( 456)							_hx_tmp3 = (y >= 5);
            						}
            						else {
HXLINE( 456)							_hx_tmp3 = false;
            						}
HXDLIN( 456)						if (_hx_tmp3) {
HXLINE( 456)							_hx_tmp2 = (y <= 10);
            						}
            						else {
HXLINE( 456)							_hx_tmp2 = false;
            						}
HXDLIN( 456)						if (!(_hx_tmp2)) {
HXLINE( 457)							bool _hx_tmp5;
HXDLIN( 457)							bool _hx_tmp6;
HXDLIN( 457)							if ((x >= 14)) {
HXLINE( 457)								_hx_tmp6 = (x <= 15);
            							}
            							else {
HXLINE( 457)								_hx_tmp6 = false;
            							}
HXDLIN( 457)							if (_hx_tmp6) {
HXLINE( 457)								_hx_tmp5 = (y >= 0);
            							}
            							else {
HXLINE( 457)								_hx_tmp5 = false;
            							}
HXDLIN( 457)							if (_hx_tmp5) {
HXLINE( 456)								_hx_tmp1 = (y <= 15);
            							}
            							else {
HXLINE( 456)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 456)							_hx_tmp1 = true;
            						}
HXDLIN( 456)						if (!(_hx_tmp1)) {
HXLINE( 458)							bool _hx_tmp7;
HXDLIN( 458)							if ((y >= 2)) {
HXLINE( 458)								_hx_tmp7 = (y <= 12);
            							}
            							else {
HXLINE( 458)								_hx_tmp7 = false;
            							}
HXDLIN( 458)							if (_hx_tmp7) {
HXLINE( 456)								_hx_tmp = (::Math_obj::abs(( (Float)((x - 14)) )) <= (12 - y));
            							}
            							else {
HXLINE( 456)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 456)							_hx_tmp = true;
            						}
HXDLIN( 456)						if (_hx_tmp) {
HXLINE( 459)							pixels->setPixel32(x,y,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,crearFlechaArriba,(void))

void ChartMenuState_obj::crearFlechaAbajo( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_465_crearFlechaAbajo)
HXLINE( 466)		sprite->makeGraphic(30,30,0,true,null());
HXLINE( 467)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 470)		{
HXLINE( 470)			int _g = 0;
HXDLIN( 470)			while((_g < 30)){
HXLINE( 470)				_g = (_g + 1);
HXDLIN( 470)				int y = (_g - 1);
HXLINE( 471)				{
HXLINE( 471)					int _g1 = 0;
HXDLIN( 471)					while((_g1 < 30)){
HXLINE( 471)						_g1 = (_g1 + 1);
HXDLIN( 471)						int x = (_g1 - 1);
HXLINE( 472)						bool _hx_tmp;
HXDLIN( 472)						bool _hx_tmp1;
HXDLIN( 472)						bool _hx_tmp2;
HXDLIN( 472)						bool _hx_tmp3;
HXDLIN( 472)						bool _hx_tmp4;
HXDLIN( 472)						if ((x >= 12)) {
HXLINE( 472)							_hx_tmp4 = (x <= 17);
            						}
            						else {
HXLINE( 472)							_hx_tmp4 = false;
            						}
HXDLIN( 472)						if (_hx_tmp4) {
HXLINE( 472)							_hx_tmp3 = (y >= 19);
            						}
            						else {
HXLINE( 472)							_hx_tmp3 = false;
            						}
HXDLIN( 472)						if (_hx_tmp3) {
HXLINE( 472)							_hx_tmp2 = (y <= 24);
            						}
            						else {
HXLINE( 472)							_hx_tmp2 = false;
            						}
HXDLIN( 472)						if (!(_hx_tmp2)) {
HXLINE( 473)							bool _hx_tmp5;
HXDLIN( 473)							bool _hx_tmp6;
HXDLIN( 473)							if ((x >= 14)) {
HXLINE( 473)								_hx_tmp6 = (x <= 15);
            							}
            							else {
HXLINE( 473)								_hx_tmp6 = false;
            							}
HXDLIN( 473)							if (_hx_tmp6) {
HXLINE( 473)								_hx_tmp5 = (y >= 14);
            							}
            							else {
HXLINE( 473)								_hx_tmp5 = false;
            							}
HXDLIN( 473)							if (_hx_tmp5) {
HXLINE( 472)								_hx_tmp1 = (y <= 29);
            							}
            							else {
HXLINE( 472)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 472)							_hx_tmp1 = true;
            						}
HXDLIN( 472)						if (!(_hx_tmp1)) {
HXLINE( 474)							bool _hx_tmp7;
HXDLIN( 474)							if ((y >= 17)) {
HXLINE( 474)								_hx_tmp7 = (y <= 27);
            							}
            							else {
HXLINE( 474)								_hx_tmp7 = false;
            							}
HXDLIN( 474)							if (_hx_tmp7) {
HXLINE( 472)								_hx_tmp = (::Math_obj::abs(( (Float)((x - 14)) )) <= (y - 17));
            							}
            							else {
HXLINE( 472)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 472)							_hx_tmp = true;
            						}
HXDLIN( 472)						if (_hx_tmp) {
HXLINE( 475)							pixels->setPixel32(x,y,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,crearFlechaAbajo,(void))

void ChartMenuState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_481_update)
HXLINE( 482)		this->super::update(elapsed);
HXLINE( 484)		if (this->isPlaying) {
HXLINE( 485)			 ::states::debug::ChartMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 485)			_hx_tmp->songPosition = (_hx_tmp->songPosition + (elapsed * ( (Float)(1000) )));
HXLINE( 486)			this->currentBeat = ((this->songPosition / ( (Float)(1000) )) * (this->bpm / ( (Float)(60) )));
            		}
HXLINE( 489)		this->beatText->set_text((HX_("Beat: ",bc,51,7c,cb) + ::Math_obj::floor(this->currentBeat)));
HXLINE( 490)		this->sectionText->set_text((HX_("Section: ",ab,1b,24,2a) + this->currentSection));
HXLINE( 492)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 492)		if (_this->keyManager->checkStatusUnsafe(32,_this->status)) {
HXLINE( 493)			this->togglePlay();
            		}
HXLINE( 496)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 498)			bool notaClicada = false;
HXLINE( 499)			{
HXLINE( 499)				int _g = 0;
HXDLIN( 499)				::Array< ::Dynamic> _g1 = this->notes->members;
HXDLIN( 499)				while((_g < _g1->length)){
HXLINE( 499)					 ::flixel::FlxBasic nota = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 499)					_g = (_g + 1);
HXLINE( 500)					if (::hx::IsNotNull( nota )) {
HXLINE( 501)						 ::flixel::FlxSprite sprite = ( ( ::flixel::FlxSprite)(nota) );
HXLINE( 502)						if (sprite->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 503)							this->notaSeleccionada = sprite;
HXLINE( 504)							notaClicada = true;
HXLINE( 505)							::haxe::Log_obj::trace(HX_W(u"\U0001f3b5 Nota seleccionada",ab09,ea00),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),505,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("update",09,86,05,87)));
HXLINE( 506)							goto _hx_goto_37;
            						}
            					}
            				}
            				_hx_goto_37:;
            			}
HXLINE( 511)			if (!(notaClicada)) {
HXLINE( 512)				this->colocarNota(( (Float)(::flixel::FlxG_obj::mouse->x) ),( (Float)(::flixel::FlxG_obj::mouse->y) ));
HXLINE( 513)				this->notaSeleccionada = null();
            			}
            		}
HXLINE( 518)		if (::hx::IsNotNull( this->notaSeleccionada )) {
HXLINE( 519)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 519)			if (_this1->keyManager->checkStatusUnsafe(69,_this1->status)) {
HXLINE( 520)				int indiceNota = this->notes->members->indexOf(this->notaSeleccionada,null());
HXLINE( 521)				bool _hx_tmp1;
HXDLIN( 521)				if ((indiceNota != -1)) {
HXLINE( 521)					_hx_tmp1 = (indiceNota < this->chartNotes->length);
            				}
            				else {
HXLINE( 521)					_hx_tmp1 = false;
            				}
HXDLIN( 521)				if (_hx_tmp1) {
HXLINE( 522)					 ::Dynamic fh = this->chartNotes->__get(indiceNota);
HXDLIN( 522)					fh->__SetField(HX_("length",e6,94,07,9f),(fh->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic) + 1),::hx::paccDynamic);
HXLINE( 523)					this->actualizarNotaLarga(this->notaSeleccionada,this->chartNotes->__get(indiceNota));
HXLINE( 524)					::haxe::Log_obj::trace( ::Dynamic((HX_W(u"\u2b06\ufe0f Nota alargada: ",ca15,0455) + this->chartNotes->__get(indiceNota)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic))),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),524,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("update",09,86,05,87)));
            				}
            			}
HXLINE( 528)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 528)			if (_this2->keyManager->checkStatusUnsafe(81,_this2->status)) {
HXLINE( 529)				int indiceNota1 = this->notes->members->indexOf(this->notaSeleccionada,null());
HXLINE( 530)				bool _hx_tmp2;
HXDLIN( 530)				if ((indiceNota1 != -1)) {
HXLINE( 530)					_hx_tmp2 = (indiceNota1 < this->chartNotes->length);
            				}
            				else {
HXLINE( 530)					_hx_tmp2 = false;
            				}
HXDLIN( 530)				if (_hx_tmp2) {
HXLINE( 531)					if (::hx::IsGreater( this->chartNotes->__get(indiceNota1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),0 )) {
HXLINE( 532)						 ::Dynamic fh1 = this->chartNotes->__get(indiceNota1);
HXDLIN( 532)						fh1->__SetField(HX_("length",e6,94,07,9f),(( (Float)(fh1->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) ) - ( (Float)(1) )),::hx::paccDynamic);
HXLINE( 533)						this->actualizarNotaLarga(this->notaSeleccionada,this->chartNotes->__get(indiceNota1));
HXLINE( 534)						::haxe::Log_obj::trace( ::Dynamic((HX_W(u"\u2b07\ufe0f Nota acortada: ",ac30,53a3) + this->chartNotes->__get(indiceNota1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic))),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),534,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("update",09,86,05,87)));
            					}
            				}
            			}
            		}
HXLINE( 541)		bool _hx_tmp3;
HXDLIN( 541)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 541)		if (!(_this3->keyManager->checkStatusUnsafe(38,_this3->status))) {
HXLINE( 541)			_hx_tmp3 = (::flixel::FlxG_obj::mouse->wheel > 0);
            		}
            		else {
HXLINE( 541)			_hx_tmp3 = true;
            		}
HXDLIN( 541)		if (_hx_tmp3) {
HXLINE( 542)			 ::flixel::FlxCamera fh2 = ::flixel::FlxG_obj::camera;
HXDLIN( 542)			fh2->scroll->set_y((fh2->scroll->y - (( (Float)(300) ) * elapsed)));
HXLINE( 543)			if ((::flixel::FlxG_obj::camera->scroll->y < 0)) {
HXLINE( 543)				::flixel::FlxG_obj::camera->scroll->set_y(( (Float)(0) ));
            			}
            		}
HXLINE( 545)		bool _hx_tmp4;
HXDLIN( 545)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 545)		if (!(_this4->keyManager->checkStatusUnsafe(40,_this4->status))) {
HXLINE( 545)			_hx_tmp4 = (::flixel::FlxG_obj::mouse->wheel < 0);
            		}
            		else {
HXLINE( 545)			_hx_tmp4 = true;
            		}
HXDLIN( 545)		if (_hx_tmp4) {
HXLINE( 546)			 ::flixel::FlxCamera fh3 = ::flixel::FlxG_obj::camera;
HXDLIN( 546)			fh3->scroll->set_y((fh3->scroll->y + (( (Float)(300) ) * elapsed)));
            		}
HXLINE( 550)		bool _hx_tmp5;
HXDLIN( 550)		bool _hx_tmp6;
HXDLIN( 550)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 550)			 ::flixel::text::FlxText _hx_tmp7 = this->nameInput;
HXDLIN( 550)			_hx_tmp6 = _hx_tmp7->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null());
            		}
            		else {
HXLINE( 550)			_hx_tmp6 = false;
            		}
HXDLIN( 550)		if (_hx_tmp6) {
HXLINE( 550)			_hx_tmp5 = !(this->showingDialog);
            		}
            		else {
HXLINE( 550)			_hx_tmp5 = false;
            		}
HXDLIN( 550)		if (_hx_tmp5) {
HXLINE( 551)			this->editarNombre();
            		}
HXLINE( 554)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 554)		if (_this5->keyManager->checkStatusUnsafe(27,_this5->status)) {
HXLINE( 555)			if (this->showingDialog) {
HXLINE( 556)				this->cerrarDialog();
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				 ::states::menu::MenuDebugState _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_558_update)
HXLINE( 558)					return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_558_update)
HXLINE( 558)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 558)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE( 558)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 558)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 558)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 558)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            			}
            		}
            	}


void ChartMenuState_obj::actualizarNotaLarga( ::flixel::FlxSprite sprite, ::Dynamic nota){
            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_564_actualizarNotaLarga)
HXDLIN( 564)		if (::hx::IsGreater( nota->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),0 )) {
HXLINE( 566)			 ::flixel::FlxSprite lineaHold =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(sprite->x + 12),(sprite->y + 30),null());
HXLINE( 567)			lineaHold->makeGraphic(6,::Std_obj::_hx_int((( (Float)(nota->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) ) * ( (Float)(20) ))),-256,null(),null());
HXLINE( 570)			{
HXLINE( 570)				int _g = 0;
HXDLIN( 570)				::Array< ::Dynamic> _g1 = this->notes->members;
HXDLIN( 570)				while((_g < _g1->length)){
HXLINE( 570)					 ::flixel::FlxBasic member = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 570)					_g = (_g + 1);
HXLINE( 571)					bool _hx_tmp;
HXDLIN( 571)					if (::hx::IsNotNull( member )) {
HXLINE( 571)						_hx_tmp = ::hx::IsInstanceNotEq( member,sprite );
            					}
            					else {
HXLINE( 571)						_hx_tmp = false;
            					}
HXDLIN( 571)					if (_hx_tmp) {
HXLINE( 572)						 ::flixel::FlxSprite memberSprite = ( ( ::flixel::FlxSprite)(member) );
HXLINE( 573)						bool _hx_tmp1;
HXDLIN( 573)						if ((::Math_obj::abs((memberSprite->x - lineaHold->x)) < 10)) {
HXLINE( 573)							_hx_tmp1 = (::Math_obj::abs((memberSprite->y - lineaHold->y)) < 10);
            						}
            						else {
HXLINE( 573)							_hx_tmp1 = false;
            						}
HXDLIN( 573)						if (_hx_tmp1) {
HXLINE( 575)							this->notes->remove(member,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 576)							goto _hx_goto_41;
            						}
            					}
            				}
            				_hx_goto_41:;
            			}
HXLINE( 581)			this->notes->add(lineaHold).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,actualizarNotaLarga,(void))

void ChartMenuState_obj::seleccionarCancion(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_586_seleccionarCancion)
HXDLIN( 586)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 587)			::String chartsPath = HX_("assets/charts",21,91,2c,59);
HXLINE( 588)			if (::sys::FileSystem_obj::exists(chartsPath)) {
HXLINE( 589)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(chartsPath);
HXLINE( 590)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 590)				{
HXLINE( 590)					int _g1 = 0;
HXDLIN( 590)					::Array< ::String > _g2 = files;
HXDLIN( 590)					while((_g1 < _g2->length)){
HXLINE( 590)						::String v = _g2->__get(_g1);
HXDLIN( 590)						_g1 = (_g1 + 1);
HXDLIN( 590)						if (::sys::FileSystem_obj::isDirectory(((chartsPath + HX_("/",2f,00,00,00)) + v))) {
HXLINE( 590)							_g->push(v);
            						}
            					}
            				}
HXDLIN( 590)				::Array< ::String > songFolders = _g;
HXLINE( 592)				if ((songFolders->length > 0)) {
HXLINE( 593)					::String selectedSong = songFolders->__get(0);
HXLINE( 594)					::haxe::Log_obj::trace((HX_W(u"\U0001f3b5 Canci\u00f3n seleccionada: ",bb35,e8ef) + selectedSong),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),594,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("seleccionarCancion",07,f5,98,1f)));
HXLINE( 596)					::String scriptPath = HX_("assets/scripts/1.hx",20,ce,f9,e8);
HXLINE( 597)					if (::sys::FileSystem_obj::exists(scriptPath)) {
HXLINE( 598)						::haxe::Log_obj::trace(HX_W(u"\U0001f4dc Script de eventos cargado",e005,b59c),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),598,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("seleccionarCancion",07,f5,98,1f)));
            					}
HXLINE( 601)					::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            				}
            				else {
HXLINE( 603)					::haxe::Log_obj::trace(HX_W(u"\u26a0\ufe0f No hay canciones disponibles",dc26,5467),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),603,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("seleccionarCancion",07,f5,98,1f)));
HXLINE( 604)					::flixel::FlxG_obj::camera->flash((int)1157627648,((Float)0.3),null(),null());
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g3 = _hx_e;
HXLINE( 607)				{
HXLINE( 607)					null();
            				}
HXDLIN( 607)				 ::Dynamic e = _g3;
HXDLIN( 607)				{
HXLINE( 608)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 608)					::String _hx_tmp1 = (HX_W(u"Error seleccionando canci\u00f3n: ",cd51,4587) + ::Std_obj::string(e));
HXDLIN( 608)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),608,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("seleccionarCancion",07,f5,98,1f)));
HXLINE( 609)					::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,seleccionarCancion,(void))

void ChartMenuState_obj::crearFlechaEvento( ::flixel::FlxSprite sprite,int color){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_613_crearFlechaEvento)
HXLINE( 614)		sprite->makeGraphic(30,30,0,true,null());
HXLINE( 615)		 ::openfl::display::BitmapData pixels = sprite->get_pixels();
HXLINE( 617)		{
HXLINE( 617)			int _g = 0;
HXDLIN( 617)			while((_g < 30)){
HXLINE( 617)				_g = (_g + 1);
HXDLIN( 617)				int y = (_g - 1);
HXLINE( 618)				{
HXLINE( 618)					int _g1 = 0;
HXDLIN( 618)					while((_g1 < 30)){
HXLINE( 618)						_g1 = (_g1 + 1);
HXDLIN( 618)						int x = (_g1 - 1);
HXLINE( 619)						bool _hx_tmp;
HXDLIN( 619)						bool _hx_tmp1;
HXDLIN( 619)						bool _hx_tmp2;
HXDLIN( 619)						if ((x >= 5)) {
HXLINE( 619)							_hx_tmp2 = (x <= 25);
            						}
            						else {
HXLINE( 619)							_hx_tmp2 = false;
            						}
HXDLIN( 619)						if (_hx_tmp2) {
HXLINE( 619)							_hx_tmp1 = (y >= 10);
            						}
            						else {
HXLINE( 619)							_hx_tmp1 = false;
            						}
HXDLIN( 619)						if (_hx_tmp1) {
HXLINE( 619)							_hx_tmp = (y <= 20);
            						}
            						else {
HXLINE( 619)							_hx_tmp = false;
            						}
HXDLIN( 619)						if (_hx_tmp) {
HXLINE( 620)							bool _hx_tmp3;
HXDLIN( 620)							if ((x > 15)) {
HXLINE( 620)								_hx_tmp3 = ((x - 15) <= (( (Float)(20) ) - ::Math_obj::abs(( (Float)((y - 15)) ))));
            							}
            							else {
HXLINE( 620)								_hx_tmp3 = true;
            							}
HXDLIN( 620)							if (_hx_tmp3) {
HXLINE( 621)								pixels->setPixel32(x,y,(color | -16777216));
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,crearFlechaEvento,(void))

void ChartMenuState_obj::detectarPersonajes(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_629_detectarPersonajes)
HXDLIN( 629)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 630)			::String charactersPath = HX_("assets/charater",42,e8,bd,5d);
HXLINE( 631)			if (::sys::FileSystem_obj::exists(charactersPath)) {
HXLINE( 632)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(charactersPath);
HXLINE( 633)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 633)				{
HXLINE( 633)					int _g1 = 0;
HXDLIN( 633)					::Array< ::String > _g2 = files;
HXDLIN( 633)					while((_g1 < _g2->length)){
HXLINE( 633)						::String v = _g2->__get(_g1);
HXDLIN( 633)						_g1 = (_g1 + 1);
HXDLIN( 633)						if ((v.indexOf(HX_(".json",56,f1,d6,c2),null()) != -1)) {
HXLINE( 633)							_g->push(v);
            						}
            					}
            				}
HXDLIN( 633)				::Array< ::String > jsonFiles = _g;
HXLINE( 635)				{
HXLINE( 635)					int _g3 = 0;
HXDLIN( 635)					while((_g3 < jsonFiles->length)){
HXLINE( 635)						::String file = jsonFiles->__get(_g3);
HXDLIN( 635)						_g3 = (_g3 + 1);
HXLINE( 636)						::String charName = ::StringTools_obj::replace(file,HX_(".json",56,f1,d6,c2),HX_("",00,00,00,00));
HXLINE( 637)						this->availableCharacters->push(charName);
            					}
            				}
HXLINE( 640)				if ((this->availableCharacters->length == 0)) {
HXLINE( 641)					this->availableCharacters = ::Array_obj< ::String >::fromData( _hx_array_data_ef8541bb_51,2);
            				}
HXLINE( 644)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 644)				::String _hx_tmp1 = (HX_W(u"\U0001f464 Personajes detectados: ",cae6,5bce) + this->availableCharacters->join(HX_(", ",74,26,00,00)));
HXDLIN( 644)				_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),644,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("detectarPersonajes",e0,9e,66,82)));
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g4 = _hx_e;
HXLINE( 646)				{
HXLINE( 646)					null();
            				}
HXDLIN( 646)				 ::Dynamic e = _g4;
HXDLIN( 646)				{
HXLINE( 647)					this->availableCharacters = ::Array_obj< ::String >::fromData( _hx_array_data_ef8541bb_52,2);
HXLINE( 648)					 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 648)					::String _hx_tmp3 = (HX_("Error detectando personajes: ",7f,82,b6,b0) + ::Std_obj::string(e));
HXDLIN( 648)					_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),648,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("detectarPersonajes",e0,9e,66,82)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,detectarPersonajes,(void))

void ChartMenuState_obj::cambiarPlayer(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_652_cambiarPlayer)
HXLINE( 653)		int currentIndex = this->availableCharacters->indexOf(this->playerCharacter,null());
HXLINE( 654)		int nextIndex = ::hx::Mod((currentIndex + 1),this->availableCharacters->length);
HXLINE( 655)		this->playerCharacter = this->availableCharacters->__get(nextIndex);
HXLINE( 657)		::haxe::Log_obj::trace((HX_W(u"\U0001f464 Player cambiado a: ",4bbe,c59c) + this->playerCharacter),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),657,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("cambiarPlayer",c8,30,2c,80)));
HXLINE( 658)		::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.2),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,cambiarPlayer,(void))

void ChartMenuState_obj::cambiarOpponent(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_661_cambiarOpponent)
HXLINE( 662)		int currentIndex = this->availableCharacters->indexOf(this->opponentCharacter,null());
HXLINE( 663)		int nextIndex = ::hx::Mod((currentIndex + 1),this->availableCharacters->length);
HXLINE( 664)		this->opponentCharacter = this->availableCharacters->__get(nextIndex);
HXLINE( 666)		::haxe::Log_obj::trace((HX_W(u"\U0001f47f Opponent cambiado a: ",00dd,0117) + this->opponentCharacter),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),666,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("cambiarOpponent",c4,66,95,b8)));
HXLINE( 667)		::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.2),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,cambiarOpponent,(void))

void ChartMenuState_obj::cambiarGF(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_670_cambiarGF)
HXLINE( 671)		int currentIndex = this->availableCharacters->indexOf(this->gfCharacter,null());
HXLINE( 672)		int nextIndex = ::hx::Mod((currentIndex + 1),this->availableCharacters->length);
HXLINE( 673)		this->gfCharacter = this->availableCharacters->__get(nextIndex);
HXLINE( 675)		::haxe::Log_obj::trace((HX_W(u"\U0001f483 GF cambiada a: ",9710,d03e) + this->gfCharacter),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),675,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("cambiarGF",e6,1f,9d,d8)));
HXLINE( 676)		::flixel::FlxG_obj::camera->flash((int)1157627648,((Float)0.2),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,cambiarGF,(void))

void ChartMenuState_obj::editarPosiciones(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_679_editarPosiciones)
HXLINE( 681)		this->playerPos = ::Array_obj< Float >::__new(2)->init(0,(this->playerPos->__get(0) + 50))->init(1,this->playerPos->__get(1));
HXLINE( 682)		this->opponentPos = ::Array_obj< Float >::__new(2)->init(0,(this->opponentPos->__get(0) + 50))->init(1,this->opponentPos->__get(1));
HXLINE( 683)		this->gfPos = ::Array_obj< Float >::__new(2)->init(0,(this->gfPos->__get(0) + 50))->init(1,this->gfPos->__get(1));
HXLINE( 685)		::haxe::Log_obj::trace(HX_W(u"\U0001f4cd Posiciones actualizadas",ecf5,4e7c),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),685,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("editarPosiciones",63,14,32,2b)));
HXLINE( 686)		::flixel::FlxG_obj::camera->flash((int)1140916223,((Float)0.2),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,editarPosiciones,(void))

void ChartMenuState_obj::editarNombre(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_691_editarNombre)
HXDLIN( 691)		::haxe::Log_obj::trace(HX_W(u"\u270f\ufe0f Editando nombre del chart",77e1,52be),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),691,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("editarNombre",e4,8e,aa,4d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,editarNombre,(void))

void ChartMenuState_obj::mostrarDialogoReemplazo(::String fileName, ::Dynamic chartData){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::states::debug::ChartMenuState,_gthis,::String,fileName, ::Dynamic,chartData) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_708_mostrarDialogoReemplazo)
HXLINE( 709)			_gthis->guardarArchivo(fileName,chartData);
HXLINE( 710)			_gthis->cerrarDialog();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::debug::ChartMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_716_mostrarDialogoReemplazo)
HXLINE( 716)			_gthis->cerrarDialog();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27361e37a5c1df2d_694_mostrarDialogoReemplazo)
HXDLIN( 694)		 ::states::debug::ChartMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 695)		this->showingDialog = true;
HXLINE( 697)		this->confirmDialog =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(200) )),((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(100) )),null());
HXLINE( 698)		this->confirmDialog->makeGraphic(400,200,-587202560,null(),null());
HXLINE( 699)		{
HXLINE( 699)			 ::flixel::math::FlxBasePoint this1 = this->confirmDialog->scrollFactor;
HXDLIN( 699)			this1->set_x(( (Float)(0) ));
HXDLIN( 699)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 700)		this->add(this->confirmDialog);
HXLINE( 702)		 ::flixel::text::FlxText dialogText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 20),(this->confirmDialog->y + 20),360,((HX_("El archivo '",fa,41,fd,f2) + this->chartName) + HX_W(u".json\' ya existe.\n\n\u00bfQuieres reemplazarlo?",20a7,ba8a)),null(),null());
HXLINE( 704)		dialogText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 705)		{
HXLINE( 705)			 ::flixel::math::FlxBasePoint this2 = dialogText->scrollFactor;
HXDLIN( 705)			this2->set_x(( (Float)(0) ));
HXDLIN( 705)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 706)		this->add(dialogText);
HXLINE( 708)		 ::flixel::ui::FlxButton btnSi =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 50),(this->confirmDialog->y + 120),HX_W(u"S\u00cd",a57d,003f), ::Dynamic(new _hx_Closure_0(_gthis,fileName,chartData)));
HXLINE( 712)		{
HXLINE( 712)			 ::flixel::math::FlxBasePoint this3 = btnSi->scrollFactor;
HXDLIN( 712)			this3->set_x(( (Float)(0) ));
HXDLIN( 712)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 713)		this->add(btnSi);
HXLINE( 715)		 ::flixel::ui::FlxButton btnNo =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 250),(this->confirmDialog->y + 120),HX_("NO",41,44,00,00), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 718)		{
HXLINE( 718)			 ::flixel::math::FlxBasePoint this4 = btnNo->scrollFactor;
HXDLIN( 718)			this4->set_x(( (Float)(0) ));
HXDLIN( 718)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 719)		this->add(btnNo);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,mostrarDialogoReemplazo,(void))

void ChartMenuState_obj::cerrarDialog(){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_722_cerrarDialog)
HXLINE( 723)		this->showingDialog = false;
HXLINE( 724)		if (::hx::IsNotNull( this->confirmDialog )) {
HXLINE( 725)			this->remove(this->confirmDialog,null());
HXLINE( 726)			this->confirmDialog = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartMenuState_obj,cerrarDialog,(void))

void ChartMenuState_obj::guardarArchivo(::String fileName, ::Dynamic chartData){
            	HX_STACKFRAME(&_hx_pos_27361e37a5c1df2d_731_guardarArchivo)
HXDLIN( 731)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 732)			 ::Dynamic replacer = null();
HXDLIN( 732)			::String jsonString = ::haxe::format::JsonPrinter_obj::print(chartData,replacer,HX_("  ",00,1c,00,00));
HXLINE( 733)			::sys::io::File_obj::saveContent(fileName,jsonString);
HXLINE( 735)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Chart guardado: ",1b54,8004) + fileName),::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),735,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("guardarArchivo",56,9d,ac,6d)));
HXLINE( 736)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 737)				{
HXLINE( 737)					null();
            				}
HXDLIN( 737)				 ::Dynamic e = _g;
HXDLIN( 737)				{
HXLINE( 738)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 738)					::String _hx_tmp1 = (HX_("Error guardando: ",8b,4c,fb,c8) + ::Std_obj::string(e));
HXDLIN( 738)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/ChartMenuState.hx",d5,50,48,2d),738,HX_("states.debug.ChartMenuState",bb,41,85,ef),HX_("guardarArchivo",56,9d,ac,6d)));
HXLINE( 739)					::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartMenuState_obj,guardarArchivo,(void))


::hx::ObjectPtr< ChartMenuState_obj > ChartMenuState_obj::__new() {
	::hx::ObjectPtr< ChartMenuState_obj > __this = new ChartMenuState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ChartMenuState_obj > ChartMenuState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ChartMenuState_obj *__this = (ChartMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartMenuState_obj), true, "states.debug.ChartMenuState"));
	*(void **)__this = ChartMenuState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ChartMenuState_obj::ChartMenuState_obj()
{
}

void ChartMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartMenuState);
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(events,"events");
	HX_MARK_MEMBER_NAME(currentBeat,"currentBeat");
	HX_MARK_MEMBER_NAME(songPosition,"songPosition");
	HX_MARK_MEMBER_NAME(bpm,"bpm");
	HX_MARK_MEMBER_NAME(infoText,"infoText");
	HX_MARK_MEMBER_NAME(beatText,"beatText");
	HX_MARK_MEMBER_NAME(sectionText,"sectionText");
	HX_MARK_MEMBER_NAME(eventsPanel,"eventsPanel");
	HX_MARK_MEMBER_NAME(currentSection,"currentSection");
	HX_MARK_MEMBER_NAME(gridSize,"gridSize");
	HX_MARK_MEMBER_NAME(isPlaying,"isPlaying");
	HX_MARK_MEMBER_NAME(scrollY,"scrollY");
	HX_MARK_MEMBER_NAME(modoEvento,"modoEvento");
	HX_MARK_MEMBER_NAME(chartNotes,"chartNotes");
	HX_MARK_MEMBER_NAME(chartEvents,"chartEvents");
	HX_MARK_MEMBER_NAME(notaSeleccionada,"notaSeleccionada");
	HX_MARK_MEMBER_NAME(playerCharacter,"playerCharacter");
	HX_MARK_MEMBER_NAME(opponentCharacter,"opponentCharacter");
	HX_MARK_MEMBER_NAME(gfCharacter,"gfCharacter");
	HX_MARK_MEMBER_NAME(availableCharacters,"availableCharacters");
	HX_MARK_MEMBER_NAME(playerPos,"playerPos");
	HX_MARK_MEMBER_NAME(opponentPos,"opponentPos");
	HX_MARK_MEMBER_NAME(gfPos,"gfPos");
	HX_MARK_MEMBER_NAME(chartName,"chartName");
	HX_MARK_MEMBER_NAME(nameInput,"nameInput");
	HX_MARK_MEMBER_NAME(confirmDialog,"confirmDialog");
	HX_MARK_MEMBER_NAME(showingDialog,"showingDialog");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(events,"events");
	HX_VISIT_MEMBER_NAME(currentBeat,"currentBeat");
	HX_VISIT_MEMBER_NAME(songPosition,"songPosition");
	HX_VISIT_MEMBER_NAME(bpm,"bpm");
	HX_VISIT_MEMBER_NAME(infoText,"infoText");
	HX_VISIT_MEMBER_NAME(beatText,"beatText");
	HX_VISIT_MEMBER_NAME(sectionText,"sectionText");
	HX_VISIT_MEMBER_NAME(eventsPanel,"eventsPanel");
	HX_VISIT_MEMBER_NAME(currentSection,"currentSection");
	HX_VISIT_MEMBER_NAME(gridSize,"gridSize");
	HX_VISIT_MEMBER_NAME(isPlaying,"isPlaying");
	HX_VISIT_MEMBER_NAME(scrollY,"scrollY");
	HX_VISIT_MEMBER_NAME(modoEvento,"modoEvento");
	HX_VISIT_MEMBER_NAME(chartNotes,"chartNotes");
	HX_VISIT_MEMBER_NAME(chartEvents,"chartEvents");
	HX_VISIT_MEMBER_NAME(notaSeleccionada,"notaSeleccionada");
	HX_VISIT_MEMBER_NAME(playerCharacter,"playerCharacter");
	HX_VISIT_MEMBER_NAME(opponentCharacter,"opponentCharacter");
	HX_VISIT_MEMBER_NAME(gfCharacter,"gfCharacter");
	HX_VISIT_MEMBER_NAME(availableCharacters,"availableCharacters");
	HX_VISIT_MEMBER_NAME(playerPos,"playerPos");
	HX_VISIT_MEMBER_NAME(opponentPos,"opponentPos");
	HX_VISIT_MEMBER_NAME(gfPos,"gfPos");
	HX_VISIT_MEMBER_NAME(chartName,"chartName");
	HX_VISIT_MEMBER_NAME(nameInput,"nameInput");
	HX_VISIT_MEMBER_NAME(confirmDialog,"confirmDialog");
	HX_VISIT_MEMBER_NAME(showingDialog,"showingDialog");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { return ::hx::Val( bpm ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"gfPos") ) { return ::hx::Val( gfPos ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"events") ) { return ::hx::Val( events ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollY") ) { return ::hx::Val( scrollY ); }
		if (HX_FIELD_EQ(inName,"crearUI") ) { return ::hx::Val( crearUI_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoText") ) { return ::hx::Val( infoText ); }
		if (HX_FIELD_EQ(inName,"beatText") ) { return ::hx::Val( beatText ); }
		if (HX_FIELD_EQ(inName,"gridSize") ) { return ::hx::Val( gridSize ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"isPlaying") ) { return ::hx::Val( isPlaying ); }
		if (HX_FIELD_EQ(inName,"playerPos") ) { return ::hx::Val( playerPos ); }
		if (HX_FIELD_EQ(inName,"chartName") ) { return ::hx::Val( chartName ); }
		if (HX_FIELD_EQ(inName,"nameInput") ) { return ::hx::Val( nameInput ); }
		if (HX_FIELD_EQ(inName,"crearGrid") ) { return ::hx::Val( crearGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveChart") ) { return ::hx::Val( saveChart_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadChart") ) { return ::hx::Val( loadChart_dyn() ); }
		if (HX_FIELD_EQ(inName,"cambiarGF") ) { return ::hx::Val( cambiarGF_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"modoEvento") ) { return ::hx::Val( modoEvento ); }
		if (HX_FIELD_EQ(inName,"chartNotes") ) { return ::hx::Val( chartNotes ); }
		if (HX_FIELD_EQ(inName,"togglePlay") ) { return ::hx::Val( togglePlay_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentBeat") ) { return ::hx::Val( currentBeat ); }
		if (HX_FIELD_EQ(inName,"sectionText") ) { return ::hx::Val( sectionText ); }
		if (HX_FIELD_EQ(inName,"eventsPanel") ) { return ::hx::Val( eventsPanel ); }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { return ::hx::Val( chartEvents ); }
		if (HX_FIELD_EQ(inName,"gfCharacter") ) { return ::hx::Val( gfCharacter ); }
		if (HX_FIELD_EQ(inName,"opponentPos") ) { return ::hx::Val( opponentPos ); }
		if (HX_FIELD_EQ(inName,"colocarNota") ) { return ::hx::Val( colocarNota_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { return ::hx::Val( songPosition ); }
		if (HX_FIELD_EQ(inName,"editarNombre") ) { return ::hx::Val( editarNombre_dyn() ); }
		if (HX_FIELD_EQ(inName,"cerrarDialog") ) { return ::hx::Val( cerrarDialog_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"confirmDialog") ) { return ::hx::Val( confirmDialog ); }
		if (HX_FIELD_EQ(inName,"showingDialog") ) { return ::hx::Val( showingDialog ); }
		if (HX_FIELD_EQ(inName,"cambiarPlayer") ) { return ::hx::Val( cambiarPlayer_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentSection") ) { return ::hx::Val( currentSection ); }
		if (HX_FIELD_EQ(inName,"actualizarInfo") ) { return ::hx::Val( actualizarInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"guardarEventos") ) { return ::hx::Val( guardarEventos_dyn() ); }
		if (HX_FIELD_EQ(inName,"guardarArchivo") ) { return ::hx::Val( guardarArchivo_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerCharacter") ) { return ::hx::Val( playerCharacter ); }
		if (HX_FIELD_EQ(inName,"cambiarOpponent") ) { return ::hx::Val( cambiarOpponent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"notaSeleccionada") ) { return ::hx::Val( notaSeleccionada ); }
		if (HX_FIELD_EQ(inName,"toggleModoEvento") ) { return ::hx::Val( toggleModoEvento_dyn() ); }
		if (HX_FIELD_EQ(inName,"crearFlechaAbajo") ) { return ::hx::Val( crearFlechaAbajo_dyn() ); }
		if (HX_FIELD_EQ(inName,"editarPosiciones") ) { return ::hx::Val( editarPosiciones_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"opponentCharacter") ) { return ::hx::Val( opponentCharacter ); }
		if (HX_FIELD_EQ(inName,"crearPanelEventos") ) { return ::hx::Val( crearPanelEventos_dyn() ); }
		if (HX_FIELD_EQ(inName,"crearFlechaArriba") ) { return ::hx::Val( crearFlechaArriba_dyn() ); }
		if (HX_FIELD_EQ(inName,"crearFlechaEvento") ) { return ::hx::Val( crearFlechaEvento_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"crearFlechaDerecha") ) { return ::hx::Val( crearFlechaDerecha_dyn() ); }
		if (HX_FIELD_EQ(inName,"seleccionarCancion") ) { return ::hx::Val( seleccionarCancion_dyn() ); }
		if (HX_FIELD_EQ(inName,"detectarPersonajes") ) { return ::hx::Val( detectarPersonajes_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"availableCharacters") ) { return ::hx::Val( availableCharacters ); }
		if (HX_FIELD_EQ(inName,"actualizarNotaLarga") ) { return ::hx::Val( actualizarNotaLarga_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"crearFlechaIzquierda") ) { return ::hx::Val( crearFlechaIzquierda_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"mostrarDialogoReemplazo") ) { return ::hx::Val( mostrarDialogoReemplazo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ChartMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { bpm=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfPos") ) { gfPos=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"events") ) { events=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollY") ) { scrollY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoText") ) { infoText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatText") ) { beatText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridSize") ) { gridSize=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isPlaying") ) { isPlaying=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerPos") ) { playerPos=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartName") ) { chartName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameInput") ) { nameInput=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"modoEvento") ) { modoEvento=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartNotes") ) { chartNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentBeat") ) { currentBeat=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sectionText") ) { sectionText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventsPanel") ) { eventsPanel=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { chartEvents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfCharacter") ) { gfCharacter=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentPos") ) { opponentPos=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { songPosition=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"confirmDialog") ) { confirmDialog=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showingDialog") ) { showingDialog=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentSection") ) { currentSection=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerCharacter") ) { playerCharacter=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"notaSeleccionada") ) { notaSeleccionada=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"opponentCharacter") ) { opponentCharacter=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"availableCharacters") ) { availableCharacters=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ChartMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("events",19,4f,6a,96));
	outFields->push(HX_("currentBeat",4f,ba,a5,79));
	outFields->push(HX_("songPosition",9e,dd,3b,8d));
	outFields->push(HX_("bpm",df,be,4a,00));
	outFields->push(HX_("infoText",3b,00,9e,3d));
	outFields->push(HX_("beatText",43,cd,33,18));
	outFields->push(HX_("sectionText",32,55,54,3d));
	outFields->push(HX_("eventsPanel",2b,41,43,6a));
	outFields->push(HX_("currentSection",ac,7a,6c,6b));
	outFields->push(HX_("gridSize",a7,7e,92,4e));
	outFields->push(HX_("isPlaying",a4,8c,16,8e));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("modoEvento",62,66,e3,80));
	outFields->push(HX_("chartNotes",83,4a,e9,d3));
	outFields->push(HX_("chartEvents",97,5a,ec,fc));
	outFields->push(HX_("notaSeleccionada",8f,df,00,b7));
	outFields->push(HX_("playerCharacter",08,dc,2d,2d));
	outFields->push(HX_("opponentCharacter",4c,66,38,d2));
	outFields->push(HX_("gfCharacter",8a,a5,cd,5a));
	outFields->push(HX_("availableCharacters",d3,2b,ae,e7));
	outFields->push(HX_("playerPos",b3,bc,c6,00));
	outFields->push(HX_("opponentPos",f7,7b,c4,fa));
	outFields->push(HX_("gfPos",b5,98,ee,91));
	outFields->push(HX_("chartName",49,02,7f,24));
	outFields->push(HX_("nameInput",bf,91,d2,b7));
	outFields->push(HX_("confirmDialog",e8,d5,94,10));
	outFields->push(HX_("showingDialog",ad,7e,e6,07));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartMenuState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartMenuState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartMenuState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartMenuState_obj,events),HX_("events",19,4f,6a,96)},
	{::hx::fsFloat,(int)offsetof(ChartMenuState_obj,currentBeat),HX_("currentBeat",4f,ba,a5,79)},
	{::hx::fsFloat,(int)offsetof(ChartMenuState_obj,songPosition),HX_("songPosition",9e,dd,3b,8d)},
	{::hx::fsFloat,(int)offsetof(ChartMenuState_obj,bpm),HX_("bpm",df,be,4a,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartMenuState_obj,infoText),HX_("infoText",3b,00,9e,3d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartMenuState_obj,beatText),HX_("beatText",43,cd,33,18)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartMenuState_obj,sectionText),HX_("sectionText",32,55,54,3d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartMenuState_obj,eventsPanel),HX_("eventsPanel",2b,41,43,6a)},
	{::hx::fsInt,(int)offsetof(ChartMenuState_obj,currentSection),HX_("currentSection",ac,7a,6c,6b)},
	{::hx::fsInt,(int)offsetof(ChartMenuState_obj,gridSize),HX_("gridSize",a7,7e,92,4e)},
	{::hx::fsBool,(int)offsetof(ChartMenuState_obj,isPlaying),HX_("isPlaying",a4,8c,16,8e)},
	{::hx::fsFloat,(int)offsetof(ChartMenuState_obj,scrollY),HX_("scrollY",ac,33,d8,30)},
	{::hx::fsBool,(int)offsetof(ChartMenuState_obj,modoEvento),HX_("modoEvento",62,66,e3,80)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartMenuState_obj,chartNotes),HX_("chartNotes",83,4a,e9,d3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartMenuState_obj,chartEvents),HX_("chartEvents",97,5a,ec,fc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartMenuState_obj,notaSeleccionada),HX_("notaSeleccionada",8f,df,00,b7)},
	{::hx::fsString,(int)offsetof(ChartMenuState_obj,playerCharacter),HX_("playerCharacter",08,dc,2d,2d)},
	{::hx::fsString,(int)offsetof(ChartMenuState_obj,opponentCharacter),HX_("opponentCharacter",4c,66,38,d2)},
	{::hx::fsString,(int)offsetof(ChartMenuState_obj,gfCharacter),HX_("gfCharacter",8a,a5,cd,5a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ChartMenuState_obj,availableCharacters),HX_("availableCharacters",d3,2b,ae,e7)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ChartMenuState_obj,playerPos),HX_("playerPos",b3,bc,c6,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ChartMenuState_obj,opponentPos),HX_("opponentPos",f7,7b,c4,fa)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ChartMenuState_obj,gfPos),HX_("gfPos",b5,98,ee,91)},
	{::hx::fsString,(int)offsetof(ChartMenuState_obj,chartName),HX_("chartName",49,02,7f,24)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartMenuState_obj,nameInput),HX_("nameInput",bf,91,d2,b7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartMenuState_obj,confirmDialog),HX_("confirmDialog",e8,d5,94,10)},
	{::hx::fsBool,(int)offsetof(ChartMenuState_obj,showingDialog),HX_("showingDialog",ad,7e,e6,07)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ChartMenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String ChartMenuState_obj_sMemberFields[] = {
	HX_("gridBG",0b,ce,23,18),
	HX_("strumLine",dd,79,d7,ee),
	HX_("notes",41,dc,ca,9f),
	HX_("events",19,4f,6a,96),
	HX_("currentBeat",4f,ba,a5,79),
	HX_("songPosition",9e,dd,3b,8d),
	HX_("bpm",df,be,4a,00),
	HX_("infoText",3b,00,9e,3d),
	HX_("beatText",43,cd,33,18),
	HX_("sectionText",32,55,54,3d),
	HX_("eventsPanel",2b,41,43,6a),
	HX_("currentSection",ac,7a,6c,6b),
	HX_("gridSize",a7,7e,92,4e),
	HX_("isPlaying",a4,8c,16,8e),
	HX_("scrollY",ac,33,d8,30),
	HX_("modoEvento",62,66,e3,80),
	HX_("chartNotes",83,4a,e9,d3),
	HX_("chartEvents",97,5a,ec,fc),
	HX_("notaSeleccionada",8f,df,00,b7),
	HX_("playerCharacter",08,dc,2d,2d),
	HX_("opponentCharacter",4c,66,38,d2),
	HX_("gfCharacter",8a,a5,cd,5a),
	HX_("availableCharacters",d3,2b,ae,e7),
	HX_("playerPos",b3,bc,c6,00),
	HX_("opponentPos",f7,7b,c4,fa),
	HX_("gfPos",b5,98,ee,91),
	HX_("chartName",49,02,7f,24),
	HX_("nameInput",bf,91,d2,b7),
	HX_("confirmDialog",e8,d5,94,10),
	HX_("showingDialog",ad,7e,e6,07),
	HX_("create",fc,66,0f,7c),
	HX_("crearGrid",ad,6b,5b,0f),
	HX_("crearUI",5b,23,69,11),
	HX_("togglePlay",a8,73,10,e2),
	HX_("saveChart",61,a4,60,d4),
	HX_("loadChart",d8,e8,ea,60),
	HX_("actualizarInfo",3e,75,5d,2b),
	HX_("crearPanelEventos",01,0d,f2,20),
	HX_("toggleModoEvento",16,eb,32,4b),
	HX_("colocarNota",d3,8d,01,b6),
	HX_("guardarEventos",48,ad,3c,d8),
	HX_("crearFlechaIzquierda",7a,d4,41,b6),
	HX_("crearFlechaDerecha",c4,0d,5c,de),
	HX_("crearFlechaArriba",8b,6d,fc,a5),
	HX_("crearFlechaAbajo",c1,96,ac,f2),
	HX_("update",09,86,05,87),
	HX_("actualizarNotaLarga",19,5e,da,16),
	HX_("seleccionarCancion",07,f5,98,1f),
	HX_("crearFlechaEvento",f9,45,70,84),
	HX_("detectarPersonajes",e0,9e,66,82),
	HX_("cambiarPlayer",c8,30,2c,80),
	HX_("cambiarOpponent",c4,66,95,b8),
	HX_("cambiarGF",e6,1f,9d,d8),
	HX_("editarPosiciones",63,14,32,2b),
	HX_("editarNombre",e4,8e,aa,4d),
	HX_("mostrarDialogoReemplazo",d8,ed,be,45),
	HX_("cerrarDialog",7b,71,e5,eb),
	HX_("guardarArchivo",56,9d,ac,6d),
	::String(null()) };

::hx::Class ChartMenuState_obj::__mClass;

void ChartMenuState_obj::__register()
{
	ChartMenuState_obj _hx_dummy;
	ChartMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.debug.ChartMenuState",bb,41,85,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartMenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace debug
