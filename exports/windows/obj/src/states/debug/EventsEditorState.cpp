// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_blocks_EventBlocks
#include <blocks/EventBlocks.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_debug_EventsEditorState
#include <states/debug/EventsEditorState.h>
#endif
#ifndef INCLUDED_states_menu_MenuDebugState
#include <states/menu/MenuDebugState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_865602bbcc862c58_17_new,"states.debug.EventsEditorState","new",0xf7aad556,"states.debug.EventsEditorState.new","states/debug/EventsEditorState.hx",17,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_42_getCategoriaColor,"states.debug.EventsEditorState","getCategoriaColor",0x6759295c,"states.debug.EventsEditorState.getCategoriaColor","states/debug/EventsEditorState.hx",42,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_105_create,"states.debug.EventsEditorState","create",0xbc8d5fc6,"states.debug.EventsEditorState.create","states/debug/EventsEditorState.hx",105,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_49_create,"states.debug.EventsEditorState","create",0xbc8d5fc6,"states.debug.EventsEditorState.create","states/debug/EventsEditorState.hx",49,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_110_update,"states.debug.EventsEditorState","update",0xc7837ed3,"states.debug.EventsEditorState.update","states/debug/EventsEditorState.hx",110,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_265_update,"states.debug.EventsEditorState","update",0xc7837ed3,"states.debug.EventsEditorState.update","states/debug/EventsEditorState.hx",265,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_270_crearBloqueVisual,"states.debug.EventsEditorState","crearBloqueVisual",0x0a77fdf9,"states.debug.EventsEditorState.crearBloqueVisual","states/debug/EventsEditorState.hx",270,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_322_ordenarBloques,"states.debug.EventsEditorState","ordenarBloques",0xf6a05246,"states.debug.EventsEditorState.ordenarBloques","states/debug/EventsEditorState.hx",322,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_368_obtenerTextoBloque,"states.debug.EventsEditorState","obtenerTextoBloque",0x789bfaf1,"states.debug.EventsEditorState.obtenerTextoBloque","states/debug/EventsEditorState.hx",368,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_378_dibujarConectores,"states.debug.EventsEditorState","dibujarConectores",0x1307493e,"states.debug.EventsEditorState.dibujarConectores","states/debug/EventsEditorState.hx",378,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_409_actualizarTextoBloque,"states.debug.EventsEditorState","actualizarTextoBloque",0xd8da1324,"states.debug.EventsEditorState.actualizarTextoBloque","states/debug/EventsEditorState.hx",409,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_422_refrescarListaBloques,"states.debug.EventsEditorState","refrescarListaBloques",0x13db8391,"states.debug.EventsEditorState.refrescarListaBloques","states/debug/EventsEditorState.hx",422,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_452_guardarEventos,"states.debug.EventsEditorState","guardarEventos",0xadef8012,"states.debug.EventsEditorState.guardarEventos","states/debug/EventsEditorState.hx",452,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_518_guardarComoScript,"states.debug.EventsEditorState","guardarComoScript",0xabb189e5,"states.debug.EventsEditorState.guardarComoScript","states/debug/EventsEditorState.hx",518,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_564_mostrarDialogoReemplazo,"states.debug.EventsEditorState","mostrarDialogoReemplazo",0xfae471ce,"states.debug.EventsEditorState.mostrarDialogoReemplazo","states/debug/EventsEditorState.hx",564,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_552_mostrarDialogoReemplazo,"states.debug.EventsEditorState","mostrarDialogoReemplazo",0xfae471ce,"states.debug.EventsEditorState.mostrarDialogoReemplazo","states/debug/EventsEditorState.hx",552,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_576_cerrarDialog,"states.debug.EventsEditorState","cerrarDialog",0xc31d1dc5,"states.debug.EventsEditorState.cerrarDialog","states/debug/EventsEditorState.hx",576,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_585_ejecutarBloque,"states.debug.EventsEditorState","ejecutarBloque",0xd0f43079,"states.debug.EventsEditorState.ejecutarBloque","states/debug/EventsEditorState.hx",585,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_598_modificarParametroNumerico,"states.debug.EventsEditorState","modificarParametroNumerico",0xebaa839b,"states.debug.EventsEditorState.modificarParametroNumerico","states/debug/EventsEditorState.hx",598,0x39c3ca9c)
HX_LOCAL_STACK_FRAME(_hx_pos_865602bbcc862c58_620_modificarParametroTexto,"states.debug.EventsEditorState","modificarParametroTexto",0x3d1daee9,"states.debug.EventsEditorState.modificarParametroTexto","states/debug/EventsEditorState.hx",620,0x39c3ca9c)
static const ::String _hx_array_data_1ddc3264_44[] = {
	HX_("texto",22,4b,99,0d),HX_("nombre",09,17,13,2d),HX_("mensaje",df,51,10,b9),HX_("valor",44,7a,b8,31),HX_("entrada",57,1a,59,79),
};
namespace states{
namespace debug{

void EventsEditorState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_865602bbcc862c58_17_new)
HXLINE(  38)		this->showingDialog = false;
HXLINE(  35)		this->nombreEvento = HX_("MiEvento",b1,cb,78,0d);
HXLINE(  34)		this->bloquesInfo = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  33)		this->textosBloque = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  32)		this->bloqueEditando = null();
HXLINE(  31)		this->editandoParametro = false;
HXLINE(  30)		this->bloqueOriginal = null();
HXLINE(  29)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  29)		point->_inPool = false;
HXDLIN(  29)		this->offsetArrastre = point;
HXLINE(  28)		this->bloquesDisponibles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  27)		this->bloqueArrastrado = null();
HXLINE(  26)		this->bloquesEnScript = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  24)		this->categoriasTxt = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  17)		super::__construct();
            	}

Dynamic EventsEditorState_obj::__CreateEmpty() { return new EventsEditorState_obj; }

void *EventsEditorState_obj::_hx_vtable = 0;

Dynamic EventsEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EventsEditorState_obj > _hx_result = new EventsEditorState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EventsEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x45df1a7a) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x45df1a7a;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

int EventsEditorState_obj::getCategoriaColor(::String cat,bool seleccionado){
            	HX_STACKFRAME(&_hx_pos_865602bbcc862c58_42_getCategoriaColor)
HXDLIN(  42)		::String _hx_switch_0 = cat;
            		if (  (_hx_switch_0==HX_("effect",91,5a,a3,60)) ){
HXLINE(  44)			if (seleccionado) {
HXLINE(  44)				return -8333057;
            			}
            			else {
HXLINE(  44)				return -16739862;
            			}
HXDLIN(  44)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("event",1a,c8,c4,75)) ){
HXLINE(  43)			if (seleccionado) {
HXLINE(  43)				return -10752;
            			}
            			else {
HXLINE(  43)				return -4413440;
            			}
HXDLIN(  43)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  45)			if (seleccionado) {
HXLINE(  45)				return -8388353;
            			}
            			else {
HXLINE(  45)				return -13421773;
            			}
            		}
            		_hx_goto_1:;
HXLINE(  42)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(EventsEditorState_obj,getCategoriaColor,return )

void EventsEditorState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::menu::MenuDebugState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_105_create)
HXLINE( 105)				return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_105_create)
HXLINE( 105)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 105)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE( 105)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_105_create)
HXLINE( 105)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 105)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 105)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_49_create)
HXLINE(  50)		this->super::create();
HXLINE(  53)		this->sidebar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(  54)		this->sidebar->makeGraphic(120,900,(int)-2030503688,null(),null());
HXLINE(  55)		this->add(this->sidebar);
HXLINE(  58)		this->scriptArea =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,450,20,null());
HXLINE(  59)		this->scriptArea->makeGraphic(500,(::flixel::FlxG_obj::height - 40),-13816531,null(),null());
HXLINE(  60)		this->add(this->scriptArea);
HXLINE(  62)		 ::flixel::text::FlxText titulo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,460,30,0,HX_W(u"\U0001f3b5 Eventos del Chart",96dd,4816),null(),null());
HXLINE(  63)		titulo->setFormat(null(),18,-1,null(),null(),null(),null());
HXLINE(  64)		this->add(titulo);
HXLINE(  67)		 ::flixel::text::FlxText labelNombre =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,460,60,0,HX_("Nombre:",f1,38,f2,10),null(),null());
HXLINE(  68)		labelNombre->setFormat(null(),14,-1,null(),null(),null(),null());
HXLINE(  69)		this->add(labelNombre);
HXLINE(  71)		this->inputNombre =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,520,60,200,this->nombreEvento,null(),null());
HXLINE(  72)		this->inputNombre->setFormat(null(),14,-256,null(),null(),null(),null());
HXLINE(  73)		this->add(this->inputNombre);
HXLINE(  76)		this->categorias = ::blocks::EventBlocks_obj::getCategorias();
HXLINE(  77)		::String _hx_tmp;
HXDLIN(  77)		if ((this->categorias->length > 0)) {
HXLINE(  77)			_hx_tmp = this->categorias->__get(0);
            		}
            		else {
HXLINE(  77)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(  77)		this->categoriaSeleccionada = _hx_tmp;
HXLINE(  80)		int y = 30;
HXLINE(  81)		{
HXLINE(  81)			int _g = 0;
HXDLIN(  81)			::Array< ::String > _g1 = this->categorias;
HXDLIN(  81)			while((_g < _g1->length)){
HXLINE(  81)				::String cat = _g1->__get(_g);
HXDLIN(  81)				_g = (_g + 1);
HXLINE(  82)				 ::flixel::text::FlxText txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,y,100,cat,null(),null());
HXLINE(  83)				txt->set_size(16);
HXLINE(  84)				txt->set_color(this->getCategoriaColor(cat,(cat == this->categoriaSeleccionada)));
HXLINE(  85)				txt->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(  86)				txt->set_borderColor(-16777216);
HXLINE(  87)				{
HXLINE(  87)					 ::flixel::math::FlxBasePoint this1 = txt->scrollFactor;
HXDLIN(  87)					this1->set_x(( (Float)(0) ));
HXDLIN(  87)					this1->set_y(( (Float)(0) ));
            				}
HXLINE(  88)				txt->ID = y;
HXLINE(  89)				txt->set_active(true);
HXLINE(  90)				txt->set_moves(false);
HXLINE(  91)				txt->set_immovable(true);
HXLINE(  92)				this->add(txt);
HXLINE(  93)				this->categoriasTxt->push( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("cat",16,74,4b,00),cat)
            					->setFixed(1,HX_("txt",70,6e,58,00),txt)));
HXLINE(  94)				y = (y + 32);
            			}
            		}
HXLINE(  98)		this->refrescarListaBloques();
HXLINE( 101)		 ::flixel::ui::FlxButton btnGuardar =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 240),10,HX_W(u"\U0001f4be Guardar",e731,8347),this->guardarEventos_dyn());
HXLINE( 102)		this->add(btnGuardar);
HXLINE( 104)		 ::flixel::ui::FlxButton btnVolver =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 120),10,HX_W(u"\u2190 Volver",2c44,1f12), ::Dynamic(new _hx_Closure_2()));
HXLINE( 107)		this->add(btnVolver);
            	}


void EventsEditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_110_update)
HXLINE( 111)		this->super::update(elapsed);
HXLINE( 114)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 115)			{
HXLINE( 115)				int _g = 0;
HXDLIN( 115)				::Array< ::Dynamic> _g1 = this->categoriasTxt;
HXDLIN( 115)				while((_g < _g1->length)){
HXLINE( 115)					 ::Dynamic item = _g1->__get(_g);
HXDLIN( 115)					_g = (_g + 1);
HXLINE( 116)					 ::flixel::text::FlxText item1 = ( ( ::flixel::text::FlxText)(item->__Field(HX_("txt",70,6e,58,00),::hx::paccDynamic)) );
HXDLIN( 116)					if (item1->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 117)						if (::hx::IsNotEq( this->categoriaSeleccionada,item->__Field(HX_("cat",16,74,4b,00),::hx::paccDynamic) )) {
HXLINE( 118)							this->categoriaSeleccionada = ( (::String)(item->__Field(HX_("cat",16,74,4b,00),::hx::paccDynamic)) );
HXLINE( 119)							this->refrescarListaBloques();
HXLINE( 120)							{
HXLINE( 120)								int _g2 = 0;
HXDLIN( 120)								::Array< ::Dynamic> _g3 = this->categoriasTxt;
HXDLIN( 120)								while((_g2 < _g3->length)){
HXLINE( 120)									 ::Dynamic c = _g3->__get(_g2);
HXDLIN( 120)									_g2 = (_g2 + 1);
HXLINE( 121)									 ::flixel::text::FlxText c1 = ( ( ::flixel::text::FlxText)(c->__Field(HX_("txt",70,6e,58,00),::hx::paccDynamic)) );
HXDLIN( 121)									c1->set_color(this->getCategoriaColor(( (::String)(c->__Field(HX_("cat",16,74,4b,00),::hx::paccDynamic)) ),::hx::IsEq( c->__Field(HX_("cat",16,74,4b,00),::hx::paccDynamic),this->categoriaSeleccionada )));
            								}
            							}
            						}
HXLINE( 124)						return;
            					}
            				}
            			}
HXLINE( 129)			{
HXLINE( 129)				int _g4 = 0;
HXDLIN( 129)				int _g5 = this->bloquesDisponibles->length;
HXDLIN( 129)				while((_g4 < _g5)){
HXLINE( 129)					_g4 = (_g4 + 1);
HXDLIN( 129)					int i = (_g4 - 1);
HXLINE( 130)					 ::flixel::FlxSprite bloque = this->bloquesDisponibles->__get(i).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 131)					if (bloque->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 133)						this->bloqueOriginal = bloque;
HXLINE( 134)						 ::Dynamic bloqueInfo = ::blocks::EventBlocks_obj::getBloquesPorCategoria(this->categoriaSeleccionada)->__get(i);
HXLINE( 135)						 ::flixel::FlxSprite clon = this->crearBloqueVisual(bloqueInfo,bloque->x,bloque->y);
HXLINE( 136)						this->add(clon);
HXLINE( 139)						 ::flixel::text::FlxText texto =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(bloque->x + 15),(bloque->y + 15),210,( (::String)(bloqueInfo->__Field(HX_("nombre",09,17,13,2d),::hx::paccDynamic)) ),null(),null());
HXLINE( 140)						texto->setFormat(null(),12,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 141)						{
HXLINE( 141)							texto->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 141)							texto->set_borderColor(-16777216);
HXDLIN( 141)							texto->set_borderSize(( (Float)(1) ));
HXDLIN( 141)							texto->set_borderQuality(( (Float)(1) ));
            						}
HXLINE( 142)						this->add(texto);
HXLINE( 143)						this->textosBloque->push(texto);
HXLINE( 145)						this->bloqueArrastrado = clon;
HXLINE( 146)						{
HXLINE( 146)							 ::flixel::math::FlxBasePoint this1 = this->offsetArrastre;
HXDLIN( 146)							Float y = (( (Float)(::flixel::FlxG_obj::mouse->y) ) - bloque->y);
HXDLIN( 146)							this1->set_x((( (Float)(::flixel::FlxG_obj::mouse->x) ) - bloque->x));
HXDLIN( 146)							this1->set_y(y);
            						}
HXLINE( 147)						return;
            					}
            				}
            			}
HXLINE( 152)			{
HXLINE( 152)				int _g6 = 0;
HXDLIN( 152)				int _g7 = this->bloquesEnScript->length;
HXDLIN( 152)				while((_g6 < _g7)){
HXLINE( 152)					_g6 = (_g6 + 1);
HXDLIN( 152)					int i1 = (_g6 - 1);
HXLINE( 153)					 ::flixel::FlxSprite bloque1 = this->bloquesEnScript->__get(i1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 154)					if (bloque1->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 155)						this->bloqueArrastrado = bloque1;
HXLINE( 156)						{
HXLINE( 156)							 ::flixel::math::FlxBasePoint this2 = this->offsetArrastre;
HXDLIN( 156)							Float y1 = (( (Float)(::flixel::FlxG_obj::mouse->y) ) - bloque1->y);
HXDLIN( 156)							this2->set_x((( (Float)(::flixel::FlxG_obj::mouse->x) ) - bloque1->x));
HXDLIN( 156)							this2->set_y(y1);
            						}
HXLINE( 157)						return;
            					}
            				}
            			}
            		}
HXLINE( 163)		if (::hx::IsNotNull( this->bloqueArrastrado )) {
HXLINE( 164)			 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 164)			bool _hx_tmp;
HXDLIN( 164)			if ((_this->current != 1)) {
HXLINE( 164)				_hx_tmp = (_this->current == 2);
            			}
            			else {
HXLINE( 164)				_hx_tmp = true;
            			}
HXDLIN( 164)			if (_hx_tmp) {
HXLINE( 165)				Float nuevaX = (( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->offsetArrastre->x);
HXLINE( 166)				Float nuevaY = (( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->offsetArrastre->y);
HXLINE( 167)				this->bloqueArrastrado->set_x(nuevaX);
HXLINE( 168)				this->bloqueArrastrado->set_y(nuevaY);
HXLINE( 171)				int indice = this->bloquesEnScript->indexOf(this->bloqueArrastrado,null());
HXLINE( 172)				if ((indice == -1)) {
HXLINE( 174)					 ::flixel::text::FlxText ultimoTexto = this->textosBloque->__get((this->textosBloque->length - 1)).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 175)					if (::hx::IsNotNull( ultimoTexto )) {
HXLINE( 176)						ultimoTexto->set_x((nuevaX + 15));
HXLINE( 177)						ultimoTexto->set_y((nuevaY + 15));
            					}
            				}
            				else {
HXLINE( 181)					int _g8 = 0;
HXDLIN( 181)					int _g9 = this->textosBloque->length;
HXDLIN( 181)					while((_g8 < _g9)){
HXLINE( 181)						_g8 = (_g8 + 1);
HXDLIN( 181)						int i2 = (_g8 - 1);
HXLINE( 182)						 ::flixel::text::FlxText texto1 = this->textosBloque->__get(i2).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 183)						if (::hx::IsNotNull( texto1 )) {
HXLINE( 184)							Float distanciaX = ::Math_obj::abs((texto1->x - (this->bloqueArrastrado->x + 15)));
HXLINE( 185)							Float distanciaY = ::Math_obj::abs((texto1->y - (this->bloqueArrastrado->y + 15)));
HXLINE( 186)							bool _hx_tmp1;
HXDLIN( 186)							if ((distanciaX < 20)) {
HXLINE( 186)								_hx_tmp1 = (distanciaY < 20);
            							}
            							else {
HXLINE( 186)								_hx_tmp1 = false;
            							}
HXDLIN( 186)							if (_hx_tmp1) {
HXLINE( 187)								texto1->set_x((nuevaX + 15));
HXLINE( 188)								texto1->set_y((nuevaY + 15));
HXLINE( 189)								goto _hx_goto_12;
            							}
            						}
            					}
            					_hx_goto_12:;
            				}
            			}
            			else {
HXLINE( 196)				 ::flixel::FlxSprite _hx_tmp2 = this->scriptArea;
HXDLIN( 196)				if (_hx_tmp2->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 197)					int indiceExistente = this->bloquesEnScript->indexOf(this->bloqueArrastrado,null());
HXLINE( 198)					if ((indiceExistente == -1)) {
HXLINE( 199)						this->bloquesEnScript->push(this->bloqueArrastrado);
            					}
HXLINE( 201)					this->ordenarBloques();
HXLINE( 202)					this->dibujarConectores();
            				}
            				else {
HXLINE( 204)					this->remove(this->bloqueArrastrado,null());
HXLINE( 205)					 ::flixel::text::FlxText ultimoTexto1 = this->textosBloque->__get((this->textosBloque->length - 1)).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 206)					if (::hx::IsNotNull( ultimoTexto1 )) {
HXLINE( 207)						this->remove(ultimoTexto1,null());
HXLINE( 208)						this->textosBloque->remove(ultimoTexto1);
            					}
            				}
HXLINE( 211)				this->bloqueArrastrado = null();
HXLINE( 212)				this->bloqueOriginal = null();
            			}
            		}
HXLINE( 217)		bool _hx_tmp3;
HXDLIN( 217)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE( 217)			_hx_tmp3 = ::hx::IsNull( this->bloqueArrastrado );
            		}
            		else {
HXLINE( 217)			_hx_tmp3 = false;
            		}
HXDLIN( 217)		if (_hx_tmp3) {
HXLINE( 218)			int _g10 = 0;
HXDLIN( 218)			int _g11 = this->bloquesEnScript->length;
HXDLIN( 218)			while((_g10 < _g11)){
HXLINE( 218)				_g10 = (_g10 + 1);
HXDLIN( 218)				int i3 = (_g10 - 1);
HXLINE( 219)				 ::flixel::FlxSprite bloque2 = this->bloquesEnScript->__get(i3).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 220)				if (bloque2->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 221)					 ::flixel::text::FlxText texto2 = this->obtenerTextoBloque(i3);
HXLINE( 222)					if (::hx::IsNotNull( texto2 )) {
HXLINE( 224)						this->ejecutarBloque(texto2->text);
HXLINE( 225)						goto _hx_goto_13;
            					}
            				}
            			}
            			_hx_goto_13:;
            		}
HXLINE( 232)		bool _hx_tmp4;
HXDLIN( 232)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 232)		if (_this1->keyManager->checkStatusUnsafe(69,_this1->status)) {
HXLINE( 232)			_hx_tmp4 = !(this->editandoParametro);
            		}
            		else {
HXLINE( 232)			_hx_tmp4 = false;
            		}
HXDLIN( 232)		if (_hx_tmp4) {
HXLINE( 233)			int _g12 = 0;
HXDLIN( 233)			int _g13 = this->bloquesEnScript->length;
HXDLIN( 233)			while((_g12 < _g13)){
HXLINE( 233)				_g12 = (_g12 + 1);
HXDLIN( 233)				int i4 = (_g12 - 1);
HXLINE( 234)				 ::flixel::FlxSprite bloque3 = this->bloquesEnScript->__get(i4).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 235)				if (bloque3->overlapsPoint(::flixel::FlxG_obj::mouse->getPosition(null()),null(),null())) {
HXLINE( 236)					 ::flixel::text::FlxText texto3 = this->obtenerTextoBloque(i4);
HXLINE( 237)					bool _hx_tmp5;
HXDLIN( 237)					if (::hx::IsNotNull( texto3 )) {
HXLINE( 237)						if ((texto3->text.indexOf(HX_("(",28,00,00,00),null()) == -1)) {
HXLINE( 237)							_hx_tmp5 = (texto3->text.indexOf(HX_("[",5b,00,00,00),null()) != -1);
            						}
            						else {
HXLINE( 237)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE( 237)						_hx_tmp5 = false;
            					}
HXDLIN( 237)					if (_hx_tmp5) {
HXLINE( 238)						this->bloqueEditando = bloque3;
HXLINE( 239)						this->editandoParametro = true;
HXLINE( 240)						goto _hx_goto_14;
            					}
            				}
            			}
            			_hx_goto_14:;
            		}
            		else {
HXLINE( 244)			if (this->editandoParametro) {
HXLINE( 246)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 246)				if (_this2->keyManager->checkStatusUnsafe(13,_this2->status)) {
HXLINE( 247)					this->editandoParametro = false;
HXLINE( 248)					this->bloqueEditando = null();
            				}
            				else {
HXLINE( 249)					if (::hx::IsNotNull( this->bloqueEditando )) {
HXLINE( 251)						 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 251)						if (_this3->keyManager->checkStatusUnsafe(38,_this3->status)) {
HXLINE( 252)							this->modificarParametroNumerico(this->bloqueEditando,1);
            						}
            						else {
HXLINE( 253)							 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 253)							if (_this4->keyManager->checkStatusUnsafe(40,_this4->status)) {
HXLINE( 254)								this->modificarParametroNumerico(this->bloqueEditando,-1);
            							}
            							else {
HXLINE( 258)								this->modificarParametroTexto(this->bloqueEditando);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 264)		bool _hx_tmp6;
HXDLIN( 264)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 264)		if (_this5->keyManager->checkStatusUnsafe(27,_this5->status)) {
HXLINE( 264)			_hx_tmp6 = !(this->editandoParametro);
            		}
            		else {
HXLINE( 264)			_hx_tmp6 = false;
            		}
HXDLIN( 264)		if (_hx_tmp6) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::states::menu::MenuDebugState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_265_update)
HXLINE( 265)				return  ::states::menu::MenuDebugState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_265_update)
HXLINE( 265)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 265)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE( 265)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 265)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 265)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 265)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            	}


 ::flixel::FlxSprite EventsEditorState_obj::crearBloqueVisual( ::Dynamic bloque,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_270_crearBloqueVisual)
HXLINE( 271)		 ::flixel::FlxSprite bloqueSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,x,y,null());
HXLINE( 273)		int ancho = 240;
HXLINE( 274)		int alto = 50;
HXLINE( 275)		bloqueSprite->makeGraphic(ancho,alto,0,true,null());
HXLINE( 277)		 ::openfl::display::BitmapData pixels = bloqueSprite->get_pixels();
HXLINE( 278)		int colorPrincipal = ( (int)(bloque->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic)) );
HXLINE( 279)		int colorOscuro = (colorPrincipal - 4210752);
HXLINE( 280)		int colorClaro = (colorPrincipal + 2105376);
HXLINE( 283)		{
HXLINE( 283)			int _g = 0;
HXDLIN( 283)			int _g1 = alto;
HXDLIN( 283)			while((_g < _g1)){
HXLINE( 283)				_g = (_g + 1);
HXDLIN( 283)				int py = (_g - 1);
HXLINE( 284)				{
HXLINE( 284)					int _g2 = 0;
HXDLIN( 284)					int _g3 = ancho;
HXDLIN( 284)					while((_g2 < _g3)){
HXLINE( 284)						_g2 = (_g2 + 1);
HXDLIN( 284)						int px = (_g2 - 1);
HXLINE( 285)						bool dibujar = false;
HXLINE( 287)						bool _hx_tmp;
HXDLIN( 287)						bool _hx_tmp1;
HXDLIN( 287)						bool _hx_tmp2;
HXDLIN( 287)						if ((py >= 8)) {
HXLINE( 287)							_hx_tmp2 = (py < (alto - 8));
            						}
            						else {
HXLINE( 287)							_hx_tmp2 = false;
            						}
HXDLIN( 287)						if (_hx_tmp2) {
HXLINE( 287)							_hx_tmp1 = (px >= 8);
            						}
            						else {
HXLINE( 287)							_hx_tmp1 = false;
            						}
HXDLIN( 287)						if (_hx_tmp1) {
HXLINE( 287)							_hx_tmp = (px < (ancho - 8));
            						}
            						else {
HXLINE( 287)							_hx_tmp = false;
            						}
HXDLIN( 287)						if (_hx_tmp) {
HXLINE( 288)							dibujar = true;
            						}
            						else {
HXLINE( 290)							bool _hx_tmp3;
HXDLIN( 290)							bool _hx_tmp4;
HXDLIN( 290)							bool _hx_tmp5;
HXDLIN( 290)							if ((py >= 0)) {
HXLINE( 290)								_hx_tmp5 = (py < 8);
            							}
            							else {
HXLINE( 290)								_hx_tmp5 = false;
            							}
HXDLIN( 290)							if (_hx_tmp5) {
HXLINE( 290)								_hx_tmp4 = (px >= 20);
            							}
            							else {
HXLINE( 290)								_hx_tmp4 = false;
            							}
HXDLIN( 290)							if (_hx_tmp4) {
HXLINE( 290)								_hx_tmp3 = (px < 60);
            							}
            							else {
HXLINE( 290)								_hx_tmp3 = false;
            							}
HXDLIN( 290)							if (_hx_tmp3) {
HXLINE( 291)								dibujar = true;
            							}
            							else {
HXLINE( 293)								bool _hx_tmp6;
HXDLIN( 293)								bool _hx_tmp7;
HXDLIN( 293)								bool _hx_tmp8;
HXDLIN( 293)								if ((py >= (alto - 8))) {
HXLINE( 293)									_hx_tmp8 = (py < alto);
            								}
            								else {
HXLINE( 293)									_hx_tmp8 = false;
            								}
HXDLIN( 293)								if (_hx_tmp8) {
HXLINE( 293)									_hx_tmp7 = (px >= 20);
            								}
            								else {
HXLINE( 293)									_hx_tmp7 = false;
            								}
HXDLIN( 293)								if (_hx_tmp7) {
HXLINE( 293)									_hx_tmp6 = (px < 60);
            								}
            								else {
HXLINE( 293)									_hx_tmp6 = false;
            								}
HXDLIN( 293)								if (_hx_tmp6) {
HXLINE( 294)									dibujar = true;
            								}
            								else {
HXLINE( 296)									bool _hx_tmp9;
HXDLIN( 296)									bool _hx_tmp10;
HXDLIN( 296)									if ((px >= 4)) {
HXLINE( 296)										_hx_tmp10 = (px < (ancho - 4));
            									}
            									else {
HXLINE( 296)										_hx_tmp10 = false;
            									}
HXDLIN( 296)									if (!(_hx_tmp10)) {
HXLINE( 296)										if ((py >= 4)) {
HXLINE( 296)											_hx_tmp9 = (py < (alto - 4));
            										}
            										else {
HXLINE( 296)											_hx_tmp9 = false;
            										}
            									}
            									else {
HXLINE( 296)										_hx_tmp9 = true;
            									}
HXDLIN( 296)									if (_hx_tmp9) {
HXLINE( 297)										bool _hx_tmp11;
HXDLIN( 297)										bool _hx_tmp12;
HXDLIN( 297)										if ((py >= 8)) {
HXLINE( 297)											_hx_tmp12 = (py < (alto - 8));
            										}
            										else {
HXLINE( 297)											_hx_tmp12 = false;
            										}
HXDLIN( 297)										if (_hx_tmp12) {
HXLINE( 297)											bool _hx_tmp13;
HXDLIN( 297)											if ((px >= 4)) {
HXLINE( 297)												_hx_tmp13 = (px < 8);
            											}
            											else {
HXLINE( 297)												_hx_tmp13 = false;
            											}
HXDLIN( 297)											if (!(_hx_tmp13)) {
HXLINE( 297)												if ((px >= (ancho - 8))) {
HXLINE( 297)													_hx_tmp11 = (px < (ancho - 4));
            												}
            												else {
HXLINE( 297)													_hx_tmp11 = false;
            												}
            											}
            											else {
HXLINE( 297)												_hx_tmp11 = true;
            											}
            										}
            										else {
HXLINE( 297)											_hx_tmp11 = false;
            										}
HXDLIN( 297)										if (_hx_tmp11) {
HXLINE( 298)											dibujar = true;
            										}
            									}
            								}
            							}
            						}
HXLINE( 302)						if (dibujar) {
HXLINE( 303)							int color = colorPrincipal;
HXLINE( 304)							bool _hx_tmp14;
HXDLIN( 304)							if ((px < (ancho - 12))) {
HXLINE( 304)								_hx_tmp14 = (py >= (alto - 12));
            							}
            							else {
HXLINE( 304)								_hx_tmp14 = true;
            							}
HXDLIN( 304)							if (_hx_tmp14) {
HXLINE( 305)								color = colorOscuro;
            							}
            							else {
HXLINE( 307)								bool _hx_tmp15;
HXDLIN( 307)								if ((px > 12)) {
HXLINE( 307)									_hx_tmp15 = (py <= 12);
            								}
            								else {
HXLINE( 307)									_hx_tmp15 = true;
            								}
HXDLIN( 307)								if (_hx_tmp15) {
HXLINE( 308)									color = colorClaro;
            								}
            							}
HXLINE( 311)							pixels->setPixel32(px,py,(color | -16777216));
            						}
            					}
            				}
            			}
            		}
HXLINE( 316)		bloqueSprite->set_solid(true);
HXLINE( 318)		return bloqueSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC3(EventsEditorState_obj,crearBloqueVisual,return )

void EventsEditorState_obj::ordenarBloques(){
            	HX_STACKFRAME(&_hx_pos_865602bbcc862c58_322_ordenarBloques)
HXLINE( 324)		{
HXLINE( 324)			int _g = 0;
HXDLIN( 324)			int _g1 = this->bloquesEnScript->length;
HXDLIN( 324)			while((_g < _g1)){
HXLINE( 324)				_g = (_g + 1);
HXDLIN( 324)				int i = (_g - 1);
HXLINE( 325)				 ::flixel::FlxSprite bloque1 = this->bloquesEnScript->__get(i).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 326)				 ::flixel::text::FlxText texto1 = this->obtenerTextoBloque(i);
HXLINE( 329)				bool _hx_tmp;
HXDLIN( 329)				if (::hx::IsNotNull( texto1 )) {
HXLINE( 329)					_hx_tmp = (texto1->text.indexOf(HX_("al empezar",79,97,3c,bd),null()) != -1);
            				}
            				else {
HXLINE( 329)					_hx_tmp = false;
            				}
HXDLIN( 329)				if (_hx_tmp) {
HXLINE( 330)					int _g2 = 0;
HXDLIN( 330)					int _g3 = this->bloquesEnScript->length;
HXDLIN( 330)					while((_g2 < _g3)){
HXLINE( 330)						_g2 = (_g2 + 1);
HXDLIN( 330)						int j = (_g2 - 1);
HXLINE( 331)						if ((i != j)) {
HXLINE( 332)							 ::flixel::FlxSprite bloque2 = this->bloquesEnScript->__get(j).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 333)							 ::flixel::text::FlxText texto2 = this->obtenerTextoBloque(j);
HXLINE( 336)							bool _hx_tmp1;
HXDLIN( 336)							bool _hx_tmp2;
HXDLIN( 336)							bool _hx_tmp3;
HXDLIN( 336)							if ((::Math_obj::abs((bloque1->x - bloque2->x)) < 60)) {
HXLINE( 336)								_hx_tmp3 = (::Math_obj::abs((bloque1->y - bloque2->y)) < 80);
            							}
            							else {
HXLINE( 336)								_hx_tmp3 = false;
            							}
HXDLIN( 336)							if (_hx_tmp3) {
HXLINE( 336)								_hx_tmp2 = ::hx::IsNotNull( texto2 );
            							}
            							else {
HXLINE( 336)								_hx_tmp2 = false;
            							}
HXDLIN( 336)							if (_hx_tmp2) {
HXLINE( 336)								_hx_tmp1 = (texto2->text.indexOf(HX_("temblar",17,ad,8b,3d),null()) != -1);
            							}
            							else {
HXLINE( 336)								_hx_tmp1 = false;
            							}
HXDLIN( 336)							if (_hx_tmp1) {
HXLINE( 341)								bloque2->set_x((bloque1->x + 20));
HXLINE( 342)								bloque2->set_y((bloque1->y + 55));
HXLINE( 345)								texto2->set_x((bloque2->x + 15));
HXLINE( 346)								texto2->set_y((bloque2->y + 15));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 354)		{
HXLINE( 354)			int _g4 = 0;
HXDLIN( 354)			int _g5 = this->bloquesEnScript->length;
HXDLIN( 354)			while((_g4 < _g5)){
HXLINE( 354)				_g4 = (_g4 + 1);
HXDLIN( 354)				int i1 = (_g4 - 1);
HXLINE( 355)				{
HXLINE( 355)					int _g6 = (i1 + 1);
HXDLIN( 355)					int _g7 = this->bloquesEnScript->length;
HXDLIN( 355)					while((_g6 < _g7)){
HXLINE( 355)						_g6 = (_g6 + 1);
HXDLIN( 355)						int j1 = (_g6 - 1);
HXLINE( 356)						 ::flixel::FlxSprite bloque11 = this->bloquesEnScript->__get(i1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 357)						 ::flixel::FlxSprite bloque21 = this->bloquesEnScript->__get(j1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 359)						bool _hx_tmp4;
HXDLIN( 359)						if ((::Math_obj::abs((bloque11->x - bloque21->x)) < 10)) {
HXLINE( 359)							_hx_tmp4 = (::Math_obj::abs((bloque11->y - bloque21->y)) < 10);
            						}
            						else {
HXLINE( 359)							_hx_tmp4 = false;
            						}
HXDLIN( 359)						if (_hx_tmp4) {
HXLINE( 360)							bloque21->set_y((bloque11->y + 55));
HXLINE( 361)							this->actualizarTextoBloque(j1);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventsEditorState_obj,ordenarBloques,(void))

 ::flixel::text::FlxText EventsEditorState_obj::obtenerTextoBloque(int indice){
            	HX_STACKFRAME(&_hx_pos_865602bbcc862c58_368_obtenerTextoBloque)
HXLINE( 369)		int textoIndice = (this->bloquesDisponibles->length + indice);
HXLINE( 370)		if ((textoIndice < this->textosBloque->length)) {
HXLINE( 371)			return this->textosBloque->__get(textoIndice).StaticCast<  ::flixel::text::FlxText >();
            		}
HXLINE( 373)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventsEditorState_obj,obtenerTextoBloque,return )

void EventsEditorState_obj::dibujarConectores(){
            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_378_dibujarConectores)
HXDLIN( 378)		int _g = 0;
HXDLIN( 378)		int _g1 = this->bloquesEnScript->length;
HXDLIN( 378)		while((_g < _g1)){
HXDLIN( 378)			_g = (_g + 1);
HXDLIN( 378)			int i = (_g - 1);
HXLINE( 379)			 ::flixel::FlxSprite bloque1 = this->bloquesEnScript->__get(i).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 380)			 ::flixel::text::FlxText texto1 = this->obtenerTextoBloque(i);
HXLINE( 382)			bool _hx_tmp;
HXDLIN( 382)			if (::hx::IsNotNull( texto1 )) {
HXLINE( 382)				_hx_tmp = (texto1->text.indexOf(HX_("al empezar",79,97,3c,bd),null()) != -1);
            			}
            			else {
HXLINE( 382)				_hx_tmp = false;
            			}
HXDLIN( 382)			if (_hx_tmp) {
HXLINE( 384)				int _g2 = 0;
HXDLIN( 384)				int _g3 = this->bloquesEnScript->length;
HXDLIN( 384)				while((_g2 < _g3)){
HXLINE( 384)					_g2 = (_g2 + 1);
HXDLIN( 384)					int j = (_g2 - 1);
HXLINE( 385)					if ((i != j)) {
HXLINE( 386)						 ::flixel::FlxSprite bloque2 = this->bloquesEnScript->__get(j).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 387)						 ::flixel::text::FlxText texto2 = this->obtenerTextoBloque(j);
HXLINE( 390)						bool _hx_tmp1;
HXDLIN( 390)						bool _hx_tmp2;
HXDLIN( 390)						bool _hx_tmp3;
HXDLIN( 390)						if ((bloque2->x > (bloque1->x + 15))) {
HXLINE( 390)							_hx_tmp3 = (bloque2->x < (bloque1->x + 25));
            						}
            						else {
HXLINE( 390)							_hx_tmp3 = false;
            						}
HXDLIN( 390)						if (_hx_tmp3) {
HXLINE( 390)							_hx_tmp2 = (bloque2->y > (bloque1->y + 50));
            						}
            						else {
HXLINE( 390)							_hx_tmp2 = false;
            						}
HXDLIN( 390)						if (_hx_tmp2) {
HXLINE( 390)							_hx_tmp1 = (bloque2->y < (bloque1->y + 60));
            						}
            						else {
HXLINE( 390)							_hx_tmp1 = false;
            						}
HXDLIN( 390)						if (_hx_tmp1) {
HXLINE( 394)							 ::flixel::FlxSprite conector =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(bloque1->x + 10),(bloque1->y + 50),null());
HXLINE( 395)							conector->makeGraphic(30,5,-7829368,null(),null());
HXLINE( 396)							this->add(conector);
HXLINE( 398)							 ::flixel::FlxSprite conectorV =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(bloque1->x + 10),(bloque1->y + 50),null());
HXLINE( 399)							conectorV->makeGraphic(3,10,-7829368,null(),null());
HXLINE( 400)							this->add(conectorV);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventsEditorState_obj,dibujarConectores,(void))

void EventsEditorState_obj::actualizarTextoBloque(int indice){
            	HX_STACKFRAME(&_hx_pos_865602bbcc862c58_409_actualizarTextoBloque)
HXDLIN( 409)		if ((indice < this->bloquesEnScript->length)) {
HXLINE( 410)			 ::flixel::FlxSprite bloque = this->bloquesEnScript->__get(indice).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 411)			int textoIndice = (this->bloquesDisponibles->length + indice);
HXLINE( 412)			if ((textoIndice < this->textosBloque->length)) {
HXLINE( 413)				 ::flixel::text::FlxText texto = this->textosBloque->__get(textoIndice).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 414)				if (::hx::IsNotNull( texto )) {
HXLINE( 415)					texto->set_x((bloque->x + 10));
HXLINE( 416)					texto->set_y((bloque->y + 12));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventsEditorState_obj,actualizarTextoBloque,(void))

void EventsEditorState_obj::refrescarListaBloques(){
            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_422_refrescarListaBloques)
HXLINE( 423)		if (::hx::IsNotNull( this->listaBloques )) {
HXLINE( 423)			this->remove(this->listaBloques,true);
            		}
HXLINE( 425)		this->listaBloques =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,130,20,null());
HXLINE( 426)		this->listaBloques->makeGraphic(300,(::flixel::FlxG_obj::height - 40),-12566464,null(),null());
HXLINE( 427)		this->add(this->listaBloques);
HXLINE( 429)		 ::flixel::text::FlxText tituloBloques =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,30,0,(HX_W(u"\U0001f3b5 Eventos: ",9cfa,2388) + this->categoriaSeleccionada),null(),null());
HXLINE( 430)		tituloBloques->setFormat(null(),14,-1,null(),null(),null(),null());
HXLINE( 431)		this->add(tituloBloques);
HXLINE( 433)		::Array< ::Dynamic> bloques = ::blocks::EventBlocks_obj::getBloquesPorCategoria(this->categoriaSeleccionada);
HXLINE( 434)		int y = 60;
HXLINE( 436)		this->bloquesDisponibles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 437)		{
HXLINE( 437)			int _g = 0;
HXDLIN( 437)			while((_g < bloques->length)){
HXLINE( 437)				 ::Dynamic bloque = bloques->__get(_g);
HXDLIN( 437)				_g = (_g + 1);
HXLINE( 438)				 ::flixel::FlxSprite bloqueVisual = this->crearBloqueVisual(bloque,( (Float)(140) ),( (Float)(y) ));
HXLINE( 439)				this->add(bloqueVisual);
HXLINE( 441)				 ::flixel::text::FlxText texto =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,155,(y + 15),210,( (::String)(bloque->__Field(HX_("nombre",09,17,13,2d),::hx::paccDynamic)) ),null(),null());
HXLINE( 442)				texto->setFormat(null(),12,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 443)				{
HXLINE( 443)					texto->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 443)					texto->set_borderColor(-16777216);
HXDLIN( 443)					texto->set_borderSize(( (Float)(1) ));
HXDLIN( 443)					texto->set_borderQuality(( (Float)(1) ));
            				}
HXLINE( 444)				this->add(texto);
HXLINE( 445)				this->textosBloque->push(texto);
HXLINE( 447)				this->bloquesDisponibles->push(bloqueVisual);
HXLINE( 448)				y = (y + 60);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventsEditorState_obj,refrescarListaBloques,(void))

void EventsEditorState_obj::guardarEventos(){
            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_452_guardarEventos)
HXLINE( 454)		this->nombreEvento = this->inputNombre->text;
HXLINE( 456)		::String eventsPath = HX_("assets/events",65,3a,21,38);
HXLINE( 458)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 459)			if (!(::sys::FileSystem_obj::exists(eventsPath))) {
HXLINE( 460)				::sys::FileSystem_obj::createDirectory(eventsPath);
            			}
HXLINE( 463)			::String eventData = HX_("// Eventos generados desde EventsEditorState\n",0a,87,24,d9);
HXLINE( 464)			eventData = (eventData + HX_("// Formato: tiempo,nombre_evento,valor1,valor2\n\n",7a,a6,8f,26));
HXLINE( 466)			int eventCount = 0;
HXLINE( 467)			{
HXLINE( 467)				int _g = 0;
HXDLIN( 467)				int _g1 = this->bloquesEnScript->length;
HXDLIN( 467)				while((_g < _g1)){
HXLINE( 467)					_g = (_g + 1);
HXDLIN( 467)					int i = (_g - 1);
HXLINE( 468)					 ::flixel::FlxSprite bloque = this->bloquesEnScript->__get(i).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 469)					 ::flixel::text::FlxText texto = this->obtenerTextoBloque(i);
HXLINE( 471)					if (::hx::IsNotNull( texto )) {
HXLINE( 472)						Float tiempo = (( (Float)(eventCount) ) * ((Float)2.0));
HXLINE( 473)						::String nombreEvento = texto->text;
HXLINE( 476)						::String valor1 = HX_("1.0",b3,56,25,00);
HXLINE( 477)						::String valor2 = HX_("default",c1,d8,c3,9b);
HXLINE( 479)						if ((nombreEvento.indexOf(HX_("(",28,00,00,00),null()) != -1)) {
HXLINE( 480)							 ::EReg regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\(([^\\)]*)\\)",1d,eb,03,ca),HX_("g",67,00,00,00));
HXLINE( 481)							if (regex->match(nombreEvento)) {
HXLINE( 482)								valor1 = regex->matched(1);
            							}
            						}
HXLINE( 486)						if ((nombreEvento.indexOf(HX_("[",5b,00,00,00),null()) != -1)) {
HXLINE( 487)							 ::EReg regex1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\[([^\\]]*)\\]",90,0c,e2,40),HX_("g",67,00,00,00));
HXLINE( 488)							if (regex1->match(nombreEvento)) {
HXLINE( 489)								valor2 = regex1->matched(1);
            							}
            						}
HXLINE( 493)						eventData = (eventData + (((((((tiempo + HX_(",",2c,00,00,00)) + nombreEvento) + HX_(",",2c,00,00,00)) + valor1) + HX_(",",2c,00,00,00)) + valor2) + HX_("\n",0a,00,00,00)));
HXLINE( 494)						eventCount = (eventCount + 1);
            					}
            				}
            			}
HXLINE( 498)			::String fileName = (this->nombreEvento + HX_("_events.txt",ba,5b,8c,11));
HXLINE( 500)			if (::sys::FileSystem_obj::exists(((eventsPath + HX_("/",2f,00,00,00)) + fileName))) {
HXLINE( 501)				this->mostrarDialogoReemplazo(((eventsPath + HX_("/",2f,00,00,00)) + fileName),eventData);
HXLINE( 502)				return;
            			}
HXLINE( 504)			::sys::io::File_obj::saveContent(((eventsPath + HX_("/",2f,00,00,00)) + fileName),eventData);
HXLINE( 506)			::haxe::Log_obj::trace((((HX_W(u"\U0001f4be Eventos guardados: ",a90b,4d57) + eventCount) + HX_(" en ",77,d7,73,15)) + fileName),::hx::SourceInfo(HX_("source/states/debug/EventsEditorState.hx",28,81,1d,36),506,HX_("states.debug.EventsEditorState",64,32,dc,1d),HX_("guardarEventos",48,ad,3c,d8)));
HXLINE( 507)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
HXLINE( 510)			this->guardarComoScript(eventCount);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g2 = _hx_e;
HXLINE( 512)				{
HXLINE( 512)					null();
            				}
HXDLIN( 512)				 ::Dynamic e = _g2;
HXDLIN( 512)				{
HXLINE( 513)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 513)					::String _hx_tmp1 = (HX_("Error guardando eventos: ",a9,04,68,18) + ::Std_obj::string(e));
HXDLIN( 513)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/EventsEditorState.hx",28,81,1d,36),513,HX_("states.debug.EventsEditorState",64,32,dc,1d),HX_("guardarEventos",48,ad,3c,d8)));
HXLINE( 514)					::flixel::FlxG_obj::camera->flash((int)1157562368,((Float)0.3),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventsEditorState_obj,guardarEventos,(void))

void EventsEditorState_obj::guardarComoScript(int eventCount){
            	HX_STACKFRAME(&_hx_pos_865602bbcc862c58_518_guardarComoScript)
HXLINE( 520)		this->nombreEvento = this->inputNombre->text;
HXLINE( 522)		::String scriptsPath = HX_("assets/scripts",3c,f3,3a,0b);
HXLINE( 524)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 525)			::String scriptContent = HX_("// Script de eventos generado\n",af,8d,2f,5f);
HXLINE( 526)			scriptContent = (scriptContent + HX_("function onChartEvent(eventName:String, value1:String, value2:String) {\n",30,c5,a7,34));
HXLINE( 528)			{
HXLINE( 528)				int _g = 0;
HXDLIN( 528)				int _g1 = this->bloquesEnScript->length;
HXDLIN( 528)				while((_g < _g1)){
HXLINE( 528)					_g = (_g + 1);
HXDLIN( 528)					int i = (_g - 1);
HXLINE( 529)					 ::flixel::text::FlxText texto = this->obtenerTextoBloque(i);
HXLINE( 530)					if (::hx::IsNotNull( texto )) {
HXLINE( 531)						scriptContent = (scriptContent + ((HX_("    // ",00,9b,37,80) + texto->text) + HX_("\n",0a,00,00,00)));
HXLINE( 532)						if ((texto->text.indexOf(HX_("al empezar",79,97,3c,bd),null()) != -1)) {
HXLINE( 533)							scriptContent = (scriptContent + HX_("    if (eventName == \"songStart\") {\n",bd,9b,2d,b4));
HXLINE( 534)							scriptContent = (scriptContent + HX_W(u"        trace(\"\U0001f3b5 Canci\u00f3n iniciada!\");\n",a0d6,e325));
HXLINE( 535)							scriptContent = (scriptContent + HX_("    }\n",ed,a4,7d,4d));
            						}
            					}
            				}
            			}
HXLINE( 540)			scriptContent = (scriptContent + HX_("    return true;\n}",30,7c,63,8f));
HXLINE( 542)			::String fileName = (this->nombreEvento + HX_("_",5f,00,00,00));
HXDLIN( 542)			::String fileName1 = ((fileName + ::Date_obj::now()->getTime()) + HX_(".hx",be,42,23,00));
HXLINE( 543)			::sys::io::File_obj::saveContent(((scriptsPath + HX_("/",2f,00,00,00)) + fileName1),scriptContent);
HXLINE( 545)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Script guardado: ",ee9d,7bf9) + fileName1),::hx::SourceInfo(HX_("source/states/debug/EventsEditorState.hx",28,81,1d,36),545,HX_("states.debug.EventsEditorState",64,32,dc,1d),HX_("guardarComoScript",6f,02,d0,11)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g2 = _hx_e;
HXLINE( 547)				{
HXLINE( 547)					null();
            				}
HXDLIN( 547)				 ::Dynamic e = _g2;
HXLINE( 548)				{
HXLINE( 548)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 548)					::String _hx_tmp1 = (HX_("Error guardando script: ",4c,96,6f,ac) + ::Std_obj::string(e));
HXDLIN( 548)					_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/debug/EventsEditorState.hx",28,81,1d,36),548,HX_("states.debug.EventsEditorState",64,32,dc,1d),HX_("guardarComoScript",6f,02,d0,11)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventsEditorState_obj,guardarComoScript,(void))

void EventsEditorState_obj::mostrarDialogoReemplazo(::String fileName,::String data){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::states::debug::EventsEditorState,_gthis,::String,data,::String,fileName) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_564_mostrarDialogoReemplazo)
HXLINE( 565)			::sys::io::File_obj::saveContent(fileName,data);
HXLINE( 566)			::haxe::Log_obj::trace((HX_W(u"\U0001f4be Eventos guardados: ",a90b,4d57) + fileName),::hx::SourceInfo(HX_("source/states/debug/EventsEditorState.hx",28,81,1d,36),566,HX_("states.debug.EventsEditorState",64,32,dc,1d),HX_("mostrarDialogoReemplazo",d8,ed,be,45)));
HXLINE( 567)			::flixel::FlxG_obj::camera->flash((int)1140915968,((Float)0.3),null(),null());
HXLINE( 568)			_gthis->cerrarDialog();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_552_mostrarDialogoReemplazo)
HXDLIN( 552)		 ::states::debug::EventsEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 553)		this->showingDialog = true;
HXLINE( 555)		this->confirmDialog =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(200) )),((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(100) )),null());
HXLINE( 556)		this->confirmDialog->makeGraphic(400,200,-587202560,null(),null());
HXLINE( 557)		this->add(this->confirmDialog);
HXLINE( 559)		 ::flixel::text::FlxText dialogText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 20),(this->confirmDialog->y + 20),360,((HX_("El evento '",15,b5,76,fa) + this->nombreEvento) + HX_W(u"\' ya existe.\n\n\u00bfQuieres reemplazarlo?",c1bd,aefd)),null(),null());
HXLINE( 561)		dialogText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 562)		this->add(dialogText);
HXLINE( 564)		 ::flixel::ui::FlxButton btnSi =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 50),(this->confirmDialog->y + 120),HX_W(u"S\u00cd",a57d,003f), ::Dynamic(new _hx_Closure_0(_gthis,data,fileName)));
HXLINE( 570)		this->add(btnSi);
HXLINE( 572)		 ::flixel::ui::FlxButton btnNo =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(this->confirmDialog->x + 250),(this->confirmDialog->y + 120),HX_("NO",41,44,00,00),this->cerrarDialog_dyn());
HXLINE( 573)		this->add(btnNo);
            	}


HX_DEFINE_DYNAMIC_FUNC2(EventsEditorState_obj,mostrarDialogoReemplazo,(void))

void EventsEditorState_obj::cerrarDialog(){
            	HX_STACKFRAME(&_hx_pos_865602bbcc862c58_576_cerrarDialog)
HXLINE( 577)		this->showingDialog = false;
HXLINE( 578)		if (::hx::IsNotNull( this->confirmDialog )) {
HXLINE( 579)			this->remove(this->confirmDialog,null());
HXLINE( 580)			this->confirmDialog = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventsEditorState_obj,cerrarDialog,(void))

void EventsEditorState_obj::ejecutarBloque(::String nombreBloque){
            	HX_STACKFRAME(&_hx_pos_865602bbcc862c58_585_ejecutarBloque)
HXLINE( 586)		::Array< ::Dynamic> bloques = ::blocks::EventBlocks_obj::getBloquesPorCategoria(this->categoriaSeleccionada);
HXLINE( 587)		{
HXLINE( 587)			int _g = 0;
HXDLIN( 587)			while((_g < bloques->length)){
HXLINE( 587)				 ::Dynamic bloque = bloques->__get(_g);
HXDLIN( 587)				_g = (_g + 1);
HXLINE( 588)				if (::hx::IsEq( bloque->__Field(HX_("nombre",09,17,13,2d),::hx::paccDynamic),nombreBloque )) {
HXLINE( 589)					if (::hx::IsNotNull( bloque->__Field(HX_("logica",43,59,6a,5c),::hx::paccDynamic) )) {
HXLINE( 590)						bloque->__Field(HX_("logica",43,59,6a,5c),::hx::paccDynamic)();
            					}
HXLINE( 592)					goto _hx_goto_40;
            				}
            			}
            			_hx_goto_40:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventsEditorState_obj,ejecutarBloque,(void))

void EventsEditorState_obj::modificarParametroNumerico( ::flixel::FlxSprite bloque,int cambio){
            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_598_modificarParametroNumerico)
HXLINE( 599)		int indice = this->bloquesEnScript->indexOf(bloque,null());
HXLINE( 600)		if ((indice != -1)) {
HXLINE( 601)			 ::flixel::text::FlxText texto = this->obtenerTextoBloque(indice);
HXLINE( 602)			if (::hx::IsNotNull( texto )) {
HXLINE( 603)				::String textoStr = texto->text;
HXLINE( 604)				 ::EReg regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\(([0-9]+\\.?[0-9]*)\\)",06,d8,84,ec),HX_("g",67,00,00,00));
HXLINE( 606)				if (regex->match(textoStr)) {
HXLINE( 607)					::String numeroStr = regex->matched(1);
HXLINE( 608)					Float numero = ::Std_obj::parseFloat(numeroStr);
HXLINE( 609)					Float nuevoNumero = (numero + cambio);
HXLINE( 610)					if ((nuevoNumero < 0)) {
HXLINE( 610)						nuevoNumero = ( (Float)(0) );
            					}
HXLINE( 612)					::String nuevoTexto = ::StringTools_obj::replace(textoStr,((HX_("(",28,00,00,00) + numeroStr) + HX_(")",29,00,00,00)),((HX_("(",28,00,00,00) + nuevoNumero) + HX_(")",29,00,00,00)));
HXLINE( 613)					texto->set_text(nuevoTexto);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(EventsEditorState_obj,modificarParametroNumerico,(void))

void EventsEditorState_obj::modificarParametroTexto( ::flixel::FlxSprite bloque){
            	HX_GC_STACKFRAME(&_hx_pos_865602bbcc862c58_620_modificarParametroTexto)
HXLINE( 621)		int indice = this->bloquesEnScript->indexOf(bloque,null());
HXLINE( 622)		if ((indice != -1)) {
HXLINE( 623)			 ::flixel::text::FlxText texto = this->obtenerTextoBloque(indice);
HXLINE( 624)			if (::hx::IsNotNull( texto )) {
HXLINE( 625)				::String textoStr = texto->text;
HXLINE( 626)				 ::EReg regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\[([^\\]]*)\\]",90,0c,e2,40),HX_("g",67,00,00,00));
HXLINE( 628)				if (regex->match(textoStr)) {
HXLINE( 629)					::String textoActual = regex->matched(1);
HXLINE( 630)					::Array< ::String > opciones = ::Array_obj< ::String >::fromData( _hx_array_data_1ddc3264_44,5);
HXLINE( 631)					int indiceActual = opciones->indexOf(textoActual,null());
HXLINE( 632)					int nuevoIndice = ::hx::Mod((indiceActual + 1),opciones->length);
HXLINE( 633)					::String nuevoTexto = ::StringTools_obj::replace(textoStr,((HX_("[",5b,00,00,00) + textoActual) + HX_("]",5d,00,00,00)),((HX_("[",5b,00,00,00) + opciones->__get(nuevoIndice)) + HX_("]",5d,00,00,00)));
HXLINE( 634)					texto->set_text(nuevoTexto);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventsEditorState_obj,modificarParametroTexto,(void))


::hx::ObjectPtr< EventsEditorState_obj > EventsEditorState_obj::__new() {
	::hx::ObjectPtr< EventsEditorState_obj > __this = new EventsEditorState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< EventsEditorState_obj > EventsEditorState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	EventsEditorState_obj *__this = (EventsEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EventsEditorState_obj), true, "states.debug.EventsEditorState"));
	*(void **)__this = EventsEditorState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

EventsEditorState_obj::EventsEditorState_obj()
{
}

void EventsEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EventsEditorState);
	HX_MARK_MEMBER_NAME(sidebar,"sidebar");
	HX_MARK_MEMBER_NAME(scriptArea,"scriptArea");
	HX_MARK_MEMBER_NAME(listaBloques,"listaBloques");
	HX_MARK_MEMBER_NAME(categorias,"categorias");
	HX_MARK_MEMBER_NAME(categoriaSeleccionada,"categoriaSeleccionada");
	HX_MARK_MEMBER_NAME(categoriasTxt,"categoriasTxt");
	HX_MARK_MEMBER_NAME(bloquesEnScript,"bloquesEnScript");
	HX_MARK_MEMBER_NAME(bloqueArrastrado,"bloqueArrastrado");
	HX_MARK_MEMBER_NAME(bloquesDisponibles,"bloquesDisponibles");
	HX_MARK_MEMBER_NAME(offsetArrastre,"offsetArrastre");
	HX_MARK_MEMBER_NAME(bloqueOriginal,"bloqueOriginal");
	HX_MARK_MEMBER_NAME(editandoParametro,"editandoParametro");
	HX_MARK_MEMBER_NAME(bloqueEditando,"bloqueEditando");
	HX_MARK_MEMBER_NAME(textosBloque,"textosBloque");
	HX_MARK_MEMBER_NAME(bloquesInfo,"bloquesInfo");
	HX_MARK_MEMBER_NAME(nombreEvento,"nombreEvento");
	HX_MARK_MEMBER_NAME(inputNombre,"inputNombre");
	HX_MARK_MEMBER_NAME(confirmDialog,"confirmDialog");
	HX_MARK_MEMBER_NAME(showingDialog,"showingDialog");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EventsEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sidebar,"sidebar");
	HX_VISIT_MEMBER_NAME(scriptArea,"scriptArea");
	HX_VISIT_MEMBER_NAME(listaBloques,"listaBloques");
	HX_VISIT_MEMBER_NAME(categorias,"categorias");
	HX_VISIT_MEMBER_NAME(categoriaSeleccionada,"categoriaSeleccionada");
	HX_VISIT_MEMBER_NAME(categoriasTxt,"categoriasTxt");
	HX_VISIT_MEMBER_NAME(bloquesEnScript,"bloquesEnScript");
	HX_VISIT_MEMBER_NAME(bloqueArrastrado,"bloqueArrastrado");
	HX_VISIT_MEMBER_NAME(bloquesDisponibles,"bloquesDisponibles");
	HX_VISIT_MEMBER_NAME(offsetArrastre,"offsetArrastre");
	HX_VISIT_MEMBER_NAME(bloqueOriginal,"bloqueOriginal");
	HX_VISIT_MEMBER_NAME(editandoParametro,"editandoParametro");
	HX_VISIT_MEMBER_NAME(bloqueEditando,"bloqueEditando");
	HX_VISIT_MEMBER_NAME(textosBloque,"textosBloque");
	HX_VISIT_MEMBER_NAME(bloquesInfo,"bloquesInfo");
	HX_VISIT_MEMBER_NAME(nombreEvento,"nombreEvento");
	HX_VISIT_MEMBER_NAME(inputNombre,"inputNombre");
	HX_VISIT_MEMBER_NAME(confirmDialog,"confirmDialog");
	HX_VISIT_MEMBER_NAME(showingDialog,"showingDialog");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EventsEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sidebar") ) { return ::hx::Val( sidebar ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptArea") ) { return ::hx::Val( scriptArea ); }
		if (HX_FIELD_EQ(inName,"categorias") ) { return ::hx::Val( categorias ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bloquesInfo") ) { return ::hx::Val( bloquesInfo ); }
		if (HX_FIELD_EQ(inName,"inputNombre") ) { return ::hx::Val( inputNombre ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"listaBloques") ) { return ::hx::Val( listaBloques ); }
		if (HX_FIELD_EQ(inName,"textosBloque") ) { return ::hx::Val( textosBloque ); }
		if (HX_FIELD_EQ(inName,"nombreEvento") ) { return ::hx::Val( nombreEvento ); }
		if (HX_FIELD_EQ(inName,"cerrarDialog") ) { return ::hx::Val( cerrarDialog_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"categoriasTxt") ) { return ::hx::Val( categoriasTxt ); }
		if (HX_FIELD_EQ(inName,"confirmDialog") ) { return ::hx::Val( confirmDialog ); }
		if (HX_FIELD_EQ(inName,"showingDialog") ) { return ::hx::Val( showingDialog ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"offsetArrastre") ) { return ::hx::Val( offsetArrastre ); }
		if (HX_FIELD_EQ(inName,"bloqueOriginal") ) { return ::hx::Val( bloqueOriginal ); }
		if (HX_FIELD_EQ(inName,"bloqueEditando") ) { return ::hx::Val( bloqueEditando ); }
		if (HX_FIELD_EQ(inName,"ordenarBloques") ) { return ::hx::Val( ordenarBloques_dyn() ); }
		if (HX_FIELD_EQ(inName,"guardarEventos") ) { return ::hx::Val( guardarEventos_dyn() ); }
		if (HX_FIELD_EQ(inName,"ejecutarBloque") ) { return ::hx::Val( ejecutarBloque_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bloquesEnScript") ) { return ::hx::Val( bloquesEnScript ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bloqueArrastrado") ) { return ::hx::Val( bloqueArrastrado ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"editandoParametro") ) { return ::hx::Val( editandoParametro ); }
		if (HX_FIELD_EQ(inName,"getCategoriaColor") ) { return ::hx::Val( getCategoriaColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"crearBloqueVisual") ) { return ::hx::Val( crearBloqueVisual_dyn() ); }
		if (HX_FIELD_EQ(inName,"dibujarConectores") ) { return ::hx::Val( dibujarConectores_dyn() ); }
		if (HX_FIELD_EQ(inName,"guardarComoScript") ) { return ::hx::Val( guardarComoScript_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bloquesDisponibles") ) { return ::hx::Val( bloquesDisponibles ); }
		if (HX_FIELD_EQ(inName,"obtenerTextoBloque") ) { return ::hx::Val( obtenerTextoBloque_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"categoriaSeleccionada") ) { return ::hx::Val( categoriaSeleccionada ); }
		if (HX_FIELD_EQ(inName,"actualizarTextoBloque") ) { return ::hx::Val( actualizarTextoBloque_dyn() ); }
		if (HX_FIELD_EQ(inName,"refrescarListaBloques") ) { return ::hx::Val( refrescarListaBloques_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"mostrarDialogoReemplazo") ) { return ::hx::Val( mostrarDialogoReemplazo_dyn() ); }
		if (HX_FIELD_EQ(inName,"modificarParametroTexto") ) { return ::hx::Val( modificarParametroTexto_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"modificarParametroNumerico") ) { return ::hx::Val( modificarParametroNumerico_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EventsEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sidebar") ) { sidebar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptArea") ) { scriptArea=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"categorias") ) { categorias=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bloquesInfo") ) { bloquesInfo=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputNombre") ) { inputNombre=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"listaBloques") ) { listaBloques=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textosBloque") ) { textosBloque=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nombreEvento") ) { nombreEvento=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"categoriasTxt") ) { categoriasTxt=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"confirmDialog") ) { confirmDialog=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showingDialog") ) { showingDialog=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"offsetArrastre") ) { offsetArrastre=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bloqueOriginal") ) { bloqueOriginal=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bloqueEditando") ) { bloqueEditando=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bloquesEnScript") ) { bloquesEnScript=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bloqueArrastrado") ) { bloqueArrastrado=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"editandoParametro") ) { editandoParametro=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bloquesDisponibles") ) { bloquesDisponibles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"categoriaSeleccionada") ) { categoriaSeleccionada=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EventsEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sidebar",9c,7c,bc,80));
	outFields->push(HX_("scriptArea",38,67,55,39));
	outFields->push(HX_("listaBloques",34,1e,89,56));
	outFields->push(HX_("categorias",60,97,ff,00));
	outFields->push(HX_("categoriaSeleccionada",d4,40,90,1c));
	outFields->push(HX_("categoriasTxt",f0,6a,4d,77));
	outFields->push(HX_("bloquesEnScript",ab,28,a9,b7));
	outFields->push(HX_("bloqueArrastrado",d7,2a,9f,3f));
	outFields->push(HX_("bloquesDisponibles",09,4c,98,0c));
	outFields->push(HX_("offsetArrastre",27,18,15,82));
	outFields->push(HX_("bloqueOriginal",2d,e3,9d,2d));
	outFields->push(HX_("editandoParametro",d7,df,9f,1a));
	outFields->push(HX_("bloqueEditando",9e,c7,64,22));
	outFields->push(HX_("textosBloque",ad,e0,56,b2));
	outFields->push(HX_("bloquesInfo",45,5a,84,f5));
	outFields->push(HX_("nombreEvento",fe,46,3e,6c));
	outFields->push(HX_("inputNombre",b3,f2,46,22));
	outFields->push(HX_("confirmDialog",e8,d5,94,10));
	outFields->push(HX_("showingDialog",ad,7e,e6,07));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EventsEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EventsEditorState_obj,sidebar),HX_("sidebar",9c,7c,bc,80)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EventsEditorState_obj,scriptArea),HX_("scriptArea",38,67,55,39)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EventsEditorState_obj,listaBloques),HX_("listaBloques",34,1e,89,56)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(EventsEditorState_obj,categorias),HX_("categorias",60,97,ff,00)},
	{::hx::fsString,(int)offsetof(EventsEditorState_obj,categoriaSeleccionada),HX_("categoriaSeleccionada",d4,40,90,1c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EventsEditorState_obj,categoriasTxt),HX_("categoriasTxt",f0,6a,4d,77)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EventsEditorState_obj,bloquesEnScript),HX_("bloquesEnScript",ab,28,a9,b7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EventsEditorState_obj,bloqueArrastrado),HX_("bloqueArrastrado",d7,2a,9f,3f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EventsEditorState_obj,bloquesDisponibles),HX_("bloquesDisponibles",09,4c,98,0c)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(EventsEditorState_obj,offsetArrastre),HX_("offsetArrastre",27,18,15,82)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EventsEditorState_obj,bloqueOriginal),HX_("bloqueOriginal",2d,e3,9d,2d)},
	{::hx::fsBool,(int)offsetof(EventsEditorState_obj,editandoParametro),HX_("editandoParametro",d7,df,9f,1a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EventsEditorState_obj,bloqueEditando),HX_("bloqueEditando",9e,c7,64,22)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EventsEditorState_obj,textosBloque),HX_("textosBloque",ad,e0,56,b2)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EventsEditorState_obj,bloquesInfo),HX_("bloquesInfo",45,5a,84,f5)},
	{::hx::fsString,(int)offsetof(EventsEditorState_obj,nombreEvento),HX_("nombreEvento",fe,46,3e,6c)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(EventsEditorState_obj,inputNombre),HX_("inputNombre",b3,f2,46,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EventsEditorState_obj,confirmDialog),HX_("confirmDialog",e8,d5,94,10)},
	{::hx::fsBool,(int)offsetof(EventsEditorState_obj,showingDialog),HX_("showingDialog",ad,7e,e6,07)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EventsEditorState_obj_sStaticStorageInfo = 0;
#endif

static ::String EventsEditorState_obj_sMemberFields[] = {
	HX_("sidebar",9c,7c,bc,80),
	HX_("scriptArea",38,67,55,39),
	HX_("listaBloques",34,1e,89,56),
	HX_("categorias",60,97,ff,00),
	HX_("categoriaSeleccionada",d4,40,90,1c),
	HX_("categoriasTxt",f0,6a,4d,77),
	HX_("bloquesEnScript",ab,28,a9,b7),
	HX_("bloqueArrastrado",d7,2a,9f,3f),
	HX_("bloquesDisponibles",09,4c,98,0c),
	HX_("offsetArrastre",27,18,15,82),
	HX_("bloqueOriginal",2d,e3,9d,2d),
	HX_("editandoParametro",d7,df,9f,1a),
	HX_("bloqueEditando",9e,c7,64,22),
	HX_("textosBloque",ad,e0,56,b2),
	HX_("bloquesInfo",45,5a,84,f5),
	HX_("nombreEvento",fe,46,3e,6c),
	HX_("inputNombre",b3,f2,46,22),
	HX_("confirmDialog",e8,d5,94,10),
	HX_("showingDialog",ad,7e,e6,07),
	HX_("getCategoriaColor",e6,a1,77,cd),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("crearBloqueVisual",83,76,96,70),
	HX_("ordenarBloques",7c,7f,ed,20),
	HX_("obtenerTextoBloque",27,fb,26,6d),
	HX_("dibujarConectores",c8,c1,25,79),
	HX_("actualizarTextoBloque",ae,98,e0,30),
	HX_("refrescarListaBloques",1b,09,e2,6b),
	HX_("guardarEventos",48,ad,3c,d8),
	HX_("guardarComoScript",6f,02,d0,11),
	HX_("mostrarDialogoReemplazo",d8,ed,be,45),
	HX_("cerrarDialog",7b,71,e5,eb),
	HX_("ejecutarBloque",af,5d,41,fb),
	HX_("modificarParametroNumerico",d1,a9,21,62),
	HX_("modificarParametroTexto",f3,2a,f8,87),
	::String(null()) };

::hx::Class EventsEditorState_obj::__mClass;

void EventsEditorState_obj::__register()
{
	EventsEditorState_obj _hx_dummy;
	EventsEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.debug.EventsEditorState",64,32,dc,1d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EventsEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EventsEditorState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EventsEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EventsEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace debug
