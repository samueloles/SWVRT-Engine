// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_debug_ImageSelectorState
#include <states/debug/ImageSelectorState.h>
#endif
#ifndef INCLUDED_states_debug_MenuEditorState
#include <states/debug/MenuEditorState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_13_new,"states.debug.ImageSelectorState","new",0x48ef7810,"states.debug.ImageSelectorState.new","states/debug/ImageSelectorState.hx",13,0x4b4e5f5e)
HX_LOCAL_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_19_create,"states.debug.ImageSelectorState","create",0x1d4bad4c,"states.debug.ImageSelectorState.create","states/debug/ImageSelectorState.hx",19,0x4b4e5f5e)
HX_LOCAL_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_34_obtenerImagenes,"states.debug.ImageSelectorState","obtenerImagenes",0x00f81848,"states.debug.ImageSelectorState.obtenerImagenes","states/debug/ImageSelectorState.hx",34,0x4b4e5f5e)
HX_LOCAL_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_43_crearMiniaturas,"states.debug.ImageSelectorState","crearMiniaturas",0xc97f1cb0,"states.debug.ImageSelectorState.crearMiniaturas","states/debug/ImageSelectorState.hx",43,0x4b4e5f5e)
HX_LOCAL_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_53_crearMiniaturas,"states.debug.ImageSelectorState","crearMiniaturas",0xc97f1cb0,"states.debug.ImageSelectorState.crearMiniaturas","states/debug/ImageSelectorState.hx",53,0x4b4e5f5e)
HX_LOCAL_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_55_crearMiniaturas,"states.debug.ImageSelectorState","crearMiniaturas",0xc97f1cb0,"states.debug.ImageSelectorState.crearMiniaturas","states/debug/ImageSelectorState.hx",55,0x4b4e5f5e)
HX_LOCAL_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_14_boot,"states.debug.ImageSelectorState","boot",0x80b29682,"states.debug.ImageSelectorState.boot","states/debug/ImageSelectorState.hx",14,0x4b4e5f5e)
HX_LOCAL_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_16_boot,"states.debug.ImageSelectorState","boot",0x80b29682,"states.debug.ImageSelectorState.boot","states/debug/ImageSelectorState.hx",16,0x4b4e5f5e)
HX_LOCAL_STACK_FRAME(_hx_pos_3627fdfa12d1a3a3_17_boot,"states.debug.ImageSelectorState","boot",0x80b29682,"states.debug.ImageSelectorState.boot","states/debug/ImageSelectorState.hx",17,0x4b4e5f5e)
static const ::String _hx_array_data_b036701e_14[] = {
	HX_(".png",3b,2d,bd,1e),HX_(".jpg",73,a1,b8,1e),HX_(".jpeg",d6,a1,d4,c2),
};
namespace states{
namespace debug{

void ImageSelectorState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_13_new)
HXDLIN(  13)		super::__construct();
            	}

Dynamic ImageSelectorState_obj::__CreateEmpty() { return new ImageSelectorState_obj; }

void *ImageSelectorState_obj::_hx_vtable = 0;

Dynamic ImageSelectorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageSelectorState_obj > _hx_result = new ImageSelectorState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageSelectorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x02ad2780) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x02ad2780;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void ImageSelectorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_19_create)
HXLINE(  20)		this->super::create();
HXLINE(  22)		this->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_W(u"\U0001f5bc\ufe0f Selecciona imagen",f720,a4a9),null(),null()));
HXLINE(  24)		::Array< ::String > imagenes = this->obtenerImagenes();
HXLINE(  25)		if ((imagenes->length == 0)) {
HXLINE(  26)			this->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,60,0,(HX_W(u"\u274c Sin im\u00e1genes en: ",b3ca,3100) + ::states::debug::ImageSelectorState_obj::CARPETA),null(),null()));
HXLINE(  27)			return;
            		}
HXLINE(  30)		this->crearMiniaturas(imagenes);
            	}


::Array< ::String > ImageSelectorState_obj::obtenerImagenes(){
            	HX_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_34_obtenerImagenes)
HXDLIN(  34)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(  34)		{
HXDLIN(  34)			int _g1 = 0;
HXDLIN(  34)			::Array< ::String > _g2 = ::sys::FileSystem_obj::readDirectory(::states::debug::ImageSelectorState_obj::CARPETA);
HXDLIN(  34)			while((_g1 < _g2->length)){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				bool _hx_run(::String n){
            					HX_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_34_obtenerImagenes)
HXLINE(  35)					::String lower = n.toLowerCase();
HXLINE(  36)					{
HXLINE(  36)						int _g = 0;
HXDLIN(  36)						::Array< ::String > _g1 = ::states::debug::ImageSelectorState_obj::EXTENSIONES;
HXDLIN(  36)						while((_g < _g1->length)){
HXLINE(  36)							::String ext = _g1->__get(_g);
HXDLIN(  36)							_g = (_g + 1);
HXLINE(  37)							if (::StringTools_obj::endsWith(lower,ext)) {
HXLINE(  37)								return true;
            							}
            						}
            					}
HXLINE(  39)					return false;
            				}
            				HX_END_LOCAL_FUNC1(return)

HXDLIN(  34)				::String v = _g2->__get(_g1);
HXDLIN(  34)				_g1 = (_g1 + 1);
HXDLIN(  34)				if (( (bool)( ::Dynamic(new _hx_Closure_0())(v)) )) {
HXDLIN(  34)					_g->push(v);
            				}
            			}
            		}
HXDLIN(  34)		return _g;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageSelectorState_obj,obtenerImagenes,return )

void ImageSelectorState_obj::crearMiniaturas(::Array< ::String > imagenes){
            	HX_GC_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_43_crearMiniaturas)
HXLINE(  44)		 ::flixel::group::FlxTypedGroup miniaturas =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  45)		this->add(miniaturas);
HXLINE(  47)		{
HXLINE(  47)			int _g = 0;
HXDLIN(  47)			int _g1 = imagenes->length;
HXDLIN(  47)			while((_g < _g1)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2,::String,rutaCapturada) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_53_crearMiniaturas)
HXLINE(  54)					::states::debug::ImageSelectorState_obj::imagenSeleccionada = rutaCapturada;
HXLINE(  55)					{
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            						 ::states::debug::MenuEditorState _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_55_crearMiniaturas)
HXLINE(  55)							return  ::states::debug::MenuEditorState_obj::__alloc( HX_CTX );
            						}
            						HX_END_LOCAL_FUNC0(return)

            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_55_crearMiniaturas)
HXLINE(  55)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  55)								::flixel::FlxG_obj::game->_nextState = nextState;
            							}
            							else {
HXLINE(  55)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  55)						 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  55)						 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  55)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  47)				_g = (_g + 1);
HXDLIN(  47)				int i = (_g - 1);
HXLINE(  48)				int x = (10 + (::hx::Mod(i,6) * 110));
HXLINE(  49)				int y = (50 + (::Std_obj::_hx_int((( (Float)(i) ) / ( (Float)(6) ))) * 110));
HXLINE(  50)				::String ruta = (::states::debug::ImageSelectorState_obj::CARPETA + imagenes->__get(i));
HXLINE(  53)				::String rutaCapturada = ruta;
HXLINE(  52)				 ::flixel::ui::FlxButton mini =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,x,y,HX_("",00,00,00,00), ::Dynamic(new _hx_Closure_2(rutaCapturada)));
HXLINE(  59)				mini->loadGraphic(ruta,true,100,100,null(),null());
HXLINE(  60)				mini->label->set_visible(false);
HXLINE(  61)				miniaturas->add(mini).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageSelectorState_obj,crearMiniaturas,(void))

::String ImageSelectorState_obj::imagenSeleccionada;

::String ImageSelectorState_obj::CARPETA;

::Array< ::String > ImageSelectorState_obj::EXTENSIONES;


::hx::ObjectPtr< ImageSelectorState_obj > ImageSelectorState_obj::__new() {
	::hx::ObjectPtr< ImageSelectorState_obj > __this = new ImageSelectorState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ImageSelectorState_obj > ImageSelectorState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ImageSelectorState_obj *__this = (ImageSelectorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ImageSelectorState_obj), true, "states.debug.ImageSelectorState"));
	*(void **)__this = ImageSelectorState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ImageSelectorState_obj::ImageSelectorState_obj()
{
}

::hx::Val ImageSelectorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"obtenerImagenes") ) { return ::hx::Val( obtenerImagenes_dyn() ); }
		if (HX_FIELD_EQ(inName,"crearMiniaturas") ) { return ::hx::Val( crearMiniaturas_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ImageSelectorState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"CARPETA") ) { outValue = ( CARPETA ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"EXTENSIONES") ) { outValue = ( EXTENSIONES ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"imagenSeleccionada") ) { outValue = ( imagenSeleccionada ); return true; }
	}
	return false;
}

bool ImageSelectorState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"CARPETA") ) { CARPETA=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"EXTENSIONES") ) { EXTENSIONES=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"imagenSeleccionada") ) { imagenSeleccionada=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ImageSelectorState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ImageSelectorState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &ImageSelectorState_obj::imagenSeleccionada,HX_("imagenSeleccionada",d4,ab,1d,61)},
	{::hx::fsString,(void *) &ImageSelectorState_obj::CARPETA,HX_("CARPETA",96,d0,41,4b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &ImageSelectorState_obj::EXTENSIONES,HX_("EXTENSIONES",8d,15,38,8f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ImageSelectorState_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("obtenerImagenes",98,a8,a7,35),
	HX_("crearMiniaturas",00,ad,2e,fe),
	::String(null()) };

static void ImageSelectorState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageSelectorState_obj::imagenSeleccionada,"imagenSeleccionada");
	HX_MARK_MEMBER_NAME(ImageSelectorState_obj::CARPETA,"CARPETA");
	HX_MARK_MEMBER_NAME(ImageSelectorState_obj::EXTENSIONES,"EXTENSIONES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageSelectorState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageSelectorState_obj::imagenSeleccionada,"imagenSeleccionada");
	HX_VISIT_MEMBER_NAME(ImageSelectorState_obj::CARPETA,"CARPETA");
	HX_VISIT_MEMBER_NAME(ImageSelectorState_obj::EXTENSIONES,"EXTENSIONES");
};

#endif

::hx::Class ImageSelectorState_obj::__mClass;

static ::String ImageSelectorState_obj_sStaticFields[] = {
	HX_("imagenSeleccionada",d4,ab,1d,61),
	HX_("CARPETA",96,d0,41,4b),
	HX_("EXTENSIONES",8d,15,38,8f),
	::String(null())
};

void ImageSelectorState_obj::__register()
{
	ImageSelectorState_obj _hx_dummy;
	ImageSelectorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.debug.ImageSelectorState",1e,70,36,b0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageSelectorState_obj::__GetStatic;
	__mClass->mSetStaticField = &ImageSelectorState_obj::__SetStatic;
	__mClass->mMarkFunc = ImageSelectorState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ImageSelectorState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ImageSelectorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ImageSelectorState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageSelectorState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageSelectorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageSelectorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ImageSelectorState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_14_boot)
HXDLIN(  14)		imagenSeleccionada = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_16_boot)
HXDLIN(  16)		CARPETA = HX_("assets/imagen/menu/custom/",fe,9e,c8,90);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3627fdfa12d1a3a3_17_boot)
HXDLIN(  17)		EXTENSIONES = ::Array_obj< ::String >::fromData( _hx_array_data_b036701e_14,3);
            	}
}

} // end namespace states
} // end namespace debug
