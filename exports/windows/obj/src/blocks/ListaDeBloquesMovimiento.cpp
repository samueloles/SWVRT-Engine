// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_blocks_Blocks
#include <blocks/Blocks.h>
#endif
#ifndef INCLUDED_blocks_ListaDeBloquesMovimiento
#include <blocks/ListaDeBloquesMovimiento.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b1572f502f0efef1_9_new,"blocks.ListaDeBloquesMovimiento","new",0x70ca9822,"blocks.ListaDeBloquesMovimiento.new","blocks/ListaDeBloquesMovimiento.hx",9,0xb5ac1d2d)
HX_LOCAL_STACK_FRAME(_hx_pos_b1572f502f0efef1_36_update,"blocks.ListaDeBloquesMovimiento","update",0x4e008387,"blocks.ListaDeBloquesMovimiento.update","blocks/ListaDeBloquesMovimiento.hx",36,0xb5ac1d2d)
namespace blocks{

void ListaDeBloquesMovimiento_obj::__construct(::String categoria, ::Dynamic onBloqueClick){
            	HX_GC_STACKFRAME(&_hx_pos_b1572f502f0efef1_9_new)
HXLINE(  11)		this->bloquesTxt = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  14)		super::__construct(null());
HXLINE(  15)		this->onBloqueClick = onBloqueClick;
HXLINE(  17)		::Array< ::Dynamic> bloques = ::blocks::Blocks_obj::getBloquesPorCategoria(categoria);
HXLINE(  18)		int y = 60;
HXLINE(  19)		{
HXLINE(  19)			int _g = 0;
HXDLIN(  19)			while((_g < bloques->length)){
HXLINE(  19)				 ::Dynamic bloque = bloques->__get(_g);
HXDLIN(  19)				_g = (_g + 1);
HXLINE(  20)				 ::flixel::text::FlxText txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,130,y,300,( (::String)(bloque->__Field(HX_("nombre",09,17,13,2d),::hx::paccDynamic)) ),null(),null());
HXLINE(  21)				txt->set_size(16);
HXLINE(  22)				txt->set_color(-1);
HXLINE(  23)				txt->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(  24)				txt->set_borderColor(-16777216);
HXLINE(  25)				txt->ID = y;
HXLINE(  26)				{
HXLINE(  26)					 ::flixel::math::FlxBasePoint this1 = txt->scrollFactor;
HXDLIN(  26)					this1->set_x(( (Float)(0) ));
HXDLIN(  26)					this1->set_y(( (Float)(0) ));
            				}
HXLINE(  27)				txt->set_active(true);
HXLINE(  28)				txt->set_moves(false);
HXLINE(  29)				txt->set_immovable(true);
HXLINE(  30)				this->add(txt);
HXLINE(  31)				this->bloquesTxt->push( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("codigo",99,79,38,c1), ::Dynamic(bloque->__Field(HX_("codigo",99,79,38,c1),::hx::paccDynamic)))
            					->setFixed(1,HX_("txt",70,6e,58,00),txt)));
HXLINE(  32)				y = (y + 40);
            			}
            		}
            	}

Dynamic ListaDeBloquesMovimiento_obj::__CreateEmpty() { return new ListaDeBloquesMovimiento_obj; }

void *ListaDeBloquesMovimiento_obj::_hx_vtable = 0;

Dynamic ListaDeBloquesMovimiento_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ListaDeBloquesMovimiento_obj > _hx_result = new ListaDeBloquesMovimiento_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ListaDeBloquesMovimiento_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x276de696) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x276de696;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void ListaDeBloquesMovimiento_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_b1572f502f0efef1_36_update)
HXLINE(  37)		this->super::update(elapsed);
HXLINE(  38)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(  39)			int mx = ::flixel::FlxG_obj::mouse->x;
HXLINE(  40)			int my = ::flixel::FlxG_obj::mouse->y;
HXLINE(  41)			{
HXLINE(  41)				int _g = 0;
HXDLIN(  41)				::Array< ::Dynamic> _g1 = this->bloquesTxt;
HXDLIN(  41)				while((_g < _g1->length)){
HXLINE(  41)					 ::Dynamic item = _g1->__get(_g);
HXDLIN(  41)					_g = (_g + 1);
HXLINE(  42)					 ::flixel::text::FlxText item1 = ( ( ::flixel::text::FlxText)(item->__Field(HX_("txt",70,6e,58,00),::hx::paccDynamic)) );
HXDLIN(  42)					 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(mx,my);
HXDLIN(  42)					point->_inPool = false;
HXDLIN(  42)					if (item1->overlapsPoint(point,null(),null())) {
HXLINE(  43)						if (::hx::IsNotNull( this->onBloqueClick )) {
HXLINE(  43)							this->onBloqueClick( ::Dynamic(item->__Field(HX_("codigo",99,79,38,c1),::hx::paccDynamic)));
            						}
            					}
            				}
            			}
            		}
            	}



::hx::ObjectPtr< ListaDeBloquesMovimiento_obj > ListaDeBloquesMovimiento_obj::__new(::String categoria, ::Dynamic onBloqueClick) {
	::hx::ObjectPtr< ListaDeBloquesMovimiento_obj > __this = new ListaDeBloquesMovimiento_obj();
	__this->__construct(categoria,onBloqueClick);
	return __this;
}

::hx::ObjectPtr< ListaDeBloquesMovimiento_obj > ListaDeBloquesMovimiento_obj::__alloc(::hx::Ctx *_hx_ctx,::String categoria, ::Dynamic onBloqueClick) {
	ListaDeBloquesMovimiento_obj *__this = (ListaDeBloquesMovimiento_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ListaDeBloquesMovimiento_obj), true, "blocks.ListaDeBloquesMovimiento"));
	*(void **)__this = ListaDeBloquesMovimiento_obj::_hx_vtable;
	__this->__construct(categoria,onBloqueClick);
	return __this;
}

ListaDeBloquesMovimiento_obj::ListaDeBloquesMovimiento_obj()
{
}

void ListaDeBloquesMovimiento_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ListaDeBloquesMovimiento);
	HX_MARK_MEMBER_NAME(onBloqueClick,"onBloqueClick");
	HX_MARK_MEMBER_NAME(bloquesTxt,"bloquesTxt");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ListaDeBloquesMovimiento_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onBloqueClick,"onBloqueClick");
	HX_VISIT_MEMBER_NAME(bloquesTxt,"bloquesTxt");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ListaDeBloquesMovimiento_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bloquesTxt") ) { return ::hx::Val( bloquesTxt ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onBloqueClick") ) { return ::hx::Val( onBloqueClick ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ListaDeBloquesMovimiento_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"bloquesTxt") ) { bloquesTxt=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onBloqueClick") ) { onBloqueClick=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ListaDeBloquesMovimiento_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bloquesTxt",79,94,b0,fd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ListaDeBloquesMovimiento_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ListaDeBloquesMovimiento_obj,onBloqueClick),HX_("onBloqueClick",0d,49,51,cc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ListaDeBloquesMovimiento_obj,bloquesTxt),HX_("bloquesTxt",79,94,b0,fd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ListaDeBloquesMovimiento_obj_sStaticStorageInfo = 0;
#endif

static ::String ListaDeBloquesMovimiento_obj_sMemberFields[] = {
	HX_("onBloqueClick",0d,49,51,cc),
	HX_("bloquesTxt",79,94,b0,fd),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class ListaDeBloquesMovimiento_obj::__mClass;

void ListaDeBloquesMovimiento_obj::__register()
{
	ListaDeBloquesMovimiento_obj _hx_dummy;
	ListaDeBloquesMovimiento_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("blocks.ListaDeBloquesMovimiento",30,9f,17,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ListaDeBloquesMovimiento_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ListaDeBloquesMovimiento_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ListaDeBloquesMovimiento_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ListaDeBloquesMovimiento_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace blocks
