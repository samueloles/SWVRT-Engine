// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_blocks_Blocks
#include <blocks/Blocks.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e2c9661531e827d4_63_getBloquesPorCategoria,"blocks.Blocks","getBloquesPorCategoria",0xa122d861,"blocks.Blocks.getBloquesPorCategoria","blocks/Blocks.hx",63,0x32771fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_e2c9661531e827d4_66_getCategorias,"blocks.Blocks","getCategorias",0x5ed112b6,"blocks.Blocks.getCategorias","blocks/Blocks.hx",66,0x32771fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_e2c9661531e827d4_27_boot,"blocks.Blocks","boot",0xd09cc912,"blocks.Blocks.boot","blocks/Blocks.hx",27,0x32771fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_e2c9661531e827d4_40_boot,"blocks.Blocks","boot",0xd09cc912,"blocks.Blocks.boot","blocks/Blocks.hx",40,0x32771fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_e2c9661531e827d4_47_boot,"blocks.Blocks","boot",0xd09cc912,"blocks.Blocks.boot","blocks/Blocks.hx",47,0x32771fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_e2c9661531e827d4_16_boot,"blocks.Blocks","boot",0xd09cc912,"blocks.Blocks.boot","blocks/Blocks.hx",16,0x32771fcf)
namespace blocks{

void Blocks_obj::__construct() { }

Dynamic Blocks_obj::__CreateEmpty() { return new Blocks_obj; }

void *Blocks_obj::_hx_vtable = 0;

Dynamic Blocks_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Blocks_obj > _hx_result = new Blocks_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Blocks_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x029425d8;
}

::Array< ::Dynamic> Blocks_obj::bloques;

::Array< ::Dynamic> Blocks_obj::getBloquesPorCategoria(::String cat){
            	HX_STACKFRAME(&_hx_pos_e2c9661531e827d4_63_getBloquesPorCategoria)
HXDLIN(  63)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  63)		{
HXDLIN(  63)			int _g1 = 0;
HXDLIN(  63)			::Array< ::Dynamic> _g2 = ::blocks::Blocks_obj::bloques;
HXDLIN(  63)			while((_g1 < _g2->length)){
HXDLIN(  63)				 ::Dynamic v = _g2->__get(_g1);
HXDLIN(  63)				_g1 = (_g1 + 1);
HXDLIN(  63)				if (::hx::IsEq( v->__Field(HX_("categoria",b3,65,39,11),::hx::paccDynamic),cat )) {
HXDLIN(  63)					_g->push(v);
            				}
            			}
            		}
HXDLIN(  63)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Blocks_obj,getBloquesPorCategoria,return )

::Array< ::String > Blocks_obj::getCategorias(){
            	HX_STACKFRAME(&_hx_pos_e2c9661531e827d4_66_getCategorias)
HXLINE(  67)		::Array< ::String > cats = ::Array_obj< ::String >::__new(0);
HXLINE(  68)		{
HXLINE(  68)			int _g = 0;
HXDLIN(  68)			::Array< ::Dynamic> _g1 = ::blocks::Blocks_obj::bloques;
HXDLIN(  68)			while((_g < _g1->length)){
HXLINE(  68)				 ::Dynamic b = _g1->__get(_g);
HXDLIN(  68)				_g = (_g + 1);
HXDLIN(  68)				if (!(cats->contains( ::Dynamic(b->__Field(HX_("categoria",b3,65,39,11),::hx::paccDynamic))))) {
HXLINE(  68)					cats->push( ::Dynamic(b->__Field(HX_("categoria",b3,65,39,11),::hx::paccDynamic)));
            				}
            			}
            		}
HXLINE(  69)		return cats;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Blocks_obj,getCategorias,return )


Blocks_obj::Blocks_obj()
{
}

bool Blocks_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"bloques") ) { outValue = ( bloques ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getCategorias") ) { outValue = getCategorias_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"getBloquesPorCategoria") ) { outValue = getBloquesPorCategoria_dyn(); return true; }
	}
	return false;
}

bool Blocks_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"bloques") ) { bloques=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Blocks_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Blocks_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Blocks_obj::bloques,HX_("bloques",37,0e,47,4e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Blocks_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Blocks_obj::bloques,"bloques");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Blocks_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Blocks_obj::bloques,"bloques");
};

#endif

::hx::Class Blocks_obj::__mClass;

static ::String Blocks_obj_sStaticFields[] = {
	HX_("bloques",37,0e,47,4e),
	HX_("getBloquesPorCategoria",81,db,8e,38),
	HX_("getCategorias",96,f3,71,5d),
	::String(null())
};

void Blocks_obj::__register()
{
	Blocks_obj _hx_dummy;
	Blocks_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("blocks.Blocks",8e,47,99,df);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Blocks_obj::__GetStatic;
	__mClass->mSetStaticField = &Blocks_obj::__SetStatic;
	__mClass->mMarkFunc = Blocks_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Blocks_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Blocks_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Blocks_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Blocks_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Blocks_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Blocks_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e2c9661531e827d4_27_boot)
HXLINE(  27)			::haxe::Log_obj::trace(HX_W(u"\U0001f3b5 Canci\u00f3n iniciada!",94bf,a0e6),::hx::SourceInfo(HX_("source/blocks/Blocks.hx",c3,56,a0,f3),27,HX_("blocks.Blocks",8e,47,99,df),HX_("bloques",37,0e,47,4e)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e2c9661531e827d4_40_boot)
HXLINE(  42)			 ::lime::ui::Window window = ::openfl::Lib_obj::get_application()->_hx___window;
HXLINE(  43)			int originalX = window->_hx___x;
HXLINE(  44)			int originalY = window->_hx___y;
HXLINE(  46)			{
HXLINE(  46)				int _g = 0;
HXDLIN(  46)				while((_g < 10)){
            					HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1,int,originalY, ::lime::ui::Window,window,int,originalX,int,i) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_e2c9661531e827d4_47_boot)
HXLINE(  48)						 ::lime::ui::Window window1 = window;
HXDLIN(  48)						int originalX1 = originalX;
HXDLIN(  48)						window1->set_x((originalX1 + ::Std_obj::_hx_int(((::Math_obj::random() * ( (Float)(20) )) - ( (Float)(10) )))));
HXLINE(  49)						 ::lime::ui::Window window2 = window;
HXDLIN(  49)						int originalY1 = originalY;
HXDLIN(  49)						window2->set_y((originalY1 + ::Std_obj::_hx_int(((::Math_obj::random() * ( (Float)(20) )) - ( (Float)(10) )))));
HXLINE(  51)						if ((i == 9)) {
HXLINE(  52)							window->set_x(originalX);
HXLINE(  53)							window->set_y(originalY);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  46)					_g = (_g + 1);
HXDLIN(  46)					int i = (_g - 1);
HXLINE(  47)					::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_1(originalY,window,originalX,i)),(i * 100));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e2c9661531e827d4_16_boot)
HXDLIN(  16)		bloques = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("codigo",99,79,38,c1),HX_("def on_song_start(\r\n                \r\n            ):\n    pass\n",05,96,ee,ce))
            			->setFixed(1,HX_("categoria",b3,65,39,11),HX_("event",1a,c8,c4,75))
            			->setFixed(2,HX_("nombre",09,17,13,2d),HX_W(u"al empezar la canci\u00f3n",22cc,1b73))
            			->setFixed(3,HX_("color",63,71,5c,4a),16766720)
            			->setFixed(4,HX_("descripcion",6d,68,e0,53),HX_W(u"Ejecuta el c\u00f3digo cuando empieza la canci\u00f3n\r\n            ",201d,f859))
            			->setFixed(5,HX_("logica",43,59,6a,5c), ::Dynamic(new _hx_Closure_0()))))->init(1, ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("codigo",99,79,38,c1),HX_("def shake_window(\r\n                intensity: float = 5.0,\r\n                duration: float = 1.0\r\n            ):\n    # Temblar ventana\n    pass\n",2d,bf,e2,1c))
            			->setFixed(1,HX_("categoria",b3,65,39,11),HX_("effect",91,5a,a3,60))
            			->setFixed(2,HX_("nombre",09,17,13,2d),HX_("tembrar ventana intensity: (5.0) duration: (1.0)",49,5d,46,e9))
            			->setFixed(3,HX_("color",63,71,5c,4a),16739143)
            			->setFixed(4,HX_("descripcion",6d,68,e0,53),HX_("Hace que la ventana del juego tiemble\r\n            ",60,32,c4,37))
            			->setFixed(5,HX_("logica",43,59,6a,5c), ::Dynamic(new _hx_Closure_2()))));
            	}
}

} // end namespace blocks
