// Generated by Haxe 4.3.7
#ifndef INCLUDED_states_debug_PlaySongDebug
#define INCLUDED_states_debug_PlaySongDebug

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(states,debug,PlaySongDebug)

namespace states{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES PlaySongDebug_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef PlaySongDebug_obj OBJ_;
		PlaySongDebug_obj();

	public:
		enum { _hx_ClassId = 0x03b3d619 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.debug.PlaySongDebug")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.debug.PlaySongDebug"); }
		static ::hx::ObjectPtr< PlaySongDebug_obj > __new();
		static ::hx::ObjectPtr< PlaySongDebug_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PlaySongDebug_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PlaySongDebug",8a,3d,cf,e8); }

		::String songName;
		::Array< ::String > availableSongs;
		 ::flixel::text::FlxText debugInfo;
		 ::flixel::text::FlxText eventsList;
		int currentBeat;
		bool isPlaying;
		 ::flixel::group::FlxTypedGroup notes;
		 ::flixel::FlxSprite strumLine;
		::cpp::VirtualArray chartNotes;
		Float songPosition;
		Float bpm;
		void create();

		void detectarCanciones();
		::Dynamic detectarCanciones_dyn();

		void cargarChart();
		::Dynamic cargarChart_dyn();

		void crearSistemaNotas();
		::Dynamic crearSistemaNotas_dyn();

		void generarNotas();
		::Dynamic generarNotas_dyn();

		void crearFlechaIzquierda( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaIzquierda_dyn();

		void crearFlechaDerecha( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaDerecha_dyn();

		void crearFlechaArriba( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaArriba_dyn();

		void crearFlechaAbajo( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaAbajo_dyn();

		void crearControlesDebug();
		::Dynamic crearControlesDebug_dyn();

		void togglePlay();
		::Dynamic togglePlay_dyn();

		void stopSong();
		::Dynamic stopSong_dyn();

		void restartSong();
		::Dynamic restartSong_dyn();

		void actualizarDebugInfo();
		::Dynamic actualizarDebugInfo_dyn();

		void update(Float elapsed);

};

} // end namespace states
} // end namespace debug

#endif /* INCLUDED_states_debug_PlaySongDebug */ 
