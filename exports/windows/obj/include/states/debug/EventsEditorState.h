// Generated by Haxe 4.3.7
#ifndef INCLUDED_states_debug_EventsEditorState
#define INCLUDED_states_debug_EventsEditorState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(states,debug,EventsEditorState)

namespace states{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES EventsEditorState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef EventsEditorState_obj OBJ_;
		EventsEditorState_obj();

	public:
		enum { _hx_ClassId = 0x45df1a7a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.debug.EventsEditorState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.debug.EventsEditorState"); }
		static ::hx::ObjectPtr< EventsEditorState_obj > __new();
		static ::hx::ObjectPtr< EventsEditorState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~EventsEditorState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("EventsEditorState",6b,8e,81,aa); }

		 ::flixel::FlxSprite sidebar;
		 ::flixel::FlxSprite scriptArea;
		 ::flixel::FlxSprite listaBloques;
		::Array< ::String > categorias;
		::String categoriaSeleccionada;
		::Array< ::Dynamic> categoriasTxt;
		::Array< ::Dynamic> bloquesEnScript;
		 ::flixel::FlxSprite bloqueArrastrado;
		::Array< ::Dynamic> bloquesDisponibles;
		 ::flixel::math::FlxBasePoint offsetArrastre;
		 ::flixel::FlxSprite bloqueOriginal;
		bool editandoParametro;
		 ::flixel::FlxSprite bloqueEditando;
		::Array< ::Dynamic> textosBloque;
		::Array< ::Dynamic> bloquesInfo;
		::String nombreEvento;
		 ::flixel::text::FlxText inputNombre;
		 ::flixel::FlxSprite confirmDialog;
		bool showingDialog;
		int getCategoriaColor(::String cat,bool seleccionado);
		::Dynamic getCategoriaColor_dyn();

		void create();

		void update(Float elapsed);

		 ::flixel::FlxSprite crearBloqueVisual( ::Dynamic bloque,Float x,Float y);
		::Dynamic crearBloqueVisual_dyn();

		void ordenarBloques();
		::Dynamic ordenarBloques_dyn();

		 ::flixel::text::FlxText obtenerTextoBloque(int indice);
		::Dynamic obtenerTextoBloque_dyn();

		void dibujarConectores();
		::Dynamic dibujarConectores_dyn();

		void actualizarTextoBloque(int indice);
		::Dynamic actualizarTextoBloque_dyn();

		void refrescarListaBloques();
		::Dynamic refrescarListaBloques_dyn();

		void guardarEventos();
		::Dynamic guardarEventos_dyn();

		void guardarComoScript(int eventCount);
		::Dynamic guardarComoScript_dyn();

		void mostrarDialogoReemplazo(::String fileName,::String data);
		::Dynamic mostrarDialogoReemplazo_dyn();

		void cerrarDialog();
		::Dynamic cerrarDialog_dyn();

		void ejecutarBloque(::String nombreBloque);
		::Dynamic ejecutarBloque_dyn();

		void modificarParametroNumerico( ::flixel::FlxSprite bloque,int cambio);
		::Dynamic modificarParametroNumerico_dyn();

		void modificarParametroTexto( ::flixel::FlxSprite bloque);
		::Dynamic modificarParametroTexto_dyn();

};

} // end namespace states
} // end namespace debug

#endif /* INCLUDED_states_debug_EventsEditorState */ 
