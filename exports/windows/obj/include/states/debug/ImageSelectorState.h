// Generated by Haxe 4.3.7
#ifndef INCLUDED_states_debug_ImageSelectorState
#define INCLUDED_states_debug_ImageSelectorState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(states,debug,ImageSelectorState)

namespace states{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES ImageSelectorState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef ImageSelectorState_obj OBJ_;
		ImageSelectorState_obj();

	public:
		enum { _hx_ClassId = 0x02ad2780 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.debug.ImageSelectorState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.debug.ImageSelectorState"); }
		static ::hx::ObjectPtr< ImageSelectorState_obj > __new();
		static ::hx::ObjectPtr< ImageSelectorState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ImageSelectorState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImageSelectorState",37,9a,41,34); }

		static void __boot();
		static ::String imagenSeleccionada;
		static ::String CARPETA;
		static ::Array< ::String > EXTENSIONES;
		void create();

		::Array< ::String > obtenerImagenes();
		::Dynamic obtenerImagenes_dyn();

		void crearMiniaturas(::Array< ::String > imagenes);
		::Dynamic crearMiniaturas_dyn();

};

} // end namespace states
} // end namespace debug

#endif /* INCLUDED_states_debug_ImageSelectorState */ 
