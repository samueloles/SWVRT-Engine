// Generated by Haxe 4.3.7
#ifndef INCLUDED_states_debug_ChartMenuState
#define INCLUDED_states_debug_ChartMenuState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(states,debug,ChartMenuState)

namespace states{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES ChartMenuState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef ChartMenuState_obj OBJ_;
		ChartMenuState_obj();

	public:
		enum { _hx_ClassId = 0x7fef5fe1 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.debug.ChartMenuState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.debug.ChartMenuState"); }
		static ::hx::ObjectPtr< ChartMenuState_obj > __new();
		static ::hx::ObjectPtr< ChartMenuState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ChartMenuState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ChartMenuState",54,2b,99,78); }

		 ::flixel::FlxSprite gridBG;
		 ::flixel::FlxSprite strumLine;
		 ::flixel::group::FlxTypedGroup notes;
		 ::flixel::group::FlxTypedGroup events;
		Float currentBeat;
		Float songPosition;
		Float bpm;
		 ::flixel::text::FlxText infoText;
		 ::flixel::text::FlxText beatText;
		 ::flixel::text::FlxText sectionText;
		 ::flixel::FlxSprite eventsPanel;
		int currentSection;
		int gridSize;
		bool isPlaying;
		Float scrollY;
		bool modoEvento;
		::Array< ::Dynamic> chartNotes;
		::Array< ::Dynamic> chartEvents;
		 ::flixel::FlxSprite notaSeleccionada;
		::String playerCharacter;
		::String opponentCharacter;
		::String gfCharacter;
		::Array< ::String > availableCharacters;
		::Array< Float > playerPos;
		::Array< Float > opponentPos;
		::Array< Float > gfPos;
		::String chartName;
		 ::flixel::text::FlxText nameInput;
		 ::flixel::FlxSprite confirmDialog;
		bool showingDialog;
		void create();

		void crearGrid();
		::Dynamic crearGrid_dyn();

		void crearUI();
		::Dynamic crearUI_dyn();

		void togglePlay();
		::Dynamic togglePlay_dyn();

		void saveChart();
		::Dynamic saveChart_dyn();

		void loadChart();
		::Dynamic loadChart_dyn();

		void actualizarInfo();
		::Dynamic actualizarInfo_dyn();

		void crearPanelEventos();
		::Dynamic crearPanelEventos_dyn();

		void toggleModoEvento();
		::Dynamic toggleModoEvento_dyn();

		void colocarNota(Float x,Float y);
		::Dynamic colocarNota_dyn();

		void guardarEventos();
		::Dynamic guardarEventos_dyn();

		void crearFlechaIzquierda( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaIzquierda_dyn();

		void crearFlechaDerecha( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaDerecha_dyn();

		void crearFlechaArriba( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaArriba_dyn();

		void crearFlechaAbajo( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaAbajo_dyn();

		void update(Float elapsed);

		void actualizarNotaLarga( ::flixel::FlxSprite sprite, ::Dynamic nota);
		::Dynamic actualizarNotaLarga_dyn();

		void seleccionarCancion();
		::Dynamic seleccionarCancion_dyn();

		void crearFlechaEvento( ::flixel::FlxSprite sprite,int color);
		::Dynamic crearFlechaEvento_dyn();

		void detectarPersonajes();
		::Dynamic detectarPersonajes_dyn();

		void cambiarPlayer();
		::Dynamic cambiarPlayer_dyn();

		void cambiarOpponent();
		::Dynamic cambiarOpponent_dyn();

		void cambiarGF();
		::Dynamic cambiarGF_dyn();

		void editarPosiciones();
		::Dynamic editarPosiciones_dyn();

		void editarNombre();
		::Dynamic editarNombre_dyn();

		void mostrarDialogoReemplazo(::String fileName, ::Dynamic chartData);
		::Dynamic mostrarDialogoReemplazo_dyn();

		void cerrarDialog();
		::Dynamic cerrarDialog_dyn();

		void guardarArchivo(::String fileName, ::Dynamic chartData);
		::Dynamic guardarArchivo_dyn();

};

} // end namespace states
} // end namespace debug

#endif /* INCLUDED_states_debug_ChartMenuState */ 
