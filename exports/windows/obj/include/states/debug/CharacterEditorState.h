// Generated by Haxe 4.3.7
#ifndef INCLUDED_states_debug_CharacterEditorState
#define INCLUDED_states_debug_CharacterEditorState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(states,debug,CharacterEditorState)

namespace states{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES CharacterEditorState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef CharacterEditorState_obj OBJ_;
		CharacterEditorState_obj();

	public:
		enum { _hx_ClassId = 0x226109a4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.debug.CharacterEditorState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.debug.CharacterEditorState"); }
		static ::hx::ObjectPtr< CharacterEditorState_obj > __new();
		static ::hx::ObjectPtr< CharacterEditorState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CharacterEditorState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CharacterEditorState",1b,d8,00,38); }

		 ::flixel::FlxSprite characterSprite;
		::String characterName;
		::Array< ::Dynamic> animations;
		int currentAnimation;
		 ::flixel::FlxSprite confirmDialog;
		bool showingDialog;
		 ::flixel::text::FlxText infoText;
		 ::flixel::text::FlxText nameInput;
		 ::flixel::text::FlxText animationsList;
		 ::flixel::FlxSprite previewArea;
		::String animName;
		::String animPrefix;
		int animFPS;
		bool animLooped;
		 ::flixel::text::FlxText nameField;
		 ::flixel::text::FlxText prefixField;
		 ::flixel::text::FlxText fpsField;
		::String editingField;
		void create();

		void createButtons();
		::Dynamic createButtons_dyn();

		void loadAssets();
		::Dynamic loadAssets_dyn();

		void addAnimation();
		::Dynamic addAnimation_dyn();

		void playAnimation();
		::Dynamic playAnimation_dyn();

		void saveCharacter();
		::Dynamic saveCharacter_dyn();

		void loadCharacterAssets();
		::Dynamic loadCharacterAssets_dyn();

		void updateInfo();
		::Dynamic updateInfo_dyn();

		void updateAnimationsList();
		::Dynamic updateAnimationsList_dyn();

		void update(Float elapsed);

		void mostrarDialogoReemplazo(::String fileName, ::Dynamic data);
		::Dynamic mostrarDialogoReemplazo_dyn();

		void cerrarDialog();
		::Dynamic cerrarDialog_dyn();

		void guardarArchivo(::String fileName, ::Dynamic data);
		::Dynamic guardarArchivo_dyn();

		void createAnimationInputs();
		::Dynamic createAnimationInputs_dyn();

		void toggleLoop();
		::Dynamic toggleLoop_dyn();

		void handleTextInput();
		::Dynamic handleTextInput_dyn();

		void loadCharacterJSON();
		::Dynamic loadCharacterJSON_dyn();

};

} // end namespace states
} // end namespace debug

#endif /* INCLUDED_states_debug_CharacterEditorState */ 
