// Generated by Haxe 4.3.7
#ifndef INCLUDED_states_debug_MenuEditorState
#define INCLUDED_states_debug_MenuEditorState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(states,debug,EditorMode)
HX_DECLARE_CLASS2(states,debug,MenuEditorState)

namespace states{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES MenuEditorState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef MenuEditorState_obj OBJ_;
		MenuEditorState_obj();

	public:
		enum { _hx_ClassId = 0x78972c58 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.debug.MenuEditorState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.debug.MenuEditorState"); }
		static ::hx::ObjectPtr< MenuEditorState_obj > __new();
		static ::hx::ObjectPtr< MenuEditorState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MenuEditorState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MenuEditorState",a5,01,e4,9f); }

		static void __boot();
		static ::cpp::VirtualArray elementosCompartidos;
		::cpp::VirtualArray elementos;
		::Array< ::Dynamic> botonesUI;
		 ::flixel::ui::FlxButton btnVolver;
		bool editandoTexto;
		::String textoTemporal;
		 ::flixel::text::FlxText info;
		::String fuenteActiva;
		 ::flixel::FlxSprite seleccionado;
		 ::flixel::FlxSprite seleccionRect;
		int velocidad;
		 ::states::debug::EditorMode modoActual;
		::String nombreMenu;
		 ::flixel::text::FlxText inputNombre;
		 ::flixel::FlxSprite confirmDialog;
		bool showingDialog;
		void create();

		void mostrarFuentes();
		::Dynamic mostrarFuentes_dyn();

		void update(Float elapsed);

		void exportarEscena(::String nombre);
		::Dynamic exportarEscena_dyn();

		void guardarMenu();
		::Dynamic guardarMenu_dyn();

		void mostrarDialogoReemplazo(::String fileName,::String data);
		::Dynamic mostrarDialogoReemplazo_dyn();

		void cerrarDialog();
		::Dynamic cerrarDialog_dyn();

		void mostrarOpcionesEstablecer();
		::Dynamic mostrarOpcionesEstablecer_dyn();

		void establecerComoPause();
		::Dynamic establecerComoPause_dyn();

		void establecerComoOtro();
		::Dynamic establecerComoOtro_dyn();

};

} // end namespace states
} // end namespace debug

#endif /* INCLUDED_states_debug_MenuEditorState */ 
