// Generated by Haxe 4.3.7
#ifndef INCLUDED_blocks_EventBlocks
#define INCLUDED_blocks_EventBlocks

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(blocks,EventBlocks)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace blocks{


class HXCPP_CLASS_ATTRIBUTES EventBlocks_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef EventBlocks_obj OBJ_;
		EventBlocks_obj();

	public:
		enum { _hx_ClassId = 0x3f92925a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="blocks.EventBlocks")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"blocks.EventBlocks"); }

		inline static ::hx::ObjectPtr< EventBlocks_obj > __new() {
			::hx::ObjectPtr< EventBlocks_obj > __this = new EventBlocks_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< EventBlocks_obj > __alloc(::hx::Ctx *_hx_ctx) {
			EventBlocks_obj *__this = (EventBlocks_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EventBlocks_obj), false, "blocks.EventBlocks"));
			*(void **)__this = EventBlocks_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~EventBlocks_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("EventBlocks",20,12,6a,df); }

		static void __boot();
		static  ::haxe::ds::StringMap cooldowns;
		static bool puedeEjecutar(::String nombreBloque);
		static ::Dynamic puedeEjecutar_dyn();

		static void marcarEjecutado(::String nombreBloque);
		static ::Dynamic marcarEjecutado_dyn();

		static ::Array< ::Dynamic> bloques;
		static ::Array< ::Dynamic> getBloquesPorCategoria(::String cat);
		static ::Dynamic getBloquesPorCategoria_dyn();

		static ::Array< ::String > getCategorias();
		static ::Dynamic getCategorias_dyn();

};

} // end namespace blocks

#endif /* INCLUDED_blocks_EventBlocks */ 
