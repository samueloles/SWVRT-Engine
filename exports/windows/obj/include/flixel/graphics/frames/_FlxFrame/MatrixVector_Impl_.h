// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_graphics_frames__FlxFrame_MatrixVector_Impl_
#define INCLUDED_flixel_graphics_frames__FlxFrame_MatrixVector_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(flixel,graphics,frames,_FlxFrame,MatrixVector_Impl_)
HX_DECLARE_CLASS2(flixel,math,FlxMatrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace flixel{
namespace graphics{
namespace frames{
namespace _FlxFrame{


class HXCPP_CLASS_ATTRIBUTES MatrixVector_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MatrixVector_Impl__obj OBJ_;
		MatrixVector_Impl__obj();

	public:
		enum { _hx_ClassId = 0x1066b79d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.graphics.frames._FlxFrame.MatrixVector_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.graphics.frames._FlxFrame.MatrixVector_Impl_"); }

		inline static ::hx::ObjectPtr< MatrixVector_Impl__obj > __new() {
			::hx::ObjectPtr< MatrixVector_Impl__obj > __this = new MatrixVector_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< MatrixVector_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			MatrixVector_Impl__obj *__this = (MatrixVector_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MatrixVector_Impl__obj), false, "flixel.graphics.frames._FlxFrame.MatrixVector_Impl_"));
			*(void **)__this = MatrixVector_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MatrixVector_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MatrixVector_Impl_",a4,e5,d9,c9); }

		static Float get_a(::Array< Float > this1);
		static ::Dynamic get_a_dyn();

		static Float set_a(::Array< Float > this1,Float value);
		static ::Dynamic set_a_dyn();

		static Float get_b(::Array< Float > this1);
		static ::Dynamic get_b_dyn();

		static Float set_b(::Array< Float > this1,Float value);
		static ::Dynamic set_b_dyn();

		static Float get_c(::Array< Float > this1);
		static ::Dynamic get_c_dyn();

		static Float set_c(::Array< Float > this1,Float value);
		static ::Dynamic set_c_dyn();

		static Float get_d(::Array< Float > this1);
		static ::Dynamic get_d_dyn();

		static Float set_d(::Array< Float > this1,Float value);
		static ::Dynamic set_d_dyn();

		static Float get_tx(::Array< Float > this1);
		static ::Dynamic get_tx_dyn();

		static Float set_tx(::Array< Float > this1,Float value);
		static ::Dynamic set_tx_dyn();

		static Float get_ty(::Array< Float > this1);
		static ::Dynamic get_ty_dyn();

		static Float set_ty(::Array< Float > this1,Float value);
		static ::Dynamic set_ty_dyn();

		static ::Array< Float > _new();
		static ::Dynamic _new_dyn();

		static void identity(::Array< Float > this1);
		static ::Dynamic identity_dyn();

		static ::Array< Float > set(::Array< Float > this1,::hx::Null< Float >  a,::hx::Null< Float >  b,::hx::Null< Float >  c,::hx::Null< Float >  d,::hx::Null< Float >  tx,::hx::Null< Float >  ty);
		static ::Dynamic set_dyn();

		static ::Array< Float > translate(::Array< Float > this1,Float dx,Float dy);
		static ::Dynamic translate_dyn();

		static ::Array< Float > scale(::Array< Float > this1,Float sx,Float sy);
		static ::Dynamic scale_dyn();

		static  ::flixel::math::FlxMatrix copyTo(::Array< Float > this1, ::flixel::math::FlxMatrix mat);
		static ::Dynamic copyTo_dyn();

};

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
} // end namespace _FlxFrame

#endif /* INCLUDED_flixel_graphics_frames__FlxFrame_MatrixVector_Impl_ */ 
