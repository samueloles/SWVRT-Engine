// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_graphics_frames__FlxFrame_FlxUVRect_Impl_
#define INCLUDED_flixel_graphics_frames__FlxFrame_FlxUVRect_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(flixel,graphics,frames,_FlxFrame,FlxUVRect_Impl_)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace graphics{
namespace frames{
namespace _FlxFrame{


class HXCPP_CLASS_ATTRIBUTES FlxUVRect_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxUVRect_Impl__obj OBJ_;
		FlxUVRect_Impl__obj();

	public:
		enum { _hx_ClassId = 0x39d5dd4a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.graphics.frames._FlxFrame.FlxUVRect_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.graphics.frames._FlxFrame.FlxUVRect_Impl_"); }

		inline static ::hx::ObjectPtr< FlxUVRect_Impl__obj > __new() {
			::hx::ObjectPtr< FlxUVRect_Impl__obj > __this = new FlxUVRect_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxUVRect_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			FlxUVRect_Impl__obj *__this = (FlxUVRect_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUVRect_Impl__obj), false, "flixel.graphics.frames._FlxFrame.FlxUVRect_Impl_"));
			*(void **)__this = FlxUVRect_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxUVRect_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxUVRect_Impl_",d7,1d,4d,c3); }

		static Float get_left( ::flixel::math::FlxRect this1);
		static ::Dynamic get_left_dyn();

		static Float set_left( ::flixel::math::FlxRect this1,Float value);
		static ::Dynamic set_left_dyn();

		static Float get_right( ::flixel::math::FlxRect this1);
		static ::Dynamic get_right_dyn();

		static Float set_right( ::flixel::math::FlxRect this1,Float value);
		static ::Dynamic set_right_dyn();

		static Float get_top( ::flixel::math::FlxRect this1);
		static ::Dynamic get_top_dyn();

		static Float set_top( ::flixel::math::FlxRect this1,Float value);
		static ::Dynamic set_top_dyn();

		static Float get_bottom( ::flixel::math::FlxRect this1);
		static ::Dynamic get_bottom_dyn();

		static Float set_bottom( ::flixel::math::FlxRect this1,Float value);
		static ::Dynamic set_bottom_dyn();

		static void set( ::flixel::math::FlxRect this1,Float l,Float t,Float r,Float b);
		static ::Dynamic set_dyn();

		static void copyTo( ::flixel::math::FlxRect this1, ::flixel::math::FlxRect uv);
		static ::Dynamic copyTo_dyn();

		static void copyFrom( ::flixel::math::FlxRect this1, ::flixel::math::FlxRect uv);
		static ::Dynamic copyFrom_dyn();

		static  ::flixel::math::FlxRect get(::hx::Null< Float >  l,::hx::Null< Float >  t,::hx::Null< Float >  r,::hx::Null< Float >  b);
		static ::Dynamic get_dyn();

};

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
} // end namespace _FlxFrame

#endif /* INCLUDED_flixel_graphics_frames__FlxFrame_FlxUVRect_Impl_ */ 
