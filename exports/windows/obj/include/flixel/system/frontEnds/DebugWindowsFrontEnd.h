// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_system_frontEnds_DebugWindowsFrontEnd
#define INCLUDED_flixel_system_frontEnds_DebugWindowsFrontEnd

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(flixel,_hx_system,debug,FlxDebugger)
HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)
HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,DebugWindowsFrontEnd)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace flixel{
namespace _hx_system{
namespace frontEnds{


class HXCPP_CLASS_ATTRIBUTES DebugWindowsFrontEnd_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DebugWindowsFrontEnd_obj OBJ_;
		DebugWindowsFrontEnd_obj();

	public:
		enum { _hx_ClassId = 0x4f4ad478 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.system.frontEnds.DebugWindowsFrontEnd")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.system.frontEnds.DebugWindowsFrontEnd"); }
		static ::hx::ObjectPtr< DebugWindowsFrontEnd_obj > __new();
		static ::hx::ObjectPtr< DebugWindowsFrontEnd_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DebugWindowsFrontEnd_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DebugWindowsFrontEnd",62,bf,79,8d); }

		 ::flixel::_hx_system::debug::FlxDebugger get_debugger();
		::Dynamic get_debugger_dyn();

		void add( ::flixel::_hx_system::debug::Window window, ::Dynamic button);
		::Dynamic add_dyn();

		void remove( ::flixel::_hx_system::debug::Window window);
		::Dynamic remove_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds

#endif /* INCLUDED_flixel_system_frontEnds_DebugWindowsFrontEnd */ 
