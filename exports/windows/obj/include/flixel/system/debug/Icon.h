// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_system_debug_Icon
#define INCLUDED_flixel_system_debug_Icon

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(flixel,_hx_system,debug,Icon)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,ArrowLeft)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,ArrowRight)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,BitmapLog)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Close)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Console)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Cross)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,DrawDebug)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Eraser)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Flixel)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Interactive)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Log)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Maximize)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Minimize)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Mover)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Open)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Pause)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,RecordOff)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,RecordOn)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Restart)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Rotate)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,ScaleX)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,ScaleXY)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,ScaleY)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Stats)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Step)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Stop)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Transform)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,Watch)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_Icon,WindowHandle)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace flixel{
namespace _hx_system{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES Icon_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Icon_obj OBJ_;
		Icon_obj();

	public:
		enum { _hx_ClassId = 0x6cea4081 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.system.debug.Icon")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.system.debug.Icon"); }

		inline static ::hx::ObjectPtr< Icon_obj > __new() {
			::hx::ObjectPtr< Icon_obj > __this = new Icon_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Icon_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Icon_obj *__this = (Icon_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Icon_obj), false, "flixel.system.debug.Icon"));
			*(void **)__this = Icon_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Icon_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Icon",99,13,8c,30); }

		static void __boot();
		static  ::flixel::_hx_system::debug::_Icon::Flixel flixel;
		static  ::flixel::_hx_system::debug::_Icon::Cross cross;
		static  ::flixel::_hx_system::debug::_Icon::Mover mover;
		static  ::flixel::_hx_system::debug::_Icon::Eraser eraser;
		static  ::flixel::_hx_system::debug::_Icon::BitmapLog bitmapLog;
		static  ::flixel::_hx_system::debug::_Icon::Transform transform;
		static  ::flixel::_hx_system::debug::_Icon::ScaleX scaleX;
		static  ::flixel::_hx_system::debug::_Icon::ScaleY scaleY;
		static  ::flixel::_hx_system::debug::_Icon::ScaleXY scaleXY;
		static  ::flixel::_hx_system::debug::_Icon::Rotate rotate;
		static  ::flixel::_hx_system::debug::_Icon::DrawDebug drawDebug;
		static  ::flixel::_hx_system::debug::_Icon::Log log;
		static  ::flixel::_hx_system::debug::_Icon::Stats stats;
		static  ::flixel::_hx_system::debug::_Icon::Watch watch;
		static  ::flixel::_hx_system::debug::_Icon::Console console;
		static  ::flixel::_hx_system::debug::_Icon::ArrowLeft arrowLeft;
		static  ::flixel::_hx_system::debug::_Icon::ArrowRight arrowRight;
		static  ::flixel::_hx_system::debug::_Icon::Close close;
		static  ::flixel::_hx_system::debug::_Icon::Interactive interactive;
		static  ::flixel::_hx_system::debug::_Icon::WindowHandle windowHandle;
		static  ::flixel::_hx_system::debug::_Icon::Minimize minimize;
		static  ::flixel::_hx_system::debug::_Icon::Maximize maximize;
		static  ::flixel::_hx_system::debug::_Icon::Open open;
		static  ::flixel::_hx_system::debug::_Icon::Pause pause;
		static  ::flixel::_hx_system::debug::_Icon::RecordOff recordOff;
		static  ::flixel::_hx_system::debug::_Icon::RecordOn recordOn;
		static  ::flixel::_hx_system::debug::_Icon::Restart restart;
		static  ::flixel::_hx_system::debug::_Icon::Step step;
		static  ::flixel::_hx_system::debug::_Icon::Stop stop;
};

} // end namespace flixel
} // end namespace system
} // end namespace debug

#endif /* INCLUDED_flixel_system_debug_Icon */ 
