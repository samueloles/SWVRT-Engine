// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_system_debug_watch_WatchBase
#define INCLUDED_flixel_system_debug_watch_WatchBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
HX_DECLARE_CLASS3(flixel,_hx_system,debug,ScrollBar)
HX_DECLARE_CLASS3(flixel,_hx_system,debug,ScrollSprite)
HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,WatchBase)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,WatchEntry)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,watch,WatchEntryData)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace flixel{
namespace _hx_system{
namespace debug{
namespace watch{


class HXCPP_CLASS_ATTRIBUTES WatchBase_obj : public  ::flixel::_hx_system::debug::Window_obj
{
	public:
		typedef  ::flixel::_hx_system::debug::Window_obj super;
		typedef WatchBase_obj OBJ_;
		WatchBase_obj();

	public:
		enum { _hx_ClassId = 0x27ebba19 };

		void __construct( ::Dynamic entryConstructor,::String title, ::openfl::display::BitmapData icon,::hx::Null< bool >  __o_resizable, ::openfl::geom::Rectangle bounds,::hx::Null< bool >  __o_closable,::hx::Null< bool >  __o_alwaysOnTop);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.debug.watch.WatchBase")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.system.debug.watch.WatchBase"); }
		static ::hx::ObjectPtr< WatchBase_obj > __new( ::Dynamic entryConstructor,::String title, ::openfl::display::BitmapData icon,::hx::Null< bool >  __o_resizable, ::openfl::geom::Rectangle bounds,::hx::Null< bool >  __o_closable,::hx::Null< bool >  __o_alwaysOnTop);
		static ::hx::ObjectPtr< WatchBase_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic entryConstructor,::String title, ::openfl::display::BitmapData icon,::hx::Null< bool >  __o_resizable, ::openfl::geom::Rectangle bounds,::hx::Null< bool >  __o_closable,::hx::Null< bool >  __o_alwaysOnTop);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~WatchBase_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("WatchBase",e0,dd,cc,d6); }

		static void __boot();
		static int LINE_HEIGHT;
		bool get_alwaysOnTop();
		::Dynamic get_alwaysOnTop_dyn();

		bool set_alwaysOnTop(bool value);
		::Dynamic set_alwaysOnTop_dyn();

		 ::flixel::_hx_system::debug::ScrollSprite entriesContainer;
		 ::flixel::_hx_system::debug::ScrollBar scrollbar;
		::cpp::VirtualArray entries;
		 ::Dynamic create;
		Dynamic create_dyn() { return create;}
		void add(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data);
		::Dynamic add_dyn();

		bool isInvalid(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data);
		::Dynamic isInvalid_dyn();

		 ::Dynamic getExistingEntry(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data);
		::Dynamic getExistingEntry_dyn();

		void addEntry(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data,::hx::Null< bool >  redraw);
		::Dynamic addEntry_dyn();

		void remove(::String displayName, ::flixel::_hx_system::debug::watch::WatchEntryData data);
		::Dynamic remove_dyn();

		void removeEntry( ::Dynamic entry);
		::Dynamic removeEntry_dyn();

		void clear();
		::Dynamic clear_dyn();

		void removeAll();
		::Dynamic removeAll_dyn();

		void update();

		void updateSize();

		Float getMarginWidth();
		::Dynamic getMarginWidth_dyn();

		Float getMarginHeight();
		::Dynamic getMarginHeight_dyn();

		void resetEntries();
		::Dynamic resetEntries_dyn();

		Float getMaxNameWidth();
		::Dynamic getMaxNameWidth_dyn();

		Float getMaxMinWidth();
		::Dynamic getMaxMinWidth_dyn();

		Float getMax( ::Dynamic getValue);
		::Dynamic getMax_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace watch

#endif /* INCLUDED_flixel_system_debug_watch_WatchBase */ 
