// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_system_debug_log_BitmapLog
#define INCLUDED_flixel_system_debug_log_BitmapLog

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS3(flixel,_hx_system,debug,Window)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,log,BitmapLog)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,log,Footer)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,log,Header)
HX_DECLARE_CLASS5(flixel,_hx_system,debug,log,_BitmapLog,State)
HX_DECLARE_CLASS3(flixel,_hx_system,ui,FlxSystemButton)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)

namespace flixel{
namespace _hx_system{
namespace debug{
namespace log{


class HXCPP_CLASS_ATTRIBUTES BitmapLog_obj : public  ::flixel::_hx_system::debug::Window_obj
{
	public:
		typedef  ::flixel::_hx_system::debug::Window_obj super;
		typedef BitmapLog_obj OBJ_;
		BitmapLog_obj();

	public:
		enum { _hx_ClassId = 0x2f4a4e2d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.debug.log.BitmapLog")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.system.debug.log.BitmapLog"); }
		static ::hx::ObjectPtr< BitmapLog_obj > __new();
		static ::hx::ObjectPtr< BitmapLog_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BitmapLog_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BitmapLog",b5,3b,ae,68); }

		Float zoom;
		::Array< ::Dynamic> entries;
		 ::openfl::display::Bitmap canvas;
		 ::flixel::_hx_system::debug::log::Header header;
		 ::flixel::_hx_system::debug::log::Footer footer;
		 ::flixel::_hx_system::ui::FlxSystemButton buttonRemove;
		 ::flixel::math::FlxBasePoint canvasOffset;
		int index;
		 ::flixel::_hx_system::debug::log::_BitmapLog::State state;
		void destroy();

		void onMouseWheel( ::openfl::events::MouseEvent e);
		::Dynamic onMouseWheel_dyn();

		void onMouseDown( ::openfl::events::MouseEvent e);

		void onMouseUp( ::openfl::events::MouseEvent e);

		void onMouseMove( ::openfl::events::MouseEvent e);

		void updateSize();

		void resize(Float width,Float height);

		void resetSettings();
		::Dynamic resetSettings_dyn();

		int indexOf( ::openfl::display::BitmapData bitmap);
		::Dynamic indexOf_dyn();

		 ::Dynamic entryOf( ::openfl::display::BitmapData bitmap);
		::Dynamic entryOf_dyn();

		bool has( ::openfl::display::BitmapData bitmap);
		::Dynamic has_dyn();

		bool add( ::openfl::display::BitmapData bitmap,::String name);
		::Dynamic add_dyn();

		void remove( ::openfl::display::BitmapData bitmap);
		::Dynamic remove_dyn();

		void removeCurrent();
		::Dynamic removeCurrent_dyn();

		void clearAt(::hx::Null< int >  index);
		::Dynamic clearAt_dyn();

		void clear();
		::Dynamic clear_dyn();

		void drawCanvas();
		::Dynamic drawCanvas_dyn();

		bool setIndex(int index);
		::Dynamic setIndex_dyn();

		int validIndex(int index);
		::Dynamic validIndex_dyn();

		void drawBoundingBox( ::openfl::display::BitmapData bitmap);
		::Dynamic drawBoundingBox_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace log

#endif /* INCLUDED_flixel_system_debug_log_BitmapLog */ 
