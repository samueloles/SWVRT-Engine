// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_system_debug_ScrollBar
#define INCLUDED_flixel_system_debug_ScrollBar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS3(flixel,_hx_system,debug,ScrollBar)
HX_DECLARE_CLASS3(flixel,_hx_system,debug,ScrollSprite)
HX_DECLARE_CLASS4(flixel,_hx_system,debug,_ScrollSprite,ScrollState)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)

namespace flixel{
namespace _hx_system{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES ScrollBar_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef ScrollBar_obj OBJ_;
		ScrollBar_obj();

	public:
		enum { _hx_ClassId = 0x16d115ea };

		void __construct( ::flixel::_hx_system::debug::ScrollSprite target);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.debug.ScrollBar")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.system.debug.ScrollBar"); }
		static ::hx::ObjectPtr< ScrollBar_obj > __new( ::flixel::_hx_system::debug::ScrollSprite target);
		static ::hx::ObjectPtr< ScrollBar_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::_hx_system::debug::ScrollSprite target);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ScrollBar_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ScrollBar",a6,37,cf,df); }

		static void __boot();
		static int WIDTH;
		 ::flixel::_hx_system::debug::ScrollSprite target;
		 ::openfl::display::Sprite handle;
		 ::openfl::display::Sprite bg;
		 ::flixel::_hx_system::debug::_ScrollSprite::ScrollState state;
		void onBgMouseDown( ::openfl::events::MouseEvent e);
		::Dynamic onBgMouseDown_dyn();

		void onHandleMouse( ::openfl::events::MouseEvent e);
		::Dynamic onHandleMouse_dyn();

		void onMouseMove( ::openfl::events::MouseEvent e);
		::Dynamic onMouseMove_dyn();

		Float getLocalY(Float stageY);
		::Dynamic getLocalY_dyn();

		void mouseMoveHelper(Float stageY);
		::Dynamic mouseMoveHelper_dyn();

		void onHandleMove();
		::Dynamic onHandleMove_dyn();

		void resize(Float height);
		::Dynamic resize_dyn();

		void onViewChange();
		::Dynamic onViewChange_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace debug

#endif /* INCLUDED_flixel_system_debug_ScrollBar */ 
