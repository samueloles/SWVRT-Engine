// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_system_debug_ScrollSprite
#define INCLUDED_flixel_system_debug_ScrollSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS3(flixel,_hx_system,debug,ScrollBar)
HX_DECLARE_CLASS3(flixel,_hx_system,debug,ScrollSprite)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace flixel{
namespace _hx_system{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES ScrollSprite_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef ScrollSprite_obj OBJ_;
		ScrollSprite_obj();

	public:
		enum { _hx_ClassId = 0x569bd0fa };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.debug.ScrollSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.system.debug.ScrollSprite"); }
		static ::hx::ObjectPtr< ScrollSprite_obj > __new();
		static ::hx::ObjectPtr< ScrollSprite_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ScrollSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ScrollSprite",12,7c,6a,e3); }

		Float get_maxScrollY();
		::Dynamic get_maxScrollY_dyn();

		Float get_viewHeight();
		::Dynamic get_viewHeight_dyn();

		Float get_scrollY();
		::Dynamic get_scrollY_dyn();

		Float set_scrollY(Float value);
		::Dynamic set_scrollY_dyn();

		 ::openfl::geom::Rectangle scroll;
		 ::flixel::_hx_system::debug::ScrollBar scrollBar;
		 ::flixel::_hx_system::debug::ScrollBar createScrollBar();
		::Dynamic createScrollBar_dyn();

		void onMouseScroll( ::openfl::events::MouseEvent e);
		::Dynamic onMouseScroll_dyn();

		void setScrollSize(Float width,Float height);
		::Dynamic setScrollSize_dyn();

		void updateScroll();
		::Dynamic updateScroll_dyn();

		 ::openfl::display::DisplayObject addChild( ::openfl::display::DisplayObject child);

		bool isChildVisible( ::openfl::display::DisplayObject child);
		::Dynamic isChildVisible_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace debug

#endif /* INCLUDED_flixel_system_debug_ScrollSprite */ 
