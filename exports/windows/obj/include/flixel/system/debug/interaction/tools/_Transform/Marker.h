// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_system_debug_interaction_tools__Transform_Marker
#define INCLUDED_flixel_system_debug_interaction_tools__Transform_Marker

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS6(flixel,_hx_system,debug,interaction,tools,_Transform,Marker)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,display,Graphics)

namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{
namespace tools{
namespace _Transform{


class HXCPP_CLASS_ATTRIBUTES Marker_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Marker_obj OBJ_;
		Marker_obj();

	public:
		enum { _hx_ClassId = 0x4b68ec98 };

		void __construct(::String type,bool left,bool up);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.debug.interaction.tools._Transform.Marker")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.system.debug.interaction.tools._Transform.Marker"); }
		static ::hx::ObjectPtr< Marker_obj > __new(::String type,bool left,bool up);
		static ::hx::ObjectPtr< Marker_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,bool left,bool up);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Marker_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Marker",da,e9,04,ef); }

		static void __boot();
		static int MOUSE_RADIUS;
		static int BUFFER;
		static int CIRCLE_RADIUS;
		static int RECT_MARGIN;
		static int RECT_SIZE;
		static void draw(Float screenX,Float screenY,bool circle, ::openfl::display::Graphics gfx);
		static ::Dynamic draw_dyn();

		Float x;
		Float y;
		::String type;
		bool left;
		bool up;
		void reposition( ::flixel::FlxSprite target);
		::Dynamic reposition_dyn();

};

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
} // end namespace tools
} // end namespace _Transform

#endif /* INCLUDED_flixel_system_debug_interaction_tools__Transform_Marker */ 
