// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_math__FlxRect_FlxReadOnlyRect_Impl_
#define INCLUDED_flixel_math__FlxRect_FlxReadOnlyRect_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS3(flixel,math,_FlxRect,FlxReadOnlyRect_Impl_)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPool)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace flixel{
namespace math{
namespace _FlxRect{


class HXCPP_CLASS_ATTRIBUTES FlxReadOnlyRect_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxReadOnlyRect_Impl__obj OBJ_;
		FlxReadOnlyRect_Impl__obj();

	public:
		enum { _hx_ClassId = 0x0d931305 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.math._FlxRect.FlxReadOnlyRect_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.math._FlxRect.FlxReadOnlyRect_Impl_"); }

		inline static ::hx::ObjectPtr< FlxReadOnlyRect_Impl__obj > __new() {
			::hx::ObjectPtr< FlxReadOnlyRect_Impl__obj > __this = new FlxReadOnlyRect_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxReadOnlyRect_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			FlxReadOnlyRect_Impl__obj *__this = (FlxReadOnlyRect_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxReadOnlyRect_Impl__obj), false, "flixel.math._FlxRect.FlxReadOnlyRect_Impl_"));
			*(void **)__this = FlxReadOnlyRect_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxReadOnlyRect_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxReadOnlyRect_Impl_",38,ec,26,25); }

		static ::Dynamic get_pool();
		static ::Dynamic get_pool_dyn();

		static  ::flixel::math::FlxRect get(::hx::Null< Float >  x,::hx::Null< Float >  y,::hx::Null< Float >  width,::hx::Null< Float >  height);
		static ::Dynamic get_dyn();

		static  ::flixel::math::FlxRect weak(::hx::Null< Float >  x,::hx::Null< Float >  y,::hx::Null< Float >  width,::hx::Null< Float >  height);
		static ::Dynamic weak_dyn();

		static Float get_x( ::flixel::math::FlxRect this1);
		static ::Dynamic get_x_dyn();

		static Float get_y( ::flixel::math::FlxRect this1);
		static ::Dynamic get_y_dyn();

		static Float get_width( ::flixel::math::FlxRect this1);
		static ::Dynamic get_width_dyn();

		static Float get_height( ::flixel::math::FlxRect this1);
		static ::Dynamic get_height_dyn();

		static Float get_left( ::flixel::math::FlxRect this1);
		static ::Dynamic get_left_dyn();

		static Float get_right( ::flixel::math::FlxRect this1);
		static ::Dynamic get_right_dyn();

		static Float get_top( ::flixel::math::FlxRect this1);
		static ::Dynamic get_top_dyn();

		static Float get_bottom( ::flixel::math::FlxRect this1);
		static ::Dynamic get_bottom_dyn();

		static bool get_isEmpty( ::flixel::math::FlxRect this1);
		static ::Dynamic get_isEmpty_dyn();

		static void destroy( ::flixel::math::FlxRect this1);
		static ::Dynamic destroy_dyn();

		static  ::flixel::math::FlxRect setSize( ::flixel::math::FlxRect this1,Float w,Float h);
		static ::Dynamic setSize_dyn();

		static  ::flixel::math::FlxRect setPosition( ::flixel::math::FlxRect this1,Float x,Float y);
		static ::Dynamic setPosition_dyn();

		static  ::flixel::math::FlxRect set( ::flixel::math::FlxRect this1,::hx::Null< Float >  x,::hx::Null< Float >  y,::hx::Null< Float >  w,::hx::Null< Float >  h);
		static ::Dynamic set_dyn();

		static  ::flixel::math::FlxRect setBounds( ::flixel::math::FlxRect this1,Float x1,Float y1,Float x2,Float y2);
		static ::Dynamic setBounds_dyn();

		static  ::flixel::math::FlxRect setAbs( ::flixel::math::FlxRect this1,Float x,Float y,Float w,Float h);
		static ::Dynamic setAbs_dyn();

		static  ::flixel::math::FlxRect setBoundsAbs( ::flixel::math::FlxRect this1,::hx::Null< Float >  x1,::hx::Null< Float >  y1,::hx::Null< Float >  x2,::hx::Null< Float >  y2);
		static ::Dynamic setBoundsAbs_dyn();

		static  ::flixel::math::FlxRect copyFrom( ::flixel::math::FlxRect this1, ::flixel::math::FlxRect rect);
		static ::Dynamic copyFrom_dyn();

		static  ::flixel::math::FlxRect copyFromFlash( ::flixel::math::FlxRect this1, ::openfl::geom::Rectangle rect);
		static ::Dynamic copyFromFlash_dyn();

		static  ::flixel::math::FlxRect _hx_union( ::flixel::math::FlxRect this1, ::flixel::math::FlxRect rect);
		static ::Dynamic _hx_union_dyn();

		static  ::flixel::math::FlxRect floor( ::flixel::math::FlxRect this1);
		static ::Dynamic floor_dyn();

		static  ::flixel::math::FlxRect ceil( ::flixel::math::FlxRect this1);
		static ::Dynamic ceil_dyn();

		static  ::flixel::math::FlxRect round( ::flixel::math::FlxRect this1);
		static ::Dynamic round_dyn();

		static  ::flixel::math::FlxRect fromTwoPoints( ::flixel::math::FlxRect this1, ::flixel::math::FlxBasePoint p1, ::flixel::math::FlxBasePoint p2);
		static ::Dynamic fromTwoPoints_dyn();

		static  ::flixel::math::FlxRect unionWithPoint( ::flixel::math::FlxRect this1, ::flixel::math::FlxBasePoint p);
		static ::Dynamic unionWithPoint_dyn();

		static  ::flixel::math::FlxRect offset( ::flixel::math::FlxRect this1,Float dx,Float dy);
		static ::Dynamic offset_dyn();

		static  ::flixel::math::FlxRect clipTo( ::flixel::math::FlxRect this1, ::flixel::math::FlxRect rect);
		static ::Dynamic clipTo_dyn();

};

} // end namespace flixel
} // end namespace math
} // end namespace _FlxRect

#endif /* INCLUDED_flixel_math__FlxRect_FlxReadOnlyRect_Impl_ */ 
